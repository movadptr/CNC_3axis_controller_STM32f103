
CNC_3axis_controller_STM32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ced0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800cfdc  0800cfdc  0000dfdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d130  0800d130  0000f1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d130  0800d130  0000e130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d138  0800d138  0000f1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d138  0800d138  0000e138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d13c  0800d13c  0000e13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800d140  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001428  200001e0  0800d320  0000f1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001c00  20001608  0800d320  0000f608  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001403a  00000000  00000000  0000f209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff9  00000000  00000000  00023243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00027240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000deb  00000000  00000000  000284e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d321  00000000  00000000  000292d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172e8  00000000  00000000  000465f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093549  00000000  00000000  0005d8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0e25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005770  00000000  00000000  000f0e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000f65d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800cfc4 	.word	0x0800cfc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	0800cfc4 	.word	0x0800cfc4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <__NVIC_GetPriorityGrouping+0x18>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	f003 0307 	and.w	r3, r3, #7
}
 8000712:	4618      	mov	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db0b      	blt.n	800074a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f003 021f 	and.w	r2, r3, #31
 8000738:	4906      	ldr	r1, [pc, #24]	@ (8000754 <__NVIC_EnableIRQ+0x34>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	2001      	movs	r0, #1
 8000742:	fa00 f202 	lsl.w	r2, r0, r2
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	@ (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	@ (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	@ 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	@ 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000814:	f3bf 8f4f 	dsb	sy
}
 8000818:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <__NVIC_SystemReset+0x24>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000822:	4904      	ldr	r1, [pc, #16]	@ (8000834 <__NVIC_SystemReset+0x24>)
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <__NVIC_SystemReset+0x28>)
 8000826:	4313      	orrs	r3, r2
 8000828:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800082a:	f3bf 8f4f 	dsb	sy
}
 800082e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <__NVIC_SystemReset+0x20>
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	05fa0004 	.word	0x05fa0004

0800083c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f043 0201 	orr.w	r2, r3, #1
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	601a      	str	r2, [r3, #0]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f023 0208 	bic.w	r2, r3, #8
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	431a      	orrs	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	601a      	str	r2, [r3, #0]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	601a      	str	r2, [r3, #0]
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a1a      	ldr	r2, [r3, #32]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	431a      	orrs	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	621a      	str	r2, [r3, #32]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d01c      	beq.n	800093a <LL_TIM_OC_DisableFast+0x4a>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	2b04      	cmp	r3, #4
 8000904:	d017      	beq.n	8000936 <LL_TIM_OC_DisableFast+0x46>
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	2b10      	cmp	r3, #16
 800090a:	d012      	beq.n	8000932 <LL_TIM_OC_DisableFast+0x42>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	2b40      	cmp	r3, #64	@ 0x40
 8000910:	d00d      	beq.n	800092e <LL_TIM_OC_DisableFast+0x3e>
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000918:	d007      	beq.n	800092a <LL_TIM_OC_DisableFast+0x3a>
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000920:	d101      	bne.n	8000926 <LL_TIM_OC_DisableFast+0x36>
 8000922:	2305      	movs	r3, #5
 8000924:	e00a      	b.n	800093c <LL_TIM_OC_DisableFast+0x4c>
 8000926:	2306      	movs	r3, #6
 8000928:	e008      	b.n	800093c <LL_TIM_OC_DisableFast+0x4c>
 800092a:	2304      	movs	r3, #4
 800092c:	e006      	b.n	800093c <LL_TIM_OC_DisableFast+0x4c>
 800092e:	2303      	movs	r3, #3
 8000930:	e004      	b.n	800093c <LL_TIM_OC_DisableFast+0x4c>
 8000932:	2302      	movs	r3, #2
 8000934:	e002      	b.n	800093c <LL_TIM_OC_DisableFast+0x4c>
 8000936:	2301      	movs	r3, #1
 8000938:	e000      	b.n	800093c <LL_TIM_OC_DisableFast+0x4c>
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3318      	adds	r3, #24
 8000942:	4619      	mov	r1, r3
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <LL_TIM_OC_DisableFast+0x80>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	440b      	add	r3, r1
 800094c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	4907      	ldr	r1, [pc, #28]	@ (8000974 <LL_TIM_OC_DisableFast+0x84>)
 8000956:	5ccb      	ldrb	r3, [r1, r3]
 8000958:	4619      	mov	r1, r3
 800095a:	2304      	movs	r3, #4
 800095c:	408b      	lsls	r3, r1
 800095e:	43db      	mvns	r3, r3
 8000960:	401a      	ands	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	601a      	str	r2, [r3, #0]

}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	0800d0a4 	.word	0x0800d0a4
 8000974:	0800d0ac 	.word	0x0800d0ac

08000978 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d01c      	beq.n	80009c2 <LL_TIM_OC_EnablePreload+0x4a>
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	2b04      	cmp	r3, #4
 800098c:	d017      	beq.n	80009be <LL_TIM_OC_EnablePreload+0x46>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2b10      	cmp	r3, #16
 8000992:	d012      	beq.n	80009ba <LL_TIM_OC_EnablePreload+0x42>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2b40      	cmp	r3, #64	@ 0x40
 8000998:	d00d      	beq.n	80009b6 <LL_TIM_OC_EnablePreload+0x3e>
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009a0:	d007      	beq.n	80009b2 <LL_TIM_OC_EnablePreload+0x3a>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009a8:	d101      	bne.n	80009ae <LL_TIM_OC_EnablePreload+0x36>
 80009aa:	2305      	movs	r3, #5
 80009ac:	e00a      	b.n	80009c4 <LL_TIM_OC_EnablePreload+0x4c>
 80009ae:	2306      	movs	r3, #6
 80009b0:	e008      	b.n	80009c4 <LL_TIM_OC_EnablePreload+0x4c>
 80009b2:	2304      	movs	r3, #4
 80009b4:	e006      	b.n	80009c4 <LL_TIM_OC_EnablePreload+0x4c>
 80009b6:	2303      	movs	r3, #3
 80009b8:	e004      	b.n	80009c4 <LL_TIM_OC_EnablePreload+0x4c>
 80009ba:	2302      	movs	r3, #2
 80009bc:	e002      	b.n	80009c4 <LL_TIM_OC_EnablePreload+0x4c>
 80009be:	2301      	movs	r3, #1
 80009c0:	e000      	b.n	80009c4 <LL_TIM_OC_EnablePreload+0x4c>
 80009c2:	2300      	movs	r3, #0
 80009c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3318      	adds	r3, #24
 80009ca:	4619      	mov	r1, r3
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <LL_TIM_OC_EnablePreload+0x80>)
 80009d0:	5cd3      	ldrb	r3, [r2, r3]
 80009d2:	440b      	add	r3, r1
 80009d4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	4907      	ldr	r1, [pc, #28]	@ (80009fc <LL_TIM_OC_EnablePreload+0x84>)
 80009de:	5ccb      	ldrb	r3, [r1, r3]
 80009e0:	4619      	mov	r1, r3
 80009e2:	2308      	movs	r3, #8
 80009e4:	408b      	lsls	r3, r1
 80009e6:	431a      	orrs	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	0800d0a4 	.word	0x0800d0a4
 80009fc:	0800d0ac 	.word	0x0800d0ac

08000a00 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr

08000a1a <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000a2c:	f023 0307 	bic.w	r3, r3, #7
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	431a      	orrs	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	609a      	str	r2, [r3, #8]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	431a      	orrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	605a      	str	r2, [r3, #4]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	609a      	str	r2, [r3, #8]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f043 0202 	orr.w	r2, r3, #2
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	60da      	str	r2, [r3, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000aa2:	b490      	push	{r4, r7}
 8000aa4:	b088      	sub	sp, #32
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	0e1b      	lsrs	r3, r3, #24
 8000ab6:	4413      	add	r3, r2
 8000ab8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000aba:	6822      	ldr	r2, [r4, #0]
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa93 f3a3 	rbit	r3, r3
 8000ac6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	fab3 f383 	clz	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	401a      	ands	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	fa93 f3a3 	rbit	r3, r3
 8000ae6:	61bb      	str	r3, [r7, #24]
  return result;
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fab3 f383 	clz	r3, r3
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	6023      	str	r3, [r4, #0]
}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc90      	pop	{r4, r7}
 8000b04:	4770      	bx	lr

08000b06 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b087      	sub	sp, #28
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa93 f3a3 	rbit	r3, r3
 8000b2a:	613b      	str	r3, [r7, #16]
  return result;
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	fab3 f383 	clz	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4619      	mov	r1, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	60da      	str	r2, [r3, #12]
}
 8000b40:	bf00      	nop
 8000b42:	371c      	adds	r7, #28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	43da      	mvns	r2, r3
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	4013      	ands	r3, r2
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	bf0c      	ite	eq
 8000b66:	2301      	moveq	r3, #1
 8000b68:	2300      	movne	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	0a1b      	lsrs	r3, r3, #8
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	611a      	str	r2, [r3, #16]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	615a      	str	r2, [r3, #20]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
	...

08000bb4 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000bbe:	4a13      	ldr	r2, [pc, #76]	@ (8000c0c <LL_GPIO_AF_SetEXTISource+0x58>)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	0c1b      	lsrs	r3, r3, #16
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	ea02 0103 	and.w	r1, r2, r3
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	0c1b      	lsrs	r3, r3, #16
 8000bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	fa93 f3a3 	rbit	r3, r3
 8000be0:	60bb      	str	r3, [r7, #8]
  return result;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	fab3 f383 	clz	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	fa03 f202 	lsl.w	r2, r3, r2
 8000bf2:	4806      	ldr	r0, [pc, #24]	@ (8000c0c <LL_GPIO_AF_SetEXTISource+0x58>)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40010000 	.word	0x40010000

08000c10 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c1a:	69da      	ldr	r2, [r3, #28]
 8000c1c:	4907      	ldr	r1, [pc, #28]	@ (8000c3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c24:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c26:	69da      	ldr	r2, [r3, #28]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c4a:	699a      	ldr	r2, [r3, #24]
 8000c4c:	4907      	ldr	r1, [pc, #28]	@ (8000c6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c56:	699a      	ldr	r2, [r3, #24]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c72:	b0bd      	sub	sp, #244	@ 0xf4
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c76:	f002 fcdd 	bl	8003634 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7a:	f000 fb65 	bl	8001348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7e:	f000 fcd1 	bl	8001624 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c82:	f00a fa35 	bl	800b0f0 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000c86:	f000 fc6d 	bl	8001564 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000c8a:	f000 fbed 	bl	8001468 <MX_TIM2_Init>
  MX_SPI2_Init();
 8000c8e:	f000 fbb5 	bl	80013fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  stepper_pos.movespeed |= toolspeed_7;
 8000c92:	4bbe      	ldr	r3, [pc, #760]	@ (8000f8c <main+0x31c>)
 8000c94:	7c1b      	ldrb	r3, [r3, #16]
 8000c96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4bbb      	ldr	r3, [pc, #748]	@ (8000f8c <main+0x31c>)
 8000c9e:	741a      	strb	r2, [r3, #16]
  STSPIN220_init(&stepper_pos, stepsizeX1_4, stepsizeY1_4, stepsizeZ1_4);
 8000ca0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ca4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ca8:	2140      	movs	r1, #64	@ 0x40
 8000caa:	48b8      	ldr	r0, [pc, #736]	@ (8000f8c <main+0x31c>)
 8000cac:	f001 ff88 	bl	8002bc0 <STSPIN220_init>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cb0:	b662      	cpsie	i
}
 8000cb2:	bf00      	nop

  __enable_irq();

  LL_mDelay(500);
 8000cb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cb8:	f008 fe60 	bl	800997c <LL_mDelay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  get_limit_sw_state();
 8000cbc:	f001 f9a2 	bl	8002004 <get_limit_sw_state>

  gotozero(&stepper_pos);
 8000cc0:	48b2      	ldr	r0, [pc, #712]	@ (8000f8c <main+0x31c>)
 8000cc2:	f001 fa41 	bl	8002148 <gotozero>
   /*USBD_Stop(&hUsbDeviceFS);
   LL_mDelay(100);
   USBD_Start(&hUsbDeviceFS);*/
#endif

  while(host_com_port_open == 0)//wait for the CDC_Control_FS() function to be called with "CDC_SET_CONTROL_LINE_STATE" command
 8000cc6:	e002      	b.n	8000cce <main+0x5e>
  {
	  LL_mDelay(250);
 8000cc8:	20fa      	movs	r0, #250	@ 0xfa
 8000cca:	f008 fe57 	bl	800997c <LL_mDelay>
  while(host_com_port_open == 0)//wait for the CDC_Control_FS() function to be called with "CDC_SET_CONTROL_LINE_STATE" command
 8000cce:	4bb0      	ldr	r3, [pc, #704]	@ (8000f90 <main+0x320>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f8      	beq.n	8000cc8 <main+0x58>
  }
  msDelay(20);
 8000cd6:	2014      	movs	r0, #20
 8000cd8:	f001 f85c 	bl	8001d94 <msDelay>
  uint8_t str[] = {"Connected to PC"};
 8000cdc:	4bad      	ldr	r3, [pc, #692]	@ (8000f94 <main+0x324>)
 8000cde:	f107 06dc 	add.w	r6, r7, #220	@ 0xdc
 8000ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  ext_brd_transmit_string(PrintInfo_cmd, str, sizeof(str));
 8000ce8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cec:	2210      	movs	r2, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 fded 	bl	80018d0 <ext_brd_transmit_string>

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000cf6:	48a8      	ldr	r0, [pc, #672]	@ (8000f98 <main+0x328>)
 8000cf8:	f009 f90f 	bl	8009f1a <USBD_CDC_ReceivePacket>
  USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8000cfc:	48a6      	ldr	r0, [pc, #664]	@ (8000f98 <main+0x328>)
 8000cfe:	f009 f8dd 	bl	8009ebc <USBD_CDC_TransmitPacket>

  uint8_t cmddone[1] = {CMD_DONE_CHAR};
 8000d02:	233b      	movs	r3, #59	@ 0x3b
 8000d04:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
  rxflagbyte = 0;
 8000d08:	4ba4      	ldr	r3, [pc, #656]	@ (8000f9c <main+0x32c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
  rxbufend = 0;
 8000d0e:	4ba4      	ldr	r3, [pc, #656]	@ (8000fa0 <main+0x330>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]


  while(1)
  {
	while(rxflagbyte == 0)
 8000d14:	e000      	b.n	8000d18 <main+0xa8>
	{
		__NOP();
 8000d16:	bf00      	nop
	while(rxflagbyte == 0)
 8000d18:	4ba0      	ldr	r3, [pc, #640]	@ (8000f9c <main+0x32c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0fa      	beq.n	8000d16 <main+0xa6>
		{
			stepxyz(abs(manualXdir)?1:0, manualXdir, abs(manualYdir)?1:0, manualYdir, 0, 0, &stepper_pos);
		}
	}*/

	switch(rxbuffer[0])
 8000d20:	4ba0      	ldr	r3, [pc, #640]	@ (8000fa4 <main+0x334>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	3b47      	subs	r3, #71	@ 0x47
 8000d26:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d28:	f200 8266 	bhi.w	80011f8 <main+0x588>
 8000d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d34 <main+0xc4>)
 8000d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d32:	bf00      	nop
 8000d34:	080010df 	.word	0x080010df
 8000d38:	080011f9 	.word	0x080011f9
 8000d3c:	08000df5 	.word	0x08000df5
 8000d40:	080011f9 	.word	0x080011f9
 8000d44:	080011f9 	.word	0x080011f9
 8000d48:	080011f9 	.word	0x080011f9
 8000d4c:	080011f9 	.word	0x080011f9
 8000d50:	080011f9 	.word	0x080011f9
 8000d54:	080011f9 	.word	0x080011f9
 8000d58:	08000e11 	.word	0x08000e11
 8000d5c:	080011f9 	.word	0x080011f9
 8000d60:	080011f9 	.word	0x080011f9
 8000d64:	080011f9 	.word	0x080011f9
 8000d68:	0800109b 	.word	0x0800109b
 8000d6c:	080011f9 	.word	0x080011f9
 8000d70:	08000fa9 	.word	0x08000fa9
 8000d74:	080011f9 	.word	0x080011f9
 8000d78:	080011f9 	.word	0x080011f9
 8000d7c:	080011f9 	.word	0x080011f9
 8000d80:	080011f9 	.word	0x080011f9
 8000d84:	080011f9 	.word	0x080011f9
 8000d88:	080011f9 	.word	0x080011f9
 8000d8c:	080011f9 	.word	0x080011f9
 8000d90:	080011f9 	.word	0x080011f9
 8000d94:	080011f9 	.word	0x080011f9
 8000d98:	080011f9 	.word	0x080011f9
 8000d9c:	080011f9 	.word	0x080011f9
 8000da0:	080011f9 	.word	0x080011f9
 8000da4:	080011f9 	.word	0x080011f9
 8000da8:	080011f9 	.word	0x080011f9
 8000dac:	080011f9 	.word	0x080011f9
 8000db0:	080011f9 	.word	0x080011f9
 8000db4:	080010df 	.word	0x080010df
 8000db8:	080011f9 	.word	0x080011f9
 8000dbc:	08000df5 	.word	0x08000df5
 8000dc0:	080011f9 	.word	0x080011f9
 8000dc4:	080011f9 	.word	0x080011f9
 8000dc8:	080011f9 	.word	0x080011f9
 8000dcc:	080011f9 	.word	0x080011f9
 8000dd0:	080011f9 	.word	0x080011f9
 8000dd4:	080011f9 	.word	0x080011f9
 8000dd8:	08000e11 	.word	0x08000e11
 8000ddc:	080011f9 	.word	0x080011f9
 8000de0:	080011f9 	.word	0x080011f9
 8000de4:	080011f9 	.word	0x080011f9
 8000de8:	0800109b 	.word	0x0800109b
 8000dec:	080011f9 	.word	0x080011f9
 8000df0:	08000fa9 	.word	0x08000fa9
	{
		//initialize
		case 'I':	//the command only can be the "IN"
		case 'i':	stepper_pos.movespeed |= toolspeed_7;
 8000df4:	4b65      	ldr	r3, [pc, #404]	@ (8000f8c <main+0x31c>)
 8000df6:	7c1b      	ldrb	r3, [r3, #16]
 8000df8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b63      	ldr	r3, [pc, #396]	@ (8000f8c <main+0x31c>)
 8000e00:	741a      	strb	r2, [r3, #16]
					gotozero(&stepper_pos);
 8000e02:	4862      	ldr	r0, [pc, #392]	@ (8000f8c <main+0x31c>)
 8000e04:	f001 f9a0 	bl	8002148 <gotozero>
					msDelay(100);
 8000e08:	2064      	movs	r0, #100	@ 0x64
 8000e0a:	f000 ffc3 	bl	8001d94 <msDelay>
					break;
 8000e0e:	e1fc      	b.n	800120a <main+0x59a>
		//set move type and move
		case 'P':
		case 'p':	switch(rxbuffer[1])
 8000e10:	4b64      	ldr	r3, [pc, #400]	@ (8000fa4 <main+0x334>)
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	3b41      	subs	r3, #65	@ 0x41
 8000e16:	2b34      	cmp	r3, #52	@ 0x34
 8000e18:	f200 80aa 	bhi.w	8000f70 <main+0x300>
 8000e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e24 <main+0x1b4>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000ef9 	.word	0x08000ef9
 8000e28:	08000f71 	.word	0x08000f71
 8000e2c:	08000f71 	.word	0x08000f71
 8000e30:	08000f53 	.word	0x08000f53
 8000e34:	08000f71 	.word	0x08000f71
 8000e38:	08000f71 	.word	0x08000f71
 8000e3c:	08000f71 	.word	0x08000f71
 8000e40:	08000f71 	.word	0x08000f71
 8000e44:	08000f71 	.word	0x08000f71
 8000e48:	08000f71 	.word	0x08000f71
 8000e4c:	08000f71 	.word	0x08000f71
 8000e50:	08000f71 	.word	0x08000f71
 8000e54:	08000f71 	.word	0x08000f71
 8000e58:	08000f71 	.word	0x08000f71
 8000e5c:	08000f71 	.word	0x08000f71
 8000e60:	08000f71 	.word	0x08000f71
 8000e64:	08000f71 	.word	0x08000f71
 8000e68:	08000f17 	.word	0x08000f17
 8000e6c:	08000f71 	.word	0x08000f71
 8000e70:	08000f71 	.word	0x08000f71
 8000e74:	08000f35 	.word	0x08000f35
 8000e78:	08000f71 	.word	0x08000f71
 8000e7c:	08000f71 	.word	0x08000f71
 8000e80:	08000f71 	.word	0x08000f71
 8000e84:	08000f71 	.word	0x08000f71
 8000e88:	08000f71 	.word	0x08000f71
 8000e8c:	08000f71 	.word	0x08000f71
 8000e90:	08000f71 	.word	0x08000f71
 8000e94:	08000f71 	.word	0x08000f71
 8000e98:	08000f71 	.word	0x08000f71
 8000e9c:	08000f71 	.word	0x08000f71
 8000ea0:	08000f71 	.word	0x08000f71
 8000ea4:	08000ef9 	.word	0x08000ef9
 8000ea8:	08000f71 	.word	0x08000f71
 8000eac:	08000f71 	.word	0x08000f71
 8000eb0:	08000f53 	.word	0x08000f53
 8000eb4:	08000f71 	.word	0x08000f71
 8000eb8:	08000f71 	.word	0x08000f71
 8000ebc:	08000f71 	.word	0x08000f71
 8000ec0:	08000f71 	.word	0x08000f71
 8000ec4:	08000f71 	.word	0x08000f71
 8000ec8:	08000f71 	.word	0x08000f71
 8000ecc:	08000f71 	.word	0x08000f71
 8000ed0:	08000f71 	.word	0x08000f71
 8000ed4:	08000f71 	.word	0x08000f71
 8000ed8:	08000f71 	.word	0x08000f71
 8000edc:	08000f71 	.word	0x08000f71
 8000ee0:	08000f71 	.word	0x08000f71
 8000ee4:	08000f71 	.word	0x08000f71
 8000ee8:	08000f17 	.word	0x08000f17
 8000eec:	08000f71 	.word	0x08000f71
 8000ef0:	08000f71 	.word	0x08000f71
 8000ef4:	08000f35 	.word	0x08000f35
					{
						case 'A':
						case 'a':	stepper_pos.curr_state &= ~RelativeStep_MSK;
 8000ef8:	4b24      	ldr	r3, [pc, #144]	@ (8000f8c <main+0x31c>)
 8000efa:	8a5b      	ldrh	r3, [r3, #18]
 8000efc:	f023 0302 	bic.w	r3, r3, #2
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	4b22      	ldr	r3, [pc, #136]	@ (8000f8c <main+0x31c>)
 8000f04:	825a      	strh	r2, [r3, #18]
									stepper_pos.curr_state |= AbsoluteStep_MSK;
 8000f06:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <main+0x31c>)
 8000f08:	8a5b      	ldrh	r3, [r3, #18]
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <main+0x31c>)
 8000f12:	825a      	strh	r2, [r3, #18]
									break;
 8000f14:	e02c      	b.n	8000f70 <main+0x300>

						case 'R':
						case 'r':	stepper_pos.curr_state &= ~AbsoluteStep_MSK;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <main+0x31c>)
 8000f18:	8a5b      	ldrh	r3, [r3, #18]
 8000f1a:	f023 0301 	bic.w	r3, r3, #1
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <main+0x31c>)
 8000f22:	825a      	strh	r2, [r3, #18]
									stepper_pos.curr_state |= RelativeStep_MSK;
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <main+0x31c>)
 8000f26:	8a5b      	ldrh	r3, [r3, #18]
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <main+0x31c>)
 8000f30:	825a      	strh	r2, [r3, #18]
									break;
 8000f32:	e01d      	b.n	8000f70 <main+0x300>

						case 'U':
						case 'u':	stepper_pos.curr_state &= ~FeedMove;
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <main+0x31c>)
 8000f36:	8a5b      	ldrh	r3, [r3, #18]
 8000f38:	f023 0308 	bic.w	r3, r3, #8
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <main+0x31c>)
 8000f40:	825a      	strh	r2, [r3, #18]
									stepper_pos.curr_state |= RapidMove;
 8000f42:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <main+0x31c>)
 8000f44:	8a5b      	ldrh	r3, [r3, #18]
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <main+0x31c>)
 8000f4e:	825a      	strh	r2, [r3, #18]
									break;
 8000f50:	e00e      	b.n	8000f70 <main+0x300>

						case 'D':
						case 'd':	stepper_pos.curr_state &= ~RapidMove;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <main+0x31c>)
 8000f54:	8a5b      	ldrh	r3, [r3, #18]
 8000f56:	f023 0304 	bic.w	r3, r3, #4
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <main+0x31c>)
 8000f5e:	825a      	strh	r2, [r3, #18]
									stepper_pos.curr_state |= FeedMove;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <main+0x31c>)
 8000f62:	8a5b      	ldrh	r3, [r3, #18]
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <main+0x31c>)
 8000f6c:	825a      	strh	r2, [r3, #18]
									break;
 8000f6e:	bf00      	nop

					}
					if(rxbufend>3)//ha a command tartalmaz értékeket is akkor legalább 8 lesz a hossza pontosvesszővel együtt: PD0,0,0;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <main+0x330>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	f240 8141 	bls.w	80011fc <main+0x58c>
					{
						eval_and_execute_plot_cmd(rxbuffer, rxbufend, &stepper_pos);
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <main+0x330>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4a03      	ldr	r2, [pc, #12]	@ (8000f8c <main+0x31c>)
 8000f80:	4619      	mov	r1, r3
 8000f82:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <main+0x334>)
 8000f84:	f000 fd4a 	bl	8001a1c <eval_and_execute_plot_cmd>
					}
					break;
 8000f88:	e138      	b.n	80011fc <main+0x58c>
 8000f8a:	bf00      	nop
 8000f8c:	200002bc 	.word	0x200002bc
 8000f90:	200005ab 	.word	0x200005ab
 8000f94:	0800cfe4 	.word	0x0800cfe4
 8000f98:	200002e0 	.word	0x200002e0
 8000f9c:	200002b9 	.word	0x200002b9
 8000fa0:	200002b8 	.word	0x200002b8
 8000fa4:	20000254 	.word	0x20000254
		//set toolspeed
		case 'v':
		case 'V':	if( (rxbuffer[1]=='s') || (rxbuffer[1]=='S') )
 8000fa8:	4bb4      	ldr	r3, [pc, #720]	@ (800127c <main+0x60c>)
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	2b73      	cmp	r3, #115	@ 0x73
 8000fae:	d004      	beq.n	8000fba <main+0x34a>
 8000fb0:	4bb2      	ldr	r3, [pc, #712]	@ (800127c <main+0x60c>)
 8000fb2:	785b      	ldrb	r3, [r3, #1]
 8000fb4:	2b53      	cmp	r3, #83	@ 0x53
 8000fb6:	f040 8123 	bne.w	8001200 <main+0x590>
					{
						switch(rxbuffer[2])
 8000fba:	4bb0      	ldr	r3, [pc, #704]	@ (800127c <main+0x60c>)
 8000fbc:	789b      	ldrb	r3, [r3, #2]
 8000fbe:	3b30      	subs	r3, #48	@ 0x30
 8000fc0:	2b06      	cmp	r3, #6
 8000fc2:	d85e      	bhi.n	8001082 <main+0x412>
 8000fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fcc <main+0x35c>)
 8000fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fca:	bf00      	nop
 8000fcc:	08000fe9 	.word	0x08000fe9
 8000fd0:	08000fff 	.word	0x08000fff
 8000fd4:	08001015 	.word	0x08001015
 8000fd8:	0800102b 	.word	0x0800102b
 8000fdc:	08001041 	.word	0x08001041
 8000fe0:	08001057 	.word	0x08001057
 8000fe4:	0800106d 	.word	0x0800106d
						{
							case '0':	stepper_pos.movespeed = 0;
 8000fe8:	4ba5      	ldr	r3, [pc, #660]	@ (8001280 <main+0x610>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	741a      	strb	r2, [r3, #16]
										stepper_pos.movespeed |= toolspeed_0;
 8000fee:	4ba4      	ldr	r3, [pc, #656]	@ (8001280 <main+0x610>)
 8000ff0:	7c1b      	ldrb	r3, [r3, #16]
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4ba1      	ldr	r3, [pc, #644]	@ (8001280 <main+0x610>)
 8000ffa:	741a      	strb	r2, [r3, #16]
										break;
 8000ffc:	e04c      	b.n	8001098 <main+0x428>

							case '1':	stepper_pos.movespeed = 0;
 8000ffe:	4ba0      	ldr	r3, [pc, #640]	@ (8001280 <main+0x610>)
 8001000:	2200      	movs	r2, #0
 8001002:	741a      	strb	r2, [r3, #16]
										stepper_pos.movespeed |= toolspeed_1;
 8001004:	4b9e      	ldr	r3, [pc, #632]	@ (8001280 <main+0x610>)
 8001006:	7c1b      	ldrb	r3, [r3, #16]
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b9c      	ldr	r3, [pc, #624]	@ (8001280 <main+0x610>)
 8001010:	741a      	strb	r2, [r3, #16]
										break;
 8001012:	e041      	b.n	8001098 <main+0x428>

							case '2':	stepper_pos.movespeed = 0;
 8001014:	4b9a      	ldr	r3, [pc, #616]	@ (8001280 <main+0x610>)
 8001016:	2200      	movs	r2, #0
 8001018:	741a      	strb	r2, [r3, #16]
										stepper_pos.movespeed |= toolspeed_2;
 800101a:	4b99      	ldr	r3, [pc, #612]	@ (8001280 <main+0x610>)
 800101c:	7c1b      	ldrb	r3, [r3, #16]
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b96      	ldr	r3, [pc, #600]	@ (8001280 <main+0x610>)
 8001026:	741a      	strb	r2, [r3, #16]
										break;
 8001028:	e036      	b.n	8001098 <main+0x428>

							case '3':	stepper_pos.movespeed = 0;
 800102a:	4b95      	ldr	r3, [pc, #596]	@ (8001280 <main+0x610>)
 800102c:	2200      	movs	r2, #0
 800102e:	741a      	strb	r2, [r3, #16]
										stepper_pos.movespeed |= toolspeed_3;
 8001030:	4b93      	ldr	r3, [pc, #588]	@ (8001280 <main+0x610>)
 8001032:	7c1b      	ldrb	r3, [r3, #16]
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b91      	ldr	r3, [pc, #580]	@ (8001280 <main+0x610>)
 800103c:	741a      	strb	r2, [r3, #16]
										break;
 800103e:	e02b      	b.n	8001098 <main+0x428>

							case '4':	stepper_pos.movespeed = 0;
 8001040:	4b8f      	ldr	r3, [pc, #572]	@ (8001280 <main+0x610>)
 8001042:	2200      	movs	r2, #0
 8001044:	741a      	strb	r2, [r3, #16]
										stepper_pos.movespeed |= toolspeed_4;
 8001046:	4b8e      	ldr	r3, [pc, #568]	@ (8001280 <main+0x610>)
 8001048:	7c1b      	ldrb	r3, [r3, #16]
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b8b      	ldr	r3, [pc, #556]	@ (8001280 <main+0x610>)
 8001052:	741a      	strb	r2, [r3, #16]
										break;
 8001054:	e020      	b.n	8001098 <main+0x428>

							case '5':	stepper_pos.movespeed = 0;
 8001056:	4b8a      	ldr	r3, [pc, #552]	@ (8001280 <main+0x610>)
 8001058:	2200      	movs	r2, #0
 800105a:	741a      	strb	r2, [r3, #16]
										stepper_pos.movespeed |= toolspeed_5;
 800105c:	4b88      	ldr	r3, [pc, #544]	@ (8001280 <main+0x610>)
 800105e:	7c1b      	ldrb	r3, [r3, #16]
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b86      	ldr	r3, [pc, #536]	@ (8001280 <main+0x610>)
 8001068:	741a      	strb	r2, [r3, #16]
										break;
 800106a:	e015      	b.n	8001098 <main+0x428>

							case '6':	stepper_pos.movespeed = 0;
 800106c:	4b84      	ldr	r3, [pc, #528]	@ (8001280 <main+0x610>)
 800106e:	2200      	movs	r2, #0
 8001070:	741a      	strb	r2, [r3, #16]
										stepper_pos.movespeed |= toolspeed_6;
 8001072:	4b83      	ldr	r3, [pc, #524]	@ (8001280 <main+0x610>)
 8001074:	7c1b      	ldrb	r3, [r3, #16]
 8001076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b80      	ldr	r3, [pc, #512]	@ (8001280 <main+0x610>)
 800107e:	741a      	strb	r2, [r3, #16]
										break;
 8001080:	e00a      	b.n	8001098 <main+0x428>

							default:
							case '7':	stepper_pos.movespeed = 0;
 8001082:	4b7f      	ldr	r3, [pc, #508]	@ (8001280 <main+0x610>)
 8001084:	2200      	movs	r2, #0
 8001086:	741a      	strb	r2, [r3, #16]
										stepper_pos.movespeed |= toolspeed_7;
 8001088:	4b7d      	ldr	r3, [pc, #500]	@ (8001280 <main+0x610>)
 800108a:	7c1b      	ldrb	r3, [r3, #16]
 800108c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b7b      	ldr	r3, [pc, #492]	@ (8001280 <main+0x610>)
 8001094:	741a      	strb	r2, [r3, #16]
										break;
 8001096:	bf00      	nop
						}
					}
					break;
 8001098:	e0b2      	b.n	8001200 <main+0x590>
		//send filename to LCD
		case 't':
		case 'T':	if( (rxbuffer[1]=='x') || (rxbuffer[1]=='X') )
 800109a:	4b78      	ldr	r3, [pc, #480]	@ (800127c <main+0x60c>)
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	2b78      	cmp	r3, #120	@ 0x78
 80010a0:	d004      	beq.n	80010ac <main+0x43c>
 80010a2:	4b76      	ldr	r3, [pc, #472]	@ (800127c <main+0x60c>)
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	2b58      	cmp	r3, #88	@ 0x58
 80010a8:	f040 80ac 	bne.w	8001204 <main+0x594>
					{
						msDelay(100);
 80010ac:	2064      	movs	r0, #100	@ 0x64
 80010ae:	f000 fe71 	bl	8001d94 <msDelay>
						rxbuffer[rxbufend]=0;//az utolsó elemet lecseréljük lezáró nullára hogy a string biztos standard legyen
 80010b2:	4b74      	ldr	r3, [pc, #464]	@ (8001284 <main+0x614>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b70      	ldr	r3, [pc, #448]	@ (800127c <main+0x60c>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	5499      	strb	r1, [r3, r2]
						ext_brd_transmit_string(PrintFilenameTXT_cmd, &rxbuffer[2], rxbufend-1);
 80010be:	4b71      	ldr	r3, [pc, #452]	@ (8001284 <main+0x614>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	496f      	ldr	r1, [pc, #444]	@ (8001288 <main+0x618>)
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 fc00 	bl	80018d0 <ext_brd_transmit_string>
						rxbuffer[rxbufend]=CMD_DONE_CHAR;//visszaállítás
 80010d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001284 <main+0x614>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b69      	ldr	r3, [pc, #420]	@ (800127c <main+0x60c>)
 80010d8:	213b      	movs	r1, #59	@ 0x3b
 80010da:	5499      	strb	r1, [r3, r2]
					}
					break;
 80010dc:	e092      	b.n	8001204 <main+0x594>
		//get current pos and send to computer
		case 'g':
		case 'G':	if( (rxbuffer[1]=='p') || (rxbuffer[1]=='P') )
 80010de:	4b67      	ldr	r3, [pc, #412]	@ (800127c <main+0x60c>)
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	2b70      	cmp	r3, #112	@ 0x70
 80010e4:	d004      	beq.n	80010f0 <main+0x480>
 80010e6:	4b65      	ldr	r3, [pc, #404]	@ (800127c <main+0x60c>)
 80010e8:	785b      	ldrb	r3, [r3, #1]
 80010ea:	2b50      	cmp	r3, #80	@ 0x50
 80010ec:	f040 808c 	bne.w	8001208 <main+0x598>
					{
						char numstr[10] = {0};
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80010f6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	809a      	strh	r2, [r3, #4]
						uint8_t len;

						itoa(stepper_pos.current_pos_x, numstr, 10);
 8001100:	4b5f      	ldr	r3, [pc, #380]	@ (8001280 <main+0x610>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800110a:	220a      	movs	r2, #10
 800110c:	4619      	mov	r1, r3
 800110e:	f00a fd9d 	bl	800bc4c <itoa>
						len=strlen(numstr);
 8001112:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f818 	bl	800014c <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						numstr[len+1] = ';';
 8001122:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8001126:	3301      	adds	r3, #1
 8001128:	33f0      	adds	r3, #240	@ 0xf0
 800112a:	443b      	add	r3, r7
 800112c:	223b      	movs	r2, #59	@ 0x3b
 800112e:	f803 2c24 	strb.w	r2, [r3, #-36]
						numstr[len+2] = 0;
 8001132:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8001136:	3302      	adds	r3, #2
 8001138:	33f0      	adds	r3, #240	@ 0xf0
 800113a:	443b      	add	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	f803 2c24 	strb.w	r2, [r3, #-36]
						CDC_Transmit_FS((uint8_t*)numstr, len+2);
 8001142:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8001146:	b29b      	uxth	r3, r3
 8001148:	3302      	adds	r3, #2
 800114a:	b29a      	uxth	r2, r3
 800114c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f00a f93c 	bl	800b3d0 <CDC_Transmit_FS>
						msDelay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f000 fe1b 	bl	8001d94 <msDelay>

						itoa(stepper_pos.current_pos_y, numstr, 10);
 800115e:	4b48      	ldr	r3, [pc, #288]	@ (8001280 <main+0x610>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001168:	220a      	movs	r2, #10
 800116a:	4619      	mov	r1, r3
 800116c:	f00a fd6e 	bl	800bc4c <itoa>
						len=strlen(numstr);
 8001170:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001174:	4618      	mov	r0, r3
 8001176:	f7fe ffe9 	bl	800014c <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						numstr[len+1] = ';';
 8001180:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8001184:	3301      	adds	r3, #1
 8001186:	33f0      	adds	r3, #240	@ 0xf0
 8001188:	443b      	add	r3, r7
 800118a:	223b      	movs	r2, #59	@ 0x3b
 800118c:	f803 2c24 	strb.w	r2, [r3, #-36]
						numstr[len+2] = 0;
 8001190:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8001194:	3302      	adds	r3, #2
 8001196:	33f0      	adds	r3, #240	@ 0xf0
 8001198:	443b      	add	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	f803 2c24 	strb.w	r2, [r3, #-36]
						CDC_Transmit_FS((uint8_t*)numstr, len+2);
 80011a0:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	3302      	adds	r3, #2
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00a f90d 	bl	800b3d0 <CDC_Transmit_FS>
						msDelay(10);
 80011b6:	200a      	movs	r0, #10
 80011b8:	f000 fdec 	bl	8001d94 <msDelay>

						itoa(stepper_pos.current_pos_z, numstr, 10);
 80011bc:	4b30      	ldr	r3, [pc, #192]	@ (8001280 <main+0x610>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011c6:	220a      	movs	r2, #10
 80011c8:	4619      	mov	r1, r3
 80011ca:	f00a fd3f 	bl	800bc4c <itoa>
						len=strlen(numstr);
 80011ce:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7fe ffba 	bl	800014c <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						CDC_Transmit_FS((uint8_t*)numstr, len);
 80011de:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00a f8f0 	bl	800b3d0 <CDC_Transmit_FS>
						msDelay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f000 fdcf 	bl	8001d94 <msDelay>

					}
					break;
 80011f6:	e007      	b.n	8001208 <main+0x598>

		default: 	//
					break;
 80011f8:	bf00      	nop
 80011fa:	e006      	b.n	800120a <main+0x59a>
					break;
 80011fc:	bf00      	nop
 80011fe:	e004      	b.n	800120a <main+0x59a>
					break;
 8001200:	bf00      	nop
 8001202:	e002      	b.n	800120a <main+0x59a>
					break;
 8001204:	bf00      	nop
 8001206:	e000      	b.n	800120a <main+0x59a>
					break;
 8001208:	bf00      	nop
	}

	switch(rxbuffer[0])
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <main+0x60c>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b56      	cmp	r3, #86	@ 0x56
 8001210:	dc2e      	bgt.n	8001270 <main+0x600>
 8001212:	2b47      	cmp	r3, #71	@ 0x47
 8001214:	da16      	bge.n	8001244 <main+0x5d4>
 8001216:	e07a      	b.n	800130e <main+0x69e>
 8001218:	3b67      	subs	r3, #103	@ 0x67
 800121a:	2201      	movs	r2, #1
 800121c:	409a      	lsls	r2, r3
 800121e:	f248 2305 	movw	r3, #33285	@ 0x8205
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d12c      	bne.n	800128c <main+0x61c>
 8001232:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8001236:	2b00      	cmp	r3, #0
 8001238:	bf14      	ite	ne
 800123a:	2301      	movne	r3, #1
 800123c:	2300      	moveq	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
					ext_brd_transmit_string(PrintCNCcmd_cmd, rxbuffer, rxbufend+1);
					rxbuffer[rxbufend]=CMD_DONE_CHAR;//visszaállítás*/
					break;
		case 't':
		case 'T':
					break;
 8001242:	e064      	b.n	800130e <main+0x69e>
	switch(rxbuffer[0])
 8001244:	3b47      	subs	r3, #71	@ 0x47
 8001246:	2201      	movs	r2, #1
 8001248:	409a      	lsls	r2, r3
 800124a:	f248 2305 	movw	r3, #33285	@ 0x8205
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf14      	ite	ne
 8001254:	2301      	movne	r3, #1
 8001256:	2300      	moveq	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d116      	bne.n	800128c <main+0x61c>
 800125e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf14      	ite	ne
 8001266:	2301      	movne	r3, #1
 8001268:	2300      	moveq	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
					break;
 800126e:	e04e      	b.n	800130e <main+0x69e>
	switch(rxbuffer[0])
 8001270:	2b76      	cmp	r3, #118	@ 0x76
 8001272:	dc4c      	bgt.n	800130e <main+0x69e>
 8001274:	2b67      	cmp	r3, #103	@ 0x67
 8001276:	dacf      	bge.n	8001218 <main+0x5a8>
 8001278:	e049      	b.n	800130e <main+0x69e>
 800127a:	bf00      	nop
 800127c:	20000254 	.word	0x20000254
 8001280:	200002bc 	.word	0x200002bc
 8001284:	200002b8 	.word	0x200002b8
 8001288:	20000256 	.word	0x20000256
					char sendbuff[RXBUFFSIZE] = {0};
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	2260      	movs	r2, #96	@ 0x60
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f00a ff10 	bl	800c0be <memset>
					char lineNumStr[RXBUFFSIZE] = {0};
 800129e:	2300      	movs	r3, #0
 80012a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80012a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012a6:	2260      	movs	r2, #96	@ 0x60
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f00a ff07 	bl	800c0be <memset>
					memcpy(sendbuff, rxbuffer, rxbufend);
 80012b0:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <main+0x6c4>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	491f      	ldr	r1, [pc, #124]	@ (8001338 <main+0x6c8>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f00a ffaf 	bl	800c21e <memcpy>
					sprintf(lineNumStr, "_L%llu", num_of_cmd_line);
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <main+0x6cc>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80012ca:	491d      	ldr	r1, [pc, #116]	@ (8001340 <main+0x6d0>)
 80012cc:	f00a fe94 	bl	800bff8 <siprintf>
					strlcat(sendbuff, lineNumStr, RXBUFFSIZE);
 80012d0:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2264      	movs	r2, #100	@ 0x64
 80012d8:	4618      	mov	r0, r3
 80012da:	f00a fef8 	bl	800c0ce <strlcat>
					sendbuff[RXBUFFSIZE-1]=0;//a lezáró elemet lecseréljük lezáró nullára hogy a string biztos standard legyen attól függetlenül hogy az strlcat ezt elvileg megcsinálja
 80012de:	2300      	movs	r3, #0
 80012e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					ext_brd_transmit_string(PrintCNCcmdAndLineNum_cmd, (uint8_t*)sendbuff, strlen(sendbuff));
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ff30 	bl	800014c <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	2004      	movs	r0, #4
 80012f6:	f000 faeb 	bl	80018d0 <ext_brd_transmit_string>
					num_of_cmd_line++;
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <main+0x6cc>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	1c54      	adds	r4, r2, #1
 8001302:	f143 0500 	adc.w	r5, r3, #0
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <main+0x6cc>)
 8001308:	e9c3 4500 	strd	r4, r5, [r3]
					break;
 800130c:	bf00      	nop
	}

	ResetCDCrxBuffer();
 800130e:	f000 fb67 	bl	80019e0 <ResetCDCrxBuffer>
	rxflagbyte = 0;
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <main+0x6d4>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
	if(CDCsend(cmddone, 1, 255) != USBD_OK)
 8001318:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800131c:	22ff      	movs	r2, #255	@ 0xff
 800131e:	2101      	movs	r1, #1
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fb37 	bl	8001994 <CDCsend>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	f43f acf5 	beq.w	8000d18 <main+0xa8>
	{
		Error_Handler();
 800132e:	f000 fd71 	bl	8001e14 <Error_Handler>
	while(rxflagbyte == 0)
 8001332:	e4f1      	b.n	8000d18 <main+0xa8>
 8001334:	200002b8 	.word	0x200002b8
 8001338:	20000254 	.word	0x20000254
 800133c:	20000000 	.word	0x20000000
 8001340:	0800cfdc 	.word	0x0800cfdc
 8001344:	200002b9 	.word	0x200002b9

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b094      	sub	sp, #80	@ 0x50
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001352:	2228      	movs	r2, #40	@ 0x28
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f00a feb1 	bl	800c0be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001378:	2301      	movs	r3, #1
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001386:	2301      	movs	r3, #1
 8001388:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138a:	2302      	movs	r3, #2
 800138c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001392:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001394:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001398:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 fa22 	bl	80057e8 <HAL_RCC_OscConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013aa:	f000 fd33 	bl	8001e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ae:	230f      	movs	r3, #15
 80013b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2102      	movs	r1, #2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 fc8e 	bl	8005cec <HAL_RCC_ClockConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013d6:	f000 fd1d 	bl	8001e14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013da:	2310      	movs	r3, #16
 80013dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 fddd 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80013f0:	f000 fd10 	bl	8001e14 <Error_Handler>
  }
}
 80013f4:	bf00      	nop
 80013f6:	3750      	adds	r7, #80	@ 0x50
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001400:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <MX_SPI2_Init+0x64>)
 8001402:	4a18      	ldr	r2, [pc, #96]	@ (8001464 <MX_SPI2_Init+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001406:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <MX_SPI2_Init+0x64>)
 8001408:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800140c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_SPI2_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <MX_SPI2_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800141a:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_SPI2_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <MX_SPI2_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <MX_SPI2_Init+0x64>)
 8001428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800142c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <MX_SPI2_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <MX_SPI2_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <MX_SPI2_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001440:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <MX_SPI2_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <MX_SPI2_Init+0x64>)
 8001448:	220a      	movs	r2, #10
 800144a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800144c:	4804      	ldr	r0, [pc, #16]	@ (8001460 <MX_SPI2_Init+0x64>)
 800144e:	f004 fe5f 	bl	8006110 <HAL_SPI_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001458:	f000 fcdc 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200001fc 	.word	0x200001fc
 8001464:	40003800 	.word	0x40003800

08001468 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b092      	sub	sp, #72	@ 0x48
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800146e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	2220      	movs	r2, #32
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f00a fe19 	bl	800c0be <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	463b      	mov	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fbb8 	bl	8000c10 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80014a0:	f7ff f930 	bl	8000704 <__NVIC_GetPriorityGrouping>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2200      	movs	r2, #0
 80014a8:	2101      	movs	r1, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f97e 	bl	80007ac <NVIC_EncodePriority>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4619      	mov	r1, r3
 80014b4:	201c      	movs	r0, #28
 80014b6:	f7ff f94f 	bl	8000758 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80014ba:	201c      	movs	r0, #28
 80014bc:	f7ff f930 	bl	8000720 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 22;
 80014c0:	2316      	movs	r3, #22
 80014c2:	86bb      	strh	r3, [r7, #52]	@ 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_InitStruct.Autoreload = 65454;
 80014c8:	f64f 73ae 	movw	r3, #65454	@ 0xffae
 80014cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80014d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80014dc:	f005 fc86 	bl	8006dec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80014e0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80014e4:	f7ff f9cb 	bl	800087e <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80014e8:	2110      	movs	r1, #16
 80014ea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80014ee:	f7ff fa43 	bl	8000978 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80014f2:	2360      	movs	r3, #96	@ 0x60
 80014f4:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 6545;
 80014fe:	f641 1391 	movw	r3, #6545	@ 0x1991
 8001502:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	461a      	mov	r2, r3
 800150e:	2110      	movs	r1, #16
 8001510:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001514:	f005 fcc8 	bl	8006ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001518:	2110      	movs	r1, #16
 800151a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800151e:	f7ff f9e7 	bl	80008f0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001522:	2100      	movs	r1, #0
 8001524:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001528:	f7ff fa8b 	bl	8000a42 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800152c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001530:	f7ff fa99 	bl	8000a66 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001534:	2004      	movs	r0, #4
 8001536:	f7ff fb83 	bl	8000c40 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA1   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800153a:	f240 2302 	movw	r3, #514	@ 0x202
 800153e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001540:	2309      	movs	r3, #9
 8001542:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001544:	2302      	movs	r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 800154c:	463b      	mov	r3, r7
 800154e:	4619      	mov	r1, r3
 8001550:	4803      	ldr	r0, [pc, #12]	@ (8001560 <MX_TIM2_Init+0xf8>)
 8001552:	f005 fb7a 	bl	8006c4a <LL_GPIO_Init>

}
 8001556:	bf00      	nop
 8001558:	3748      	adds	r7, #72	@ 0x48
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40010800 	.word	0x40010800

08001564 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	@ 0x38
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800156a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2220      	movs	r2, #32
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f00a fd9c 	bl	800c0be <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001586:	2004      	movs	r0, #4
 8001588:	f7ff fb42 	bl	8000c10 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800158c:	f7ff f8ba 	bl	8000704 <__NVIC_GetPriorityGrouping>
 8001590:	4603      	mov	r3, r0
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff f908 	bl	80007ac <NVIC_EncodePriority>
 800159c:	4603      	mov	r3, r0
 800159e:	4619      	mov	r1, r3
 80015a0:	201e      	movs	r0, #30
 80015a2:	f7ff f8d9 	bl	8000758 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 80015a6:	201e      	movs	r0, #30
 80015a8:	f7ff f8ba 	bl	8000720 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 72;
 80015ac:	2348      	movs	r3, #72	@ 0x48
 80015ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 65535;
 80015b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	4816      	ldr	r0, [pc, #88]	@ (8001620 <MX_TIM4_Init+0xbc>)
 80015c6:	f005 fc11 	bl	8006dec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80015ca:	4815      	ldr	r0, [pc, #84]	@ (8001620 <MX_TIM4_Init+0xbc>)
 80015cc:	f7ff f957 	bl	800087e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80015d0:	2100      	movs	r1, #0
 80015d2:	4813      	ldr	r0, [pc, #76]	@ (8001620 <MX_TIM4_Init+0xbc>)
 80015d4:	f7ff fa21 	bl	8000a1a <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	461a      	mov	r2, r3
 80015f0:	2101      	movs	r1, #1
 80015f2:	480b      	ldr	r0, [pc, #44]	@ (8001620 <MX_TIM4_Init+0xbc>)
 80015f4:	f005 fc58 	bl	8006ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 80015f8:	2101      	movs	r1, #1
 80015fa:	4809      	ldr	r0, [pc, #36]	@ (8001620 <MX_TIM4_Init+0xbc>)
 80015fc:	f7ff f978 	bl	80008f0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOnePulseMode(TIM4, LL_TIM_ONEPULSEMODE_SINGLE);
 8001600:	2108      	movs	r1, #8
 8001602:	4807      	ldr	r0, [pc, #28]	@ (8001620 <MX_TIM4_Init+0xbc>)
 8001604:	f7ff f929 	bl	800085a <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001608:	2100      	movs	r1, #0
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_TIM4_Init+0xbc>)
 800160c:	f7ff fa19 	bl	8000a42 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001610:	4803      	ldr	r0, [pc, #12]	@ (8001620 <MX_TIM4_Init+0xbc>)
 8001612:	f7ff fa28 	bl	8000a66 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3738      	adds	r7, #56	@ 0x38
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40000800 	.word	0x40000800

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001642:	2010      	movs	r0, #16
 8001644:	f7ff fafc 	bl	8000c40 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001648:	2020      	movs	r0, #32
 800164a:	f7ff faf9 	bl	8000c40 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800164e:	2004      	movs	r0, #4
 8001650:	f7ff faf6 	bl	8000c40 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001654:	2008      	movs	r0, #8
 8001656:	f7ff faf3 	bl	8000c40 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, MODE1_1_Pin|MODE2_1_Pin|USB_REENUM_Pin);
 800165a:	498d      	ldr	r1, [pc, #564]	@ (8001890 <MX_GPIO_Init+0x26c>)
 800165c:	488d      	ldr	r0, [pc, #564]	@ (8001894 <MX_GPIO_Init+0x270>)
 800165e:	f7ff fa99 	bl	8000b94 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, STCK_1_Pin|STCK_3_Pin|STCK_4_Pin|DIR_1_Pin
 8001662:	498d      	ldr	r1, [pc, #564]	@ (8001898 <MX_GPIO_Init+0x274>)
 8001664:	488d      	ldr	r0, [pc, #564]	@ (800189c <MX_GPIO_Init+0x278>)
 8001666:	f7ff fa95 	bl	8000b94 <LL_GPIO_ResetOutputPin>
                          |DIR_3_Pin|DIR_4_Pin|MODE1_4_Pin|MODE2_4_Pin
                          |EN_FAULT_4_Pin|MODE2_3_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, EN_FAULT_1_Pin|MODE1_3_Pin|EN_FAULT_3_Pin|SPI2_CS_Pin
 800166a:	498d      	ldr	r1, [pc, #564]	@ (80018a0 <MX_GPIO_Init+0x27c>)
 800166c:	488d      	ldr	r0, [pc, #564]	@ (80018a4 <MX_GPIO_Init+0x280>)
 800166e:	f7ff fa91 	bl	8000b94 <LL_GPIO_ResetOutputPin>
                          |STBY_RESET_ALL_Pin);

  /**/
  GPIO_InitStruct.Pin = MODE1_1_Pin|MODE2_1_Pin|USB_REENUM_Pin;
 8001672:	4b87      	ldr	r3, [pc, #540]	@ (8001890 <MX_GPIO_Init+0x26c>)
 8001674:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001676:	2301      	movs	r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800167a:	2302      	movs	r3, #2
 800167c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4619      	mov	r1, r3
 8001686:	4883      	ldr	r0, [pc, #524]	@ (8001894 <MX_GPIO_Init+0x270>)
 8001688:	f005 fadf 	bl	8006c4a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = STCK_1_Pin|STCK_3_Pin|STCK_4_Pin|DIR_1_Pin
 800168c:	4b82      	ldr	r3, [pc, #520]	@ (8001898 <MX_GPIO_Init+0x274>)
 800168e:	607b      	str	r3, [r7, #4]
                          |DIR_3_Pin|DIR_4_Pin|MODE1_4_Pin|MODE2_4_Pin
                          |EN_FAULT_4_Pin|MODE2_3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001690:	2301      	movs	r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001694:	2302      	movs	r3, #2
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	487e      	ldr	r0, [pc, #504]	@ (800189c <MX_GPIO_Init+0x278>)
 80016a2:	f005 fad2 	bl	8006c4a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EN_FAULT_1_Pin|MODE1_3_Pin|EN_FAULT_3_Pin|SPI2_CS_Pin
 80016a6:	4b7e      	ldr	r3, [pc, #504]	@ (80018a0 <MX_GPIO_Init+0x27c>)
 80016a8:	607b      	str	r3, [r7, #4]
                          |STBY_RESET_ALL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016aa:	2301      	movs	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016ae:	2302      	movs	r3, #2
 80016b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	487a      	ldr	r0, [pc, #488]	@ (80018a4 <MX_GPIO_Init+0x280>)
 80016bc:	f005 fac5 	bl	8006c4a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EXTENSION_BRD_BSY_Pin;
 80016c0:	f244 0340 	movw	r3, #16448	@ 0x4040
 80016c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80016c6:	2304      	movs	r3, #4
 80016c8:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(EXTENSION_BRD_BSY_GPIO_Port, &GPIO_InitStruct);
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	4875      	ldr	r0, [pc, #468]	@ (80018a4 <MX_GPIO_Init+0x280>)
 80016d0:	f005 fabb 	bl	8006c4a <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE10);
 80016d4:	4974      	ldr	r1, [pc, #464]	@ (80018a8 <MX_GPIO_Init+0x284>)
 80016d6:	2001      	movs	r0, #1
 80016d8:	f7ff fa6c 	bl	8000bb4 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE11);
 80016dc:	4973      	ldr	r1, [pc, #460]	@ (80018ac <MX_GPIO_Init+0x288>)
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fa68 	bl	8000bb4 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE4);
 80016e4:	4972      	ldr	r1, [pc, #456]	@ (80018b0 <MX_GPIO_Init+0x28c>)
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7ff fa64 	bl	8000bb4 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE5);
 80016ec:	4971      	ldr	r1, [pc, #452]	@ (80018b4 <MX_GPIO_Init+0x290>)
 80016ee:	2001      	movs	r0, #1
 80016f0:	f7ff fa60 	bl	8000bb4 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE8);
 80016f4:	4970      	ldr	r1, [pc, #448]	@ (80018b8 <MX_GPIO_Init+0x294>)
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff fa5c 	bl	8000bb4 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE9);
 80016fc:	496f      	ldr	r1, [pc, #444]	@ (80018bc <MX_GPIO_Init+0x298>)
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fa58 	bl	8000bb4 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8001704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001708:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800170a:	2301      	movs	r3, #1
 800170c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800170e:	2300      	movs	r3, #0
 8001710:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001712:	2303      	movs	r3, #3
 8001714:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001716:	f107 0318 	add.w	r3, r7, #24
 800171a:	4618      	mov	r0, r3
 800171c:	f005 f95e 	bl	80069dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 8001720:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001724:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001726:	2301      	movs	r3, #1
 8001728:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800172a:	2300      	movs	r3, #0
 800172c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800172e:	2303      	movs	r3, #3
 8001730:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001732:	f107 0318 	add.w	r3, r7, #24
 8001736:	4618      	mov	r0, r3
 8001738:	f005 f950 	bl	80069dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 800173c:	2310      	movs	r3, #16
 800173e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001740:	2301      	movs	r3, #1
 8001742:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001744:	2300      	movs	r3, #0
 8001746:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001748:	2303      	movs	r3, #3
 800174a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4618      	mov	r0, r3
 8001752:	f005 f943 	bl	80069dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8001756:	2320      	movs	r3, #32
 8001758:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800175a:	2301      	movs	r3, #1
 800175c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800175e:	2300      	movs	r3, #0
 8001760:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001762:	2301      	movs	r3, #1
 8001764:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001766:	f107 0318 	add.w	r3, r7, #24
 800176a:	4618      	mov	r0, r3
 800176c:	f005 f936 	bl	80069dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8001770:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001774:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001776:	2301      	movs	r3, #1
 8001778:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800177a:	2300      	movs	r3, #0
 800177c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800177e:	2303      	movs	r3, #3
 8001780:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001782:	f107 0318 	add.w	r3, r7, #24
 8001786:	4618      	mov	r0, r3
 8001788:	f005 f928 	bl	80069dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 800178c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001790:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001792:	2301      	movs	r3, #1
 8001794:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001796:	2300      	movs	r3, #0
 8001798:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800179a:	2303      	movs	r3, #3
 800179c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800179e:	f107 0318 	add.w	r3, r7, #24
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 f91a 	bl	80069dc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(SW1_4_GPIO_Port, SW1_4_Pin, LL_GPIO_PULL_UP);
 80017a8:	2201      	movs	r2, #1
 80017aa:	4945      	ldr	r1, [pc, #276]	@ (80018c0 <MX_GPIO_Init+0x29c>)
 80017ac:	483d      	ldr	r0, [pc, #244]	@ (80018a4 <MX_GPIO_Init+0x280>)
 80017ae:	f7ff f9aa 	bl	8000b06 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SW2_4_GPIO_Port, SW2_4_Pin, LL_GPIO_PULL_UP);
 80017b2:	2201      	movs	r2, #1
 80017b4:	4943      	ldr	r1, [pc, #268]	@ (80018c4 <MX_GPIO_Init+0x2a0>)
 80017b6:	483b      	ldr	r0, [pc, #236]	@ (80018a4 <MX_GPIO_Init+0x280>)
 80017b8:	f7ff f9a5 	bl	8000b06 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SW1_1_GPIO_Port, SW1_1_Pin, LL_GPIO_PULL_UP);
 80017bc:	2201      	movs	r2, #1
 80017be:	f241 0110 	movw	r1, #4112	@ 0x1010
 80017c2:	4838      	ldr	r0, [pc, #224]	@ (80018a4 <MX_GPIO_Init+0x280>)
 80017c4:	f7ff f99f 	bl	8000b06 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SW2_1_GPIO_Port, SW2_1_Pin, LL_GPIO_PULL_UP);
 80017c8:	2201      	movs	r2, #1
 80017ca:	f242 0120 	movw	r1, #8224	@ 0x2020
 80017ce:	4835      	ldr	r0, [pc, #212]	@ (80018a4 <MX_GPIO_Init+0x280>)
 80017d0:	f7ff f999 	bl	8000b06 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SW1_3_GPIO_Port, SW1_3_Pin, LL_GPIO_PULL_UP);
 80017d4:	2201      	movs	r2, #1
 80017d6:	493c      	ldr	r1, [pc, #240]	@ (80018c8 <MX_GPIO_Init+0x2a4>)
 80017d8:	4832      	ldr	r0, [pc, #200]	@ (80018a4 <MX_GPIO_Init+0x280>)
 80017da:	f7ff f994 	bl	8000b06 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SW2_3_GPIO_Port, SW2_3_Pin, LL_GPIO_PULL_UP);
 80017de:	2201      	movs	r2, #1
 80017e0:	493a      	ldr	r1, [pc, #232]	@ (80018cc <MX_GPIO_Init+0x2a8>)
 80017e2:	4830      	ldr	r0, [pc, #192]	@ (80018a4 <MX_GPIO_Init+0x280>)
 80017e4:	f7ff f98f 	bl	8000b06 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(SW1_4_GPIO_Port, SW1_4_Pin, LL_GPIO_MODE_INPUT);
 80017e8:	2208      	movs	r2, #8
 80017ea:	4935      	ldr	r1, [pc, #212]	@ (80018c0 <MX_GPIO_Init+0x29c>)
 80017ec:	482d      	ldr	r0, [pc, #180]	@ (80018a4 <MX_GPIO_Init+0x280>)
 80017ee:	f7ff f958 	bl	8000aa2 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SW2_4_GPIO_Port, SW2_4_Pin, LL_GPIO_MODE_INPUT);
 80017f2:	2208      	movs	r2, #8
 80017f4:	4933      	ldr	r1, [pc, #204]	@ (80018c4 <MX_GPIO_Init+0x2a0>)
 80017f6:	482b      	ldr	r0, [pc, #172]	@ (80018a4 <MX_GPIO_Init+0x280>)
 80017f8:	f7ff f953 	bl	8000aa2 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SW1_1_GPIO_Port, SW1_1_Pin, LL_GPIO_MODE_INPUT);
 80017fc:	2208      	movs	r2, #8
 80017fe:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001802:	4828      	ldr	r0, [pc, #160]	@ (80018a4 <MX_GPIO_Init+0x280>)
 8001804:	f7ff f94d 	bl	8000aa2 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SW2_1_GPIO_Port, SW2_1_Pin, LL_GPIO_MODE_INPUT);
 8001808:	2208      	movs	r2, #8
 800180a:	f242 0120 	movw	r1, #8224	@ 0x2020
 800180e:	4825      	ldr	r0, [pc, #148]	@ (80018a4 <MX_GPIO_Init+0x280>)
 8001810:	f7ff f947 	bl	8000aa2 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SW1_3_GPIO_Port, SW1_3_Pin, LL_GPIO_MODE_INPUT);
 8001814:	2208      	movs	r2, #8
 8001816:	492c      	ldr	r1, [pc, #176]	@ (80018c8 <MX_GPIO_Init+0x2a4>)
 8001818:	4822      	ldr	r0, [pc, #136]	@ (80018a4 <MX_GPIO_Init+0x280>)
 800181a:	f7ff f942 	bl	8000aa2 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SW2_3_GPIO_Port, SW2_3_Pin, LL_GPIO_MODE_INPUT);
 800181e:	2208      	movs	r2, #8
 8001820:	492a      	ldr	r1, [pc, #168]	@ (80018cc <MX_GPIO_Init+0x2a8>)
 8001822:	4820      	ldr	r0, [pc, #128]	@ (80018a4 <MX_GPIO_Init+0x280>)
 8001824:	f7ff f93d 	bl	8000aa2 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001828:	f7fe ff6c 	bl	8000704 <__NVIC_GetPriorityGrouping>
 800182c:	4603      	mov	r3, r0
 800182e:	2200      	movs	r2, #0
 8001830:	2101      	movs	r1, #1
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe ffba 	bl	80007ac <NVIC_EncodePriority>
 8001838:	4603      	mov	r3, r0
 800183a:	4619      	mov	r1, r3
 800183c:	200a      	movs	r0, #10
 800183e:	f7fe ff8b 	bl	8000758 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8001842:	200a      	movs	r0, #10
 8001844:	f7fe ff6c 	bl	8000720 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001848:	f7fe ff5c 	bl	8000704 <__NVIC_GetPriorityGrouping>
 800184c:	4603      	mov	r3, r0
 800184e:	2200      	movs	r2, #0
 8001850:	2101      	movs	r1, #1
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe ffaa 	bl	80007ac <NVIC_EncodePriority>
 8001858:	4603      	mov	r3, r0
 800185a:	4619      	mov	r1, r3
 800185c:	2017      	movs	r0, #23
 800185e:	f7fe ff7b 	bl	8000758 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001862:	2017      	movs	r0, #23
 8001864:	f7fe ff5c 	bl	8000720 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001868:	f7fe ff4c 	bl	8000704 <__NVIC_GetPriorityGrouping>
 800186c:	4603      	mov	r3, r0
 800186e:	2200      	movs	r2, #0
 8001870:	2101      	movs	r1, #1
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe ff9a 	bl	80007ac <NVIC_EncodePriority>
 8001878:	4603      	mov	r3, r0
 800187a:	4619      	mov	r1, r3
 800187c:	2028      	movs	r0, #40	@ 0x28
 800187e:	f7fe ff6b 	bl	8000758 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001882:	2028      	movs	r0, #40	@ 0x28
 8001884:	f7fe ff4c 	bl	8000720 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001888:	bf00      	nop
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	04e000e0 	.word	0x04e000e0
 8001894:	40011000 	.word	0x40011000
 8001898:	0487dddf 	.word	0x0487dddf
 800189c:	40010800 	.word	0x40010800
 80018a0:	04100f1f 	.word	0x04100f1f
 80018a4:	40010c00 	.word	0x40010c00
 80018a8:	0f000002 	.word	0x0f000002
 80018ac:	f0000002 	.word	0xf0000002
 80018b0:	000f0001 	.word	0x000f0001
 80018b4:	00f00001 	.word	0x00f00001
 80018b8:	000f0002 	.word	0x000f0002
 80018bc:	00f00002 	.word	0x00f00002
 80018c0:	04040004 	.word	0x04040004
 80018c4:	04080008 	.word	0x04080008
 80018c8:	04010001 	.word	0x04010001
 80018cc:	04020002 	.word	0x04020002

080018d0 <ext_brd_transmit_string>:

/* USER CODE BEGIN 4 */

void ext_brd_transmit_string(uint8_t printCmd, uint8_t* strbuff, uint8_t len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	4613      	mov	r3, r2
 80018de:	71bb      	strb	r3, [r7, #6]
	if((LL_GPIO_IsInputPinSet(EXTENSION_BRD_BSY_GPIO_Port, EXTENSION_BRD_BSY_Pin) == 0) || (printCmd == PrintFilenameTXT_cmd))//only if extension board is not busy, not to slow down cnc movements
 80018e0:	f244 0140 	movw	r1, #16448	@ 0x4040
 80018e4:	4828      	ldr	r0, [pc, #160]	@ (8001988 <ext_brd_transmit_string+0xb8>)
 80018e6:	f7ff f930 	bl	8000b4a <LL_GPIO_IsInputPinSet>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <ext_brd_transmit_string+0x26>
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d143      	bne.n	800197e <ext_brd_transmit_string+0xae>
	{
		uint8_t* txframe = calloc(len+2,1);//+2 is for the command byte which is byte0, and len byte which is byte1
 80018f6:	79bb      	ldrb	r3, [r7, #6]
 80018f8:	3302      	adds	r3, #2
 80018fa:	2101      	movs	r1, #1
 80018fc:	4618      	mov	r0, r3
 80018fe:	f00a f971 	bl	800bbe4 <calloc>
 8001902:	4603      	mov	r3, r0
 8001904:	60fb      	str	r3, [r7, #12]
		uint8_t* dummyrx = calloc(len+2,1);
 8001906:	79bb      	ldrb	r3, [r7, #6]
 8001908:	3302      	adds	r3, #2
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f00a f969 	bl	800bbe4 <calloc>
 8001912:	4603      	mov	r3, r0
 8001914:	60bb      	str	r3, [r7, #8]
		txframe[0] = printCmd;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	79fa      	ldrb	r2, [r7, #7]
 800191a:	701a      	strb	r2, [r3, #0]
		txframe[1] = len+2;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	79ba      	ldrb	r2, [r7, #6]
 8001922:	3202      	adds	r2, #2
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]
		memcpy(&txframe[2], strbuff, len);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3302      	adds	r3, #2
 800192c:	79ba      	ldrb	r2, [r7, #6]
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f00a fc74 	bl	800c21e <memcpy>

		LL_GPIO_SetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);
 8001936:	4915      	ldr	r1, [pc, #84]	@ (800198c <ext_brd_transmit_string+0xbc>)
 8001938:	4813      	ldr	r0, [pc, #76]	@ (8001988 <ext_brd_transmit_string+0xb8>)
 800193a:	f7ff f91c 	bl	8000b76 <LL_GPIO_SetOutputPin>
		while(LL_GPIO_IsInputPinSet(EXTENSION_BRD_BSY_GPIO_Port, EXTENSION_BRD_BSY_Pin) == 0)	{ __NOP();}
 800193e:	e000      	b.n	8001942 <ext_brd_transmit_string+0x72>
 8001940:	bf00      	nop
 8001942:	f244 0140 	movw	r1, #16448	@ 0x4040
 8001946:	4810      	ldr	r0, [pc, #64]	@ (8001988 <ext_brd_transmit_string+0xb8>)
 8001948:	f7ff f8ff 	bl	8000b4a <LL_GPIO_IsInputPinSet>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f6      	beq.n	8001940 <ext_brd_transmit_string+0x70>
		HAL_SPI_TransmitReceive(&hspi2, txframe, dummyrx, len+2, 1000);
 8001952:	79bb      	ldrb	r3, [r7, #6]
 8001954:	b29b      	uxth	r3, r3
 8001956:	3302      	adds	r3, #2
 8001958:	b29b      	uxth	r3, r3
 800195a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800195e:	9200      	str	r2, [sp, #0]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	68f9      	ldr	r1, [r7, #12]
 8001964:	480a      	ldr	r0, [pc, #40]	@ (8001990 <ext_brd_transmit_string+0xc0>)
 8001966:	f004 fc57 	bl	8006218 <HAL_SPI_TransmitReceive>
		LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);
 800196a:	4908      	ldr	r1, [pc, #32]	@ (800198c <ext_brd_transmit_string+0xbc>)
 800196c:	4806      	ldr	r0, [pc, #24]	@ (8001988 <ext_brd_transmit_string+0xb8>)
 800196e:	f7ff f911 	bl	8000b94 <LL_GPIO_ResetOutputPin>

		free(txframe);
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f00a f96c 	bl	800bc50 <free>
		free(dummyrx);
 8001978:	68b8      	ldr	r0, [r7, #8]
 800197a:	f00a f969 	bl	800bc50 <free>
	}
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40010c00 	.word	0x40010c00
 800198c:	04100010 	.word	0x04100010
 8001990:	200001fc 	.word	0x200001fc

08001994 <CDCsend>:

uint8_t CDCsend(uint8_t *str, uint32_t len, uint8_t retries)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	4613      	mov	r3, r2
 80019a0:	71fb      	strb	r3, [r7, #7]
	uint8_t retval = USBD_BUSY;
 80019a2:	2301      	movs	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
	while(retries>0)
 80019a6:	e010      	b.n	80019ca <CDCsend+0x36>
	{
		retval = CDC_Transmit_FS(str, len);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4619      	mov	r1, r3
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f009 fd0e 	bl	800b3d0 <CDC_Transmit_FS>
 80019b4:	4603      	mov	r3, r0
 80019b6:	75fb      	strb	r3, [r7, #23]
		if(retval==USBD_OK)
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <CDCsend+0x3e>
		{
			break;
		}
		else
		{
			msDelay(10);
 80019be:	200a      	movs	r0, #10
 80019c0:	f000 f9e8 	bl	8001d94 <msDelay>
			retries--;
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	71fb      	strb	r3, [r7, #7]
	while(retries>0)
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1eb      	bne.n	80019a8 <CDCsend+0x14>
 80019d0:	e000      	b.n	80019d4 <CDCsend+0x40>
			break;
 80019d2:	bf00      	nop
		}

	}
	return retval;
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <ResetCDCrxBuffer>:

void ResetCDCrxBuffer(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
	for(uint32_t bufindx = 0; bufindx<RXBUFFSIZE; bufindx++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	e007      	b.n	80019fc <ResetCDCrxBuffer+0x1c>
	{
		rxbuffer[bufindx] = 0;
 80019ec:	4a09      	ldr	r2, [pc, #36]	@ (8001a14 <ResetCDCrxBuffer+0x34>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
	for(uint32_t bufindx = 0; bufindx<RXBUFFSIZE; bufindx++)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3301      	adds	r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b63      	cmp	r3, #99	@ 0x63
 8001a00:	d9f4      	bls.n	80019ec <ResetCDCrxBuffer+0xc>
	}
	rxbufend = 0;
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <ResetCDCrxBuffer+0x38>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000254 	.word	0x20000254
 8001a18:	200002b8 	.word	0x200002b8

08001a1c <eval_and_execute_plot_cmd>:

void eval_and_execute_plot_cmd(uint8_t *cmdstr, uint32_t len, CP *currentpos)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b097      	sub	sp, #92	@ 0x5c
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
	//example: PD10669,9079,35;

	int32_t indx = 0, comma = 0, comma2 = 0, semicolon = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a30:	2300      	movs	r3, #0
 8001a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a34:	2300      	movs	r3, #0
 8001a36:	64bb      	str	r3, [r7, #72]	@ 0x48
	int32_t pownum = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t	numofdigits = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	643b      	str	r3, [r7, #64]	@ 0x40
	uint8_t tmpstr1[10] = {0};
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	809a      	strh	r2, [r3, #4]
	uint8_t tmpstr2[10] = {0};
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	f107 0320 	add.w	r3, r7, #32
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	809a      	strh	r2, [r3, #4]
	uint8_t tmpstr3[10] = {0};
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	809a      	strh	r2, [r3, #4]
	int32_t xval = 0, yval = 0, zval = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a6e:	2300      	movs	r3, #0
 8001a70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	@ 0x34

	//eval first argument of plot cmd//X /////////////////
	for(indx=2; indx<=len; indx++)//search for the end of the argument (comma) and copy the characters of the argument to a buffer while preparing them for processing
 8001a76:	2302      	movs	r3, #2
 8001a78:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a7a:	e028      	b.n	8001ace <eval_and_execute_plot_cmd+0xb2>
	{
		if(cmdstr[indx] == ',')
 8001a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a86:	d102      	bne.n	8001a8e <eval_and_execute_plot_cmd+0x72>
		{
			comma = indx;
 8001a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8a:	653b      	str	r3, [r7, #80]	@ 0x50
			break;
 8001a8c:	e023      	b.n	8001ad6 <eval_and_execute_plot_cmd+0xba>
		}
		else
		{
			if(cmdstr[indx] != '-')
 8001a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b2d      	cmp	r3, #45	@ 0x2d
 8001a98:	d00c      	beq.n	8001ab4 <eval_and_execute_plot_cmd+0x98>
			{
				tmpstr1[indx-2] = cmdstr[indx]-'0';
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa4:	3b02      	subs	r3, #2
 8001aa6:	3a30      	subs	r2, #48	@ 0x30
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	3358      	adds	r3, #88	@ 0x58
 8001aac:	443b      	add	r3, r7
 8001aae:	f803 2c30 	strb.w	r2, [r3, #-48]
 8001ab2:	e009      	b.n	8001ac8 <eval_and_execute_plot_cmd+0xac>
			}
			else
			{
				tmpstr1[indx-2] = cmdstr[indx];
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	441a      	add	r2, r3
 8001aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001abc:	3b02      	subs	r3, #2
 8001abe:	7812      	ldrb	r2, [r2, #0]
 8001ac0:	3358      	adds	r3, #88	@ 0x58
 8001ac2:	443b      	add	r3, r7
 8001ac4:	f803 2c30 	strb.w	r2, [r3, #-48]
	for(indx=2; indx<=len; indx++)//search for the end of the argument (comma) and copy the characters of the argument to a buffer while preparing them for processing
 8001ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aca:	3301      	adds	r3, #1
 8001acc:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d2d2      	bcs.n	8001a7c <eval_and_execute_plot_cmd+0x60>
			}
		}
	}
	pownum = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	647b      	str	r3, [r7, #68]	@ 0x44
	numofdigits = (comma-2);
 8001ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001adc:	3b02      	subs	r3, #2
 8001ade:	643b      	str	r3, [r7, #64]	@ 0x40
	indx = numofdigits-1;
 8001ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	657b      	str	r3, [r7, #84]	@ 0x54
	while(numofdigits > 0)
 8001ae6:	e025      	b.n	8001b34 <eval_and_execute_plot_cmd+0x118>
	{
		if( (numofdigits==1) && (tmpstr1[indx]=='-') )
 8001ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d10a      	bne.n	8001b04 <eval_and_execute_plot_cmd+0xe8>
 8001aee:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b2d      	cmp	r3, #45	@ 0x2d
 8001afa:	d103      	bne.n	8001b04 <eval_and_execute_plot_cmd+0xe8>
		{
			xval *= (-1);
 8001afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001afe:	425b      	negs	r3, r3
 8001b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b02:	e011      	b.n	8001b28 <eval_and_execute_plot_cmd+0x10c>
		}
		else
		{
			xval += tmpstr1[indx]*mypow10(pownum);
 8001b04:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461c      	mov	r4, r3
 8001b10:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b12:	f000 f917 	bl	8001d44 <mypow10>
 8001b16:	4603      	mov	r3, r0
 8001b18:	fb04 f303 	mul.w	r3, r4, r3
 8001b1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b1e:	4413      	add	r3, r2
 8001b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pownum++;
 8001b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b24:	3301      	adds	r3, #1
 8001b26:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		indx--;
 8001b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	657b      	str	r3, [r7, #84]	@ 0x54
		numofdigits--;
 8001b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b30:	3b01      	subs	r3, #1
 8001b32:	643b      	str	r3, [r7, #64]	@ 0x40
	while(numofdigits > 0)
 8001b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	dcd6      	bgt.n	8001ae8 <eval_and_execute_plot_cmd+0xcc>
	}

	//eval second argument of plot cmd//Y /////////////////
	for(indx=comma+1; indx<=len; indx++)
 8001b3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b40:	e02c      	b.n	8001b9c <eval_and_execute_plot_cmd+0x180>
	{
		if(cmdstr[indx] == ',')
 8001b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b4c:	d102      	bne.n	8001b54 <eval_and_execute_plot_cmd+0x138>
		{
			comma2 = indx;
 8001b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
			break;
 8001b52:	e027      	b.n	8001ba4 <eval_and_execute_plot_cmd+0x188>
		}
		else
		{
			if(cmdstr[indx] != '-')
 8001b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b2d      	cmp	r3, #45	@ 0x2d
 8001b5e:	d00e      	beq.n	8001b7e <eval_and_execute_plot_cmd+0x162>
			{
				tmpstr2[indx-(comma+1)] = cmdstr[indx]-'0';
 8001b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	4413      	add	r3, r2
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b6e:	1acb      	subs	r3, r1, r3
 8001b70:	3a30      	subs	r2, #48	@ 0x30
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	3358      	adds	r3, #88	@ 0x58
 8001b76:	443b      	add	r3, r7
 8001b78:	f803 2c3c 	strb.w	r2, [r3, #-60]
 8001b7c:	e00b      	b.n	8001b96 <eval_and_execute_plot_cmd+0x17a>
			}
			else
			{
				tmpstr2[indx-(comma+1)] = cmdstr[indx];
 8001b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	441a      	add	r2, r3
 8001b84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b86:	3301      	adds	r3, #1
 8001b88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b8a:	1acb      	subs	r3, r1, r3
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	3358      	adds	r3, #88	@ 0x58
 8001b90:	443b      	add	r3, r7
 8001b92:	f803 2c3c 	strb.w	r2, [r3, #-60]
	for(indx=comma+1; indx<=len; indx++)
 8001b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b98:	3301      	adds	r3, #1
 8001b9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d2ce      	bcs.n	8001b42 <eval_and_execute_plot_cmd+0x126>
			}
		}
	}
	numofdigits	= comma2-(comma+1);//azért +1 mert hozzá kell számolni a vesszőt is, azon is átment a ciklus
 8001ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	643b      	str	r3, [r7, #64]	@ 0x40
	indx = (numofdigits-1);
 8001bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	657b      	str	r3, [r7, #84]	@ 0x54
	pownum=0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	647b      	str	r3, [r7, #68]	@ 0x44
	while(numofdigits > 0)
 8001bb8:	e025      	b.n	8001c06 <eval_and_execute_plot_cmd+0x1ea>
	{
		if( (numofdigits==1) && (tmpstr2[indx]=='-') )
 8001bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d10a      	bne.n	8001bd6 <eval_and_execute_plot_cmd+0x1ba>
 8001bc0:	f107 021c 	add.w	r2, r7, #28
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b2d      	cmp	r3, #45	@ 0x2d
 8001bcc:	d103      	bne.n	8001bd6 <eval_and_execute_plot_cmd+0x1ba>
		{
			yval *= (-1);
 8001bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bd0:	425b      	negs	r3, r3
 8001bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bd4:	e011      	b.n	8001bfa <eval_and_execute_plot_cmd+0x1de>
		}
		else
		{
			yval += tmpstr2[indx]*mypow10(pownum);
 8001bd6:	f107 021c 	add.w	r2, r7, #28
 8001bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461c      	mov	r4, r3
 8001be2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001be4:	f000 f8ae 	bl	8001d44 <mypow10>
 8001be8:	4603      	mov	r3, r0
 8001bea:	fb04 f303 	mul.w	r3, r4, r3
 8001bee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bf0:	4413      	add	r3, r2
 8001bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
			pownum++;
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		indx--;
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	657b      	str	r3, [r7, #84]	@ 0x54
		numofdigits--;
 8001c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c02:	3b01      	subs	r3, #1
 8001c04:	643b      	str	r3, [r7, #64]	@ 0x40
	while(numofdigits > 0)
 8001c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	dcd6      	bgt.n	8001bba <eval_and_execute_plot_cmd+0x19e>
	}

	//eval third argument of plot cmd//Z /////////////////
	for(indx=comma2+1; indx<=len; indx++)
 8001c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c0e:	3301      	adds	r3, #1
 8001c10:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c12:	e02c      	b.n	8001c6e <eval_and_execute_plot_cmd+0x252>
	{
		if(cmdstr[indx] == ';')
 8001c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c1e:	d102      	bne.n	8001c26 <eval_and_execute_plot_cmd+0x20a>
		{
			semicolon = indx;
 8001c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c22:	64bb      	str	r3, [r7, #72]	@ 0x48
			break;
 8001c24:	e027      	b.n	8001c76 <eval_and_execute_plot_cmd+0x25a>
		}
		else
		{
			if(cmdstr[indx] != '-')
 8001c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c30:	d00e      	beq.n	8001c50 <eval_and_execute_plot_cmd+0x234>
			{
				tmpstr3[indx-(comma2+1)] = cmdstr[indx]-'0';
 8001c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c40:	1acb      	subs	r3, r1, r3
 8001c42:	3a30      	subs	r2, #48	@ 0x30
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	3358      	adds	r3, #88	@ 0x58
 8001c48:	443b      	add	r3, r7
 8001c4a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001c4e:	e00b      	b.n	8001c68 <eval_and_execute_plot_cmd+0x24c>
			}
			else
			{
				tmpstr3[indx-(comma2+1)] = cmdstr[indx];
 8001c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	441a      	add	r2, r3
 8001c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c58:	3301      	adds	r3, #1
 8001c5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c5c:	1acb      	subs	r3, r1, r3
 8001c5e:	7812      	ldrb	r2, [r2, #0]
 8001c60:	3358      	adds	r3, #88	@ 0x58
 8001c62:	443b      	add	r3, r7
 8001c64:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(indx=comma2+1; indx<=len; indx++)
 8001c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d2ce      	bcs.n	8001c14 <eval_and_execute_plot_cmd+0x1f8>
			}
		}
	}
	numofdigits	= semicolon-(comma2+1);//azért +1 mert hozzá kell számolni a pontosvesszőt is, azon is átment a ciklus
 8001c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c78:	3301      	adds	r3, #1
 8001c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	643b      	str	r3, [r7, #64]	@ 0x40
	indx = (numofdigits-1);
 8001c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c82:	3b01      	subs	r3, #1
 8001c84:	657b      	str	r3, [r7, #84]	@ 0x54
	pownum=0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	647b      	str	r3, [r7, #68]	@ 0x44
	while(numofdigits > 0)
 8001c8a:	e025      	b.n	8001cd8 <eval_and_execute_plot_cmd+0x2bc>
	{
		if( (numofdigits==1) && (tmpstr3[indx]=='-') )
 8001c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10a      	bne.n	8001ca8 <eval_and_execute_plot_cmd+0x28c>
 8001c92:	f107 0210 	add.w	r2, r7, #16
 8001c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c9e:	d103      	bne.n	8001ca8 <eval_and_execute_plot_cmd+0x28c>
		{
			zval *= (-1);
 8001ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca2:	425b      	negs	r3, r3
 8001ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ca6:	e011      	b.n	8001ccc <eval_and_execute_plot_cmd+0x2b0>
		}
		else
		{
			zval += tmpstr3[indx]*mypow10(pownum);
 8001ca8:	f107 0210 	add.w	r2, r7, #16
 8001cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461c      	mov	r4, r3
 8001cb4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cb6:	f000 f845 	bl	8001d44 <mypow10>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	fb04 f303 	mul.w	r3, r4, r3
 8001cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cc2:	4413      	add	r3, r2
 8001cc4:	637b      	str	r3, [r7, #52]	@ 0x34
			pownum++;
 8001cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cc8:	3301      	adds	r3, #1
 8001cca:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		indx--;
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	657b      	str	r3, [r7, #84]	@ 0x54
		numofdigits--;
 8001cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	643b      	str	r3, [r7, #64]	@ 0x40
	while(numofdigits > 0)
 8001cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	dcd6      	bgt.n	8001c8c <eval_and_execute_plot_cmd+0x270>
	}


	switch(stepper_pos.curr_state & (AbsoluteStep_MSK|RelativeStep_MSK))
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <eval_and_execute_plot_cmd+0x324>)
 8001ce0:	8a5b      	ldrh	r3, [r3, #18]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d008      	beq.n	8001cfc <eval_and_execute_plot_cmd+0x2e0>
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d124      	bne.n	8001d38 <eval_and_execute_plot_cmd+0x31c>
	{
		case RelativeStep_MSK:	HPGL_PR(xval, yval, zval, currentpos);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cf2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001cf4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001cf6:	f000 f93c 	bl	8001f72 <HPGL_PR>
								break;
 8001cfa:	e01d      	b.n	8001d38 <eval_and_execute_plot_cmd+0x31c>

		case AbsoluteStep_MSK:	//clip to axis limits
								if(xval>XaxisLen)	{ xval=XaxisLen;}
 8001cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cfe:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8001d02:	dd02      	ble.n	8001d0a <eval_and_execute_plot_cmd+0x2ee>
 8001d04:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
								if(yval>YaxisLen)	{ yval=YaxisLen;}
 8001d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d0c:	f243 7278 	movw	r2, #14200	@ 0x3778
 8001d10:	4293      	cmp	r3, r2
 8001d12:	dd02      	ble.n	8001d1a <eval_and_execute_plot_cmd+0x2fe>
 8001d14:	f243 7378 	movw	r3, #14200	@ 0x3778
 8001d18:	63bb      	str	r3, [r7, #56]	@ 0x38
								if(zval>ZaxisLen)	{ zval=ZaxisLen;}
 8001d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d1c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001d20:	4293      	cmp	r3, r2
 8001d22:	dd02      	ble.n	8001d2a <eval_and_execute_plot_cmd+0x30e>
 8001d24:	f240 736c 	movw	r3, #1900	@ 0x76c
 8001d28:	637b      	str	r3, [r7, #52]	@ 0x34

								HPGL_PA(xval, yval, zval, currentpos);
 8001d2a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001d2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f000 f8b1 	bl	8001e98 <HPGL_PA>
								break;
 8001d36:	bf00      	nop
	}
}
 8001d38:	bf00      	nop
 8001d3a:	375c      	adds	r7, #92	@ 0x5c
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd90      	pop	{r4, r7, pc}
 8001d40:	200002bc 	.word	0x200002bc

08001d44 <mypow10>:

int32_t mypow10(int32_t exponent)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	uint32_t num = 10;
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	60fb      	str	r3, [r7, #12]

	switch(exponent)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <mypow10+0x1a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d014      	beq.n	8001d86 <mypow10+0x42>
 8001d5c:	e002      	b.n	8001d64 <mypow10+0x20>
	{
		case 0: num = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
				break;
 8001d62:	e011      	b.n	8001d88 <mypow10+0x44>

		case 1: //num = 10;
				break;

		default:	exponent--;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]
					while(exponent)
 8001d6a:	e008      	b.n	8001d7e <mypow10+0x3a>
					{
						num *= 10;
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
						exponent--;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]
					while(exponent)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f3      	bne.n	8001d6c <mypow10+0x28>
					}
					break;
 8001d84:	e000      	b.n	8001d88 <mypow10+0x44>
				break;
 8001d86:	bf00      	nop
	}
	return num;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <msDelay>:

void msDelay(uint32_t val)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	while(val)
 8001d9c:	e006      	b.n	8001dac <msDelay+0x18>
	{
		val--;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	607b      	str	r3, [r7, #4]
		usDelay(1000);
 8001da4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001da8:	f000 f808 	bl	8001dbc <usDelay>
	while(val)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f5      	bne.n	8001d9e <msDelay+0xa>
	}
}
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <usDelay>:

void usDelay(uint32_t val)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
#ifdef USE_INTERRUPT_US_DELAY
	//__enable_irq();
	LL_TIM_SetCounter(TIM4, 0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4811      	ldr	r0, [pc, #68]	@ (8001e0c <usDelay+0x50>)
 8001dc8:	f7fe fd68 	bl	800089c <LL_TIM_SetCounter>
	LL_TIM_EnableIT_CC1(TIM4);
 8001dcc:	480f      	ldr	r0, [pc, #60]	@ (8001e0c <usDelay+0x50>)
 8001dce:	f7fe fe59 	bl	8000a84 <LL_TIM_EnableIT_CC1>
	LL_TIM_OC_SetCompareCH1(TIM4, val);
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	480d      	ldr	r0, [pc, #52]	@ (8001e0c <usDelay+0x50>)
 8001dd6:	f7fe fe13 	bl	8000a00 <LL_TIM_OC_SetCompareCH1>
	LL_TIM_SetAutoReload(TIM4, val);
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	480b      	ldr	r0, [pc, #44]	@ (8001e0c <usDelay+0x50>)
 8001dde:	f7fe fd6a 	bl	80008b6 <LL_TIM_SetAutoReload>
	LL_TIM_EnableCounter(TIM4);
 8001de2:	480a      	ldr	r0, [pc, #40]	@ (8001e0c <usDelay+0x50>)
 8001de4:	f7fe fd2a 	bl	800083c <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1);
 8001de8:	2101      	movs	r1, #1
 8001dea:	4808      	ldr	r0, [pc, #32]	@ (8001e0c <usDelay+0x50>)
 8001dec:	f7fe fd70 	bl	80008d0 <LL_TIM_CC_EnableChannel>
	while(us_delay_flag != 1)	{ __NOP();}
 8001df0:	e000      	b.n	8001df4 <usDelay+0x38>
 8001df2:	bf00      	nop
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <usDelay+0x54>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d1f9      	bne.n	8001df2 <usDelay+0x36>
	us_delay_flag=0;
 8001dfe:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <usDelay+0x54>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		val--;
	}
#endif
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40000800 	.word	0x40000800
 8001e10:	200002ba 	.word	0x200002ba

08001e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  gotozero(&stepper_pos);
 8001e18:	4804      	ldr	r0, [pc, #16]	@ (8001e2c <Error_Handler+0x18>)
 8001e1a:	f000 f995 	bl	8002148 <gotozero>
  STSPIN220_power_down();
 8001e1e:	f000 feb1 	bl	8002b84 <STSPIN220_power_down>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e22:	b672      	cpsid	i
}
 8001e24:	bf00      	nop

  __disable_irq();

  NVIC_SystemReset();
 8001e26:	f7fe fcf3 	bl	8000810 <__NVIC_SystemReset>
 8001e2a:	bf00      	nop
 8001e2c:	200002bc 	.word	0x200002bc

08001e30 <LL_GPIO_IsInputPinSet>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	4013      	ands	r3, r2
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <LL_GPIO_SetOutputPin>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	611a      	str	r2, [r3, #16]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <LL_GPIO_ResetOutputPin>:
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	615a      	str	r2, [r3, #20]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HPGL_PA>:

/*
 * Plot Absolute
 */
void HPGL_PA(uint32_t xcoord, uint32_t ycoord, uint32_t zcoord, CP* currentpos)
{
 8001e98:	b5b0      	push	{r4, r5, r7, lr}
 8001e9a:	b08c      	sub	sp, #48	@ 0x30
 8001e9c:	af04      	add	r7, sp, #16
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
	int16_t xmove = xcoord - currentpos->current_pos_x;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	83fb      	strh	r3, [r7, #30]
	int16_t ymove = ycoord - currentpos->current_pos_y;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	83bb      	strh	r3, [r7, #28]
	int16_t zmove = zcoord - currentpos->current_pos_z;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	837b      	strh	r3, [r7, #26]
	int8_t xdir = 0, ydir = 0, zdir = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	767b      	strb	r3, [r7, #25]
 8001eda:	2300      	movs	r3, #0
 8001edc:	763b      	strb	r3, [r7, #24]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]

	if(xmove>0)
 8001ee2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	dd02      	ble.n	8001ef0 <HPGL_PA+0x58>
	{
		xdir = FORWARD;
 8001eea:	2301      	movs	r3, #1
 8001eec:	767b      	strb	r3, [r7, #25]
 8001eee:	e008      	b.n	8001f02 <HPGL_PA+0x6a>
	}
	else
	{
		xdir = BACKWARD;
 8001ef0:	23ff      	movs	r3, #255	@ 0xff
 8001ef2:	767b      	strb	r3, [r7, #25]
		xmove = abs(xmove);
 8001ef4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bfb8      	it	lt
 8001efc:	425b      	neglt	r3, r3
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	83fb      	strh	r3, [r7, #30]
	}

	if(ymove>0)
 8001f02:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	dd02      	ble.n	8001f10 <HPGL_PA+0x78>
	{
		ydir = FORWARD;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	763b      	strb	r3, [r7, #24]
 8001f0e:	e008      	b.n	8001f22 <HPGL_PA+0x8a>
	}
	else
	{
		ydir = BACKWARD;
 8001f10:	23ff      	movs	r3, #255	@ 0xff
 8001f12:	763b      	strb	r3, [r7, #24]
		ymove = abs(ymove);
 8001f14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bfb8      	it	lt
 8001f1c:	425b      	neglt	r3, r3
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	83bb      	strh	r3, [r7, #28]
	}

	if(zmove>0)
 8001f22:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	dd02      	ble.n	8001f30 <HPGL_PA+0x98>
	{
		zdir = BACKWARD;
 8001f2a:	23ff      	movs	r3, #255	@ 0xff
 8001f2c:	75fb      	strb	r3, [r7, #23]
 8001f2e:	e008      	b.n	8001f42 <HPGL_PA+0xaa>
	}
	else
	{
		zdir = FORWARD;
 8001f30:	2301      	movs	r3, #1
 8001f32:	75fb      	strb	r3, [r7, #23]
		zmove = abs(zmove);
 8001f34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bfb8      	it	lt
 8001f3c:	425b      	neglt	r3, r3
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	837b      	strh	r3, [r7, #26]
	}

	stepxyz3D((uint32_t)xmove, xdir, (uint32_t)ymove, ydir, (uint32_t)zmove, zdir, currentpos);
 8001f42:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 8001f46:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8001f4a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f4e:	f997 5018 	ldrsb.w	r5, [r7, #24]
 8001f52:	f997 1019 	ldrsb.w	r1, [r7, #25]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	9202      	str	r2, [sp, #8]
 8001f5a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001f5e:	9201      	str	r2, [sp, #4]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	462b      	mov	r3, r5
 8001f64:	4622      	mov	r2, r4
 8001f66:	f000 f9df 	bl	8002328 <stepxyz3D>
}
 8001f6a:	bf00      	nop
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bdb0      	pop	{r4, r5, r7, pc}

08001f72 <HPGL_PR>:

/*
 * Plot Relative
 */
void HPGL_PR(int32_t xmove, int32_t ymove, int32_t zmove,CP* currentpos)
{
 8001f72:	b5b0      	push	{r4, r5, r7, lr}
 8001f74:	b08a      	sub	sp, #40	@ 0x28
 8001f76:	af04      	add	r7, sp, #16
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
	int8_t xdir = 0, ydir = 0, zdir = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	75fb      	strb	r3, [r7, #23]
 8001f84:	2300      	movs	r3, #0
 8001f86:	75bb      	strb	r3, [r7, #22]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	757b      	strb	r3, [r7, #21]

	if(xmove>0)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	dd02      	ble.n	8001f98 <HPGL_PR+0x26>
	{
		xdir = FORWARD;
 8001f92:	2301      	movs	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
 8001f96:	e006      	b.n	8001fa6 <HPGL_PR+0x34>
	}
	else
	{
		xdir = BACKWARD;
 8001f98:	23ff      	movs	r3, #255	@ 0xff
 8001f9a:	75fb      	strb	r3, [r7, #23]
		xmove = abs(xmove);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	bfb8      	it	lt
 8001fa2:	425b      	neglt	r3, r3
 8001fa4:	60fb      	str	r3, [r7, #12]
	}
	if(ymove>0)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	dd02      	ble.n	8001fb2 <HPGL_PR+0x40>
	{
		ydir = FORWARD;
 8001fac:	2301      	movs	r3, #1
 8001fae:	75bb      	strb	r3, [r7, #22]
 8001fb0:	e006      	b.n	8001fc0 <HPGL_PR+0x4e>
	}
	else
	{
		ydir = BACKWARD;
 8001fb2:	23ff      	movs	r3, #255	@ 0xff
 8001fb4:	75bb      	strb	r3, [r7, #22]
		ymove = abs(ymove);
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bfb8      	it	lt
 8001fbc:	425b      	neglt	r3, r3
 8001fbe:	60bb      	str	r3, [r7, #8]
	}
	if(zmove>0)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	dd02      	ble.n	8001fcc <HPGL_PR+0x5a>
	{
		zdir = FORWARD;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	757b      	strb	r3, [r7, #21]
 8001fca:	e006      	b.n	8001fda <HPGL_PR+0x68>
	}
	else
	{
		zdir = BACKWARD;
 8001fcc:	23ff      	movs	r3, #255	@ 0xff
 8001fce:	757b      	strb	r3, [r7, #21]
		zmove = abs(zmove);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bfb8      	it	lt
 8001fd6:	425b      	neglt	r3, r3
 8001fd8:	607b      	str	r3, [r7, #4]
	}

	stepxyz3D((uint32_t)xmove, xdir, (uint32_t)ymove, ydir, (uint32_t)zmove, zdir, currentpos);
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	68bc      	ldr	r4, [r7, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f997 5016 	ldrsb.w	r5, [r7, #22]
 8001fe4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	9202      	str	r2, [sp, #8]
 8001fec:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001ff0:	9201      	str	r2, [sp, #4]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	462b      	mov	r3, r5
 8001ff6:	4622      	mov	r2, r4
 8001ff8:	f000 f996 	bl	8002328 <stepxyz3D>
}
 8001ffc:	bf00      	nop
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bdb0      	pop	{r4, r5, r7, pc}

08002004 <get_limit_sw_state>:

void get_limit_sw_state(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	if(LL_GPIO_IsInputPinSet(SW1_1_GPIO_Port, SW1_1_Pin))	{ switches |= sw11bitMSK;}
 8002008:	f241 0110 	movw	r1, #4112	@ 0x1010
 800200c:	4848      	ldr	r0, [pc, #288]	@ (8002130 <get_limit_sw_state+0x12c>)
 800200e:	f7ff ff0f 	bl	8001e30 <LL_GPIO_IsInputPinSet>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <get_limit_sw_state+0x26>
 8002018:	4b46      	ldr	r3, [pc, #280]	@ (8002134 <get_limit_sw_state+0x130>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b43      	ldr	r3, [pc, #268]	@ (8002134 <get_limit_sw_state+0x130>)
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	e007      	b.n	800203a <get_limit_sw_state+0x36>
	else{ switches &= ~sw11bitMSK;}
 800202a:	4b42      	ldr	r3, [pc, #264]	@ (8002134 <get_limit_sw_state+0x130>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b3f      	ldr	r3, [pc, #252]	@ (8002134 <get_limit_sw_state+0x130>)
 8002038:	701a      	strb	r2, [r3, #0]

	if(LL_GPIO_IsInputPinSet(SW2_1_GPIO_Port, SW2_1_Pin))	{ switches |= sw21bitMSK;}
 800203a:	f242 0120 	movw	r1, #8224	@ 0x2020
 800203e:	483c      	ldr	r0, [pc, #240]	@ (8002130 <get_limit_sw_state+0x12c>)
 8002040:	f7ff fef6 	bl	8001e30 <LL_GPIO_IsInputPinSet>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d008      	beq.n	800205c <get_limit_sw_state+0x58>
 800204a:	4b3a      	ldr	r3, [pc, #232]	@ (8002134 <get_limit_sw_state+0x130>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b37      	ldr	r3, [pc, #220]	@ (8002134 <get_limit_sw_state+0x130>)
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	e007      	b.n	800206c <get_limit_sw_state+0x68>
	else{ switches &= ~sw21bitMSK;}
 800205c:	4b35      	ldr	r3, [pc, #212]	@ (8002134 <get_limit_sw_state+0x130>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f023 0302 	bic.w	r3, r3, #2
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b32      	ldr	r3, [pc, #200]	@ (8002134 <get_limit_sw_state+0x130>)
 800206a:	701a      	strb	r2, [r3, #0]

	if(LL_GPIO_IsInputPinSet(SW1_3_GPIO_Port, SW1_3_Pin))	{ switches |= sw13bitMSK;}
 800206c:	4932      	ldr	r1, [pc, #200]	@ (8002138 <get_limit_sw_state+0x134>)
 800206e:	4830      	ldr	r0, [pc, #192]	@ (8002130 <get_limit_sw_state+0x12c>)
 8002070:	f7ff fede 	bl	8001e30 <LL_GPIO_IsInputPinSet>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d008      	beq.n	800208c <get_limit_sw_state+0x88>
 800207a:	4b2e      	ldr	r3, [pc, #184]	@ (8002134 <get_limit_sw_state+0x130>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b2b      	ldr	r3, [pc, #172]	@ (8002134 <get_limit_sw_state+0x130>)
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e007      	b.n	800209c <get_limit_sw_state+0x98>
	else{ switches &= ~sw13bitMSK;}
 800208c:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <get_limit_sw_state+0x130>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f023 0304 	bic.w	r3, r3, #4
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b26      	ldr	r3, [pc, #152]	@ (8002134 <get_limit_sw_state+0x130>)
 800209a:	701a      	strb	r2, [r3, #0]

	if(LL_GPIO_IsInputPinSet(SW2_3_GPIO_Port, SW2_3_Pin))	{ switches |= sw23bitMSK;}
 800209c:	4927      	ldr	r1, [pc, #156]	@ (800213c <get_limit_sw_state+0x138>)
 800209e:	4824      	ldr	r0, [pc, #144]	@ (8002130 <get_limit_sw_state+0x12c>)
 80020a0:	f7ff fec6 	bl	8001e30 <LL_GPIO_IsInputPinSet>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d008      	beq.n	80020bc <get_limit_sw_state+0xb8>
 80020aa:	4b22      	ldr	r3, [pc, #136]	@ (8002134 <get_limit_sw_state+0x130>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <get_limit_sw_state+0x130>)
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e007      	b.n	80020cc <get_limit_sw_state+0xc8>
	else{ switches &= ~sw23bitMSK;}
 80020bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002134 <get_limit_sw_state+0x130>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f023 0308 	bic.w	r3, r3, #8
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002134 <get_limit_sw_state+0x130>)
 80020ca:	701a      	strb	r2, [r3, #0]

	if(LL_GPIO_IsInputPinSet(SW1_4_GPIO_Port, SW1_4_Pin))	{ switches &= ~sw14bitMSK;}
 80020cc:	491c      	ldr	r1, [pc, #112]	@ (8002140 <get_limit_sw_state+0x13c>)
 80020ce:	4818      	ldr	r0, [pc, #96]	@ (8002130 <get_limit_sw_state+0x12c>)
 80020d0:	f7ff feae 	bl	8001e30 <LL_GPIO_IsInputPinSet>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <get_limit_sw_state+0xe8>
 80020da:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <get_limit_sw_state+0x130>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	f023 0310 	bic.w	r3, r3, #16
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <get_limit_sw_state+0x130>)
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e007      	b.n	80020fc <get_limit_sw_state+0xf8>
	else{ switches |= sw14bitMSK;}
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <get_limit_sw_state+0x130>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f043 0310 	orr.w	r3, r3, #16
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <get_limit_sw_state+0x130>)
 80020fa:	701a      	strb	r2, [r3, #0]

	if(LL_GPIO_IsInputPinSet(SW2_4_GPIO_Port, SW2_4_Pin))	{ switches &= ~sw24bitMSK;}
 80020fc:	4911      	ldr	r1, [pc, #68]	@ (8002144 <get_limit_sw_state+0x140>)
 80020fe:	480c      	ldr	r0, [pc, #48]	@ (8002130 <get_limit_sw_state+0x12c>)
 8002100:	f7ff fe96 	bl	8001e30 <LL_GPIO_IsInputPinSet>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <get_limit_sw_state+0x118>
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <get_limit_sw_state+0x130>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f023 0320 	bic.w	r3, r3, #32
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <get_limit_sw_state+0x130>)
 8002118:	701a      	strb	r2, [r3, #0]
	else{ switches |= sw24bitMSK;}
}
 800211a:	e007      	b.n	800212c <get_limit_sw_state+0x128>
	else{ switches |= sw24bitMSK;}
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <get_limit_sw_state+0x130>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b02      	ldr	r3, [pc, #8]	@ (8002134 <get_limit_sw_state+0x130>)
 800212a:	701a      	strb	r2, [r3, #0]
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40010c00 	.word	0x40010c00
 8002134:	200002bb 	.word	0x200002bb
 8002138:	04010001 	.word	0x04010001
 800213c:	04020002 	.word	0x04020002
 8002140:	04040004 	.word	0x04040004
 8002144:	04080008 	.word	0x04080008

08002148 <gotozero>:

void gotozero(CP* currentpos)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	@ 0x30
 800214c:	af04      	add	r7, sp, #16
 800214e:	6078      	str	r0, [r7, #4]
	uint32_t gx=0, gy=0;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]

	while( (switches&sw14bitMSK) != sw14bitMSK)
 8002158:	e005      	b.n	8002166 <gotozero+0x1e>
	{
		stepz(1, BACKWARD, currentpos);
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	2001      	movs	r0, #1
 8002162:	f000 f881 	bl	8002268 <stepz>
	while( (switches&sw14bitMSK) != sw14bitMSK)
 8002166:	4b3d      	ldr	r3, [pc, #244]	@ (800225c <gotozero+0x114>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b10      	cmp	r3, #16
 8002172:	d1f2      	bne.n	800215a <gotozero+0x12>
	}
	currentpos->current_pos_z = 0;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]

	while( (switches&(sw11bitMSK|sw13bitMSK)) != (sw11bitMSK|sw13bitMSK) )
 800217a:	e026      	b.n	80021ca <gotozero+0x82>
	{
		if((switches&sw11bitMSK)==sw11bitMSK)	{ gx = 0;}	else{ gx = 1;}
 800217c:	4b37      	ldr	r3, [pc, #220]	@ (800225c <gotozero+0x114>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d102      	bne.n	8002190 <gotozero+0x48>
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e001      	b.n	8002194 <gotozero+0x4c>
 8002190:	2301      	movs	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
		if((switches&sw13bitMSK)==sw13bitMSK)	{ gy = 0;}	else{ gy = 1;}
 8002194:	4b31      	ldr	r3, [pc, #196]	@ (800225c <gotozero+0x114>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d102      	bne.n	80021a8 <gotozero+0x60>
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	e001      	b.n	80021ac <gotozero+0x64>
 80021a8:	2301      	movs	r3, #1
 80021aa:	61bb      	str	r3, [r7, #24]
		stepxyz25D(gx, BACKWARD, gy, BACKWARD, 0, BACKWARD, currentpos);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	9302      	str	r3, [sp, #8]
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	2300      	movs	r3, #0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	f04f 31ff 	mov.w	r1, #4294967295
 80021c4:	69f8      	ldr	r0, [r7, #28]
 80021c6:	f000 facb 	bl	8002760 <stepxyz25D>
	while( (switches&(sw11bitMSK|sw13bitMSK)) != (sw11bitMSK|sw13bitMSK) )
 80021ca:	4b24      	ldr	r3, [pc, #144]	@ (800225c <gotozero+0x114>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f003 0305 	and.w	r3, r3, #5
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d1d1      	bne.n	800217c <gotozero+0x34>
	}
	stepxyz25D(100, FORWARD, 100, FORWARD, 100, FORWARD, currentpos);//step out of the limit sw proximity
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	2301      	movs	r3, #1
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	2364      	movs	r3, #100	@ 0x64
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2301      	movs	r3, #1
 80021e6:	2264      	movs	r2, #100	@ 0x64
 80021e8:	2101      	movs	r1, #1
 80021ea:	2064      	movs	r0, #100	@ 0x64
 80021ec:	f000 fab8 	bl	8002760 <stepxyz25D>
	currentpos->current_pos_x = 0;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
	currentpos->current_pos_y = 0;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	605a      	str	r2, [r3, #4]
	currentpos->current_pos_z = ZaxisLen;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f240 726c 	movw	r2, #1900	@ 0x76c
 8002202:	609a      	str	r2, [r3, #8]
	currentpos->error_state = 0;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	751a      	strb	r2, [r3, #20]

	uint8_t str[] = {"Home pos"};
 800220a:	4a15      	ldr	r2, [pc, #84]	@ (8002260 <gotozero+0x118>)
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	ca07      	ldmia	r2, {r0, r1, r2}
 8002212:	c303      	stmia	r3!, {r0, r1}
 8002214:	701a      	strb	r2, [r3, #0]
	ext_brd_transmit_string(PrintInfo_cmd, str, sizeof(str));
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	2209      	movs	r2, #9
 800221c:	4619      	mov	r1, r3
 800221e:	2003      	movs	r0, #3
 8002220:	f7ff fb56 	bl	80018d0 <ext_brd_transmit_string>
	msDelay(300);
 8002224:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002228:	f7ff fdb4 	bl	8001d94 <msDelay>

	uint8_t str2[] = {"> "};
 800222c:	4a0d      	ldr	r2, [pc, #52]	@ (8002264 <gotozero+0x11c>)
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	4611      	mov	r1, r2
 8002236:	8019      	strh	r1, [r3, #0]
 8002238:	3302      	adds	r3, #2
 800223a:	0c12      	lsrs	r2, r2, #16
 800223c:	701a      	strb	r2, [r3, #0]
	ext_brd_transmit_string(PrintInfo_cmd, str2, sizeof(str2));
 800223e:	f107 0308 	add.w	r3, r7, #8
 8002242:	2203      	movs	r2, #3
 8002244:	4619      	mov	r1, r3
 8002246:	2003      	movs	r0, #3
 8002248:	f7ff fb42 	bl	80018d0 <ext_brd_transmit_string>
	msDelay(100);
 800224c:	2064      	movs	r0, #100	@ 0x64
 800224e:	f7ff fda1 	bl	8001d94 <msDelay>
}
 8002252:	bf00      	nop
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200002bb 	.word	0x200002bb
 8002260:	0800cff4 	.word	0x0800cff4
 8002264:	0800d000 	.word	0x0800d000

08002268 <stepz>:

void stepz(uint32_t z, int8_t dirz, CP* currentpos)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	460b      	mov	r3, r1
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	72fb      	strb	r3, [r7, #11]
	uint32_t z_steps_taken = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]

	if(dirz==FORWARD)	{ LL_GPIO_SetOutputPin(DIR_4_GPIO_Port, DIR_4_Pin);}	else{ LL_GPIO_ResetOutputPin(DIR_4_GPIO_Port, DIR_4_Pin);}
 800227a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <stepz+0x26>
 8002282:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002286:	4826      	ldr	r0, [pc, #152]	@ (8002320 <stepz+0xb8>)
 8002288:	f7ff fde8 	bl	8001e5c <LL_GPIO_SetOutputPin>
 800228c:	e004      	b.n	8002298 <stepz+0x30>
 800228e:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002292:	4823      	ldr	r0, [pc, #140]	@ (8002320 <stepz+0xb8>)
 8002294:	f7ff fdf1 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	get_limit_sw_state();
 8002298:	f7ff feb4 	bl	8002004 <get_limit_sw_state>
	usDelay(1);
 800229c:	2001      	movs	r0, #1
 800229e:	f7ff fd8d 	bl	8001dbc <usDelay>

	while(  (z_steps_taken<z) && IfMovingAwayFromSwitch(dirz, sw14bitMSK, sw24bitMSK) )//ha nem a bedőlt limit switch felé megy akkor csinálhat steppet
 80022a2:	e014      	b.n	80022ce <stepz+0x66>
	{
		LL_GPIO_SetOutputPin(STCK_4_GPIO_Port, STCK_4_Pin);//motor steps on rising edge
 80022a4:	f640 0108 	movw	r1, #2056	@ 0x808
 80022a8:	481d      	ldr	r0, [pc, #116]	@ (8002320 <stepz+0xb8>)
 80022aa:	f7ff fdd7 	bl	8001e5c <LL_GPIO_SetOutputPin>
		z_steps_taken++;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
		//stepdelay(currentpos);
		usDelay(800);
 80022b4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80022b8:	f7ff fd80 	bl	8001dbc <usDelay>
		LL_GPIO_ResetOutputPin(STCK_4_GPIO_Port, STCK_4_Pin);
 80022bc:	f640 0108 	movw	r1, #2056	@ 0x808
 80022c0:	4817      	ldr	r0, [pc, #92]	@ (8002320 <stepz+0xb8>)
 80022c2:	f7ff fdda 	bl	8001e7a <LL_GPIO_ResetOutputPin>
		//stepdelay(currentpos);
		usDelay(800);
 80022c6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80022ca:	f7ff fd77 	bl	8001dbc <usDelay>
	while(  (z_steps_taken<z) && IfMovingAwayFromSwitch(dirz, sw14bitMSK, sw24bitMSK) )//ha nem a bedőlt limit switch felé megy akkor csinálhat steppet
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d216      	bcs.n	8002304 <stepz+0x9c>
 80022d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022de:	d106      	bne.n	80022ee <stepz+0x86>
 80022e0:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <stepz+0xbc>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d1da      	bne.n	80022a4 <stepz+0x3c>
 80022ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d106      	bne.n	8002304 <stepz+0x9c>
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <stepz+0xbc>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b20      	cmp	r3, #32
 8002302:	d1cf      	bne.n	80022a4 <stepz+0x3c>
	}

	currentpos->current_pos_z += (z_steps_taken*dirz);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800230c:	6979      	ldr	r1, [r7, #20]
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	441a      	add	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	609a      	str	r2, [r3, #8]
}
 8002318:	bf00      	nop
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40010800 	.word	0x40010800
 8002324:	200002bb 	.word	0x200002bb

08002328 <stepxyz3D>:

void stepxyz3D(uint32_t x, int8_t dirx, uint32_t y, int8_t diry, uint32_t z, int8_t dirz, CP* currentpos)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b09d      	sub	sp, #116	@ 0x74
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	461a      	mov	r2, r3
 8002334:	460b      	mov	r3, r1
 8002336:	72fb      	strb	r3, [r7, #11]
 8002338:	4613      	mov	r3, r2
 800233a:	72bb      	strb	r3, [r7, #10]
	axle aX={dirx, sw11bitMSK, sw21bitMSK, x, 0, STCK_1_GPIO_Port, STCK_1_Pin};
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8002342:	2301      	movs	r3, #1
 8002344:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002348:	2302      	movs	r3, #2
 800234a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002352:	2300      	movs	r3, #0
 8002354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002356:	4b66      	ldr	r3, [pc, #408]	@ (80024f0 <stepxyz3D+0x1c8>)
 8002358:	653b      	str	r3, [r7, #80]	@ 0x50
 800235a:	f240 1301 	movw	r3, #257	@ 0x101
 800235e:	657b      	str	r3, [r7, #84]	@ 0x54
	axle aY={diry, sw13bitMSK, sw23bitMSK, y, 0, STCK_3_GPIO_Port, STCK_3_Pin};
 8002360:	7abb      	ldrb	r3, [r7, #10]
 8002362:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8002366:	2304      	movs	r3, #4
 8002368:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800236c:	2308      	movs	r3, #8
 800236e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	637b      	str	r3, [r7, #52]	@ 0x34
 8002376:	2300      	movs	r3, #0
 8002378:	63bb      	str	r3, [r7, #56]	@ 0x38
 800237a:	4b5d      	ldr	r3, [pc, #372]	@ (80024f0 <stepxyz3D+0x1c8>)
 800237c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800237e:	f240 4304 	movw	r3, #1028	@ 0x404
 8002382:	643b      	str	r3, [r7, #64]	@ 0x40
	axle aZ={dirz, sw14bitMSK, sw24bitMSK, z, 0, STCK_4_GPIO_Port, STCK_4_Pin};
 8002384:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8002388:	773b      	strb	r3, [r7, #28]
 800238a:	2310      	movs	r3, #16
 800238c:	777b      	strb	r3, [r7, #29]
 800238e:	2320      	movs	r3, #32
 8002390:	77bb      	strb	r3, [r7, #30]
 8002392:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
 800239c:	4b54      	ldr	r3, [pc, #336]	@ (80024f0 <stepxyz3D+0x1c8>)
 800239e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023a0:	f640 0308 	movw	r3, #2056	@ 0x808
 80023a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	float slope10 = 0;
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float slope21 = 0;
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	66bb      	str	r3, [r7, #104]	@ 0x68
	float virtual_slope10 = 0;
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	663b      	str	r3, [r7, #96]	@ 0x60
	float virtual_slope21 = 0;
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	65fb      	str	r3, [r7, #92]	@ 0x5c

	uint32_t swap=1;
 80023be:	2301      	movs	r3, #1
 80023c0:	667b      	str	r3, [r7, #100]	@ 0x64
	axle* tmp;
	axle* axt[3]={&aX, &aY, &aZ};
 80023c2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	f107 031c 	add.w	r3, r7, #28
 80023d2:	61bb      	str	r3, [r7, #24]

	while(swap)//sorting, small to big
 80023d4:	e01d      	b.n	8002412 <stepxyz3D+0xea>
	{
		swap=0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	667b      	str	r3, [r7, #100]	@ 0x64
		if(axt[0]->steps > axt[1]->steps)	{tmp=axt[0]; axt[0]=axt[1]; axt[1]=tmp; swap=1;} else{}
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d907      	bls.n	80023f6 <stepxyz3D+0xce>
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	2301      	movs	r3, #1
 80023f4:	667b      	str	r3, [r7, #100]	@ 0x64
		if(axt[1]->steps > axt[2]->steps)	{tmp=axt[1]; axt[1]=axt[2]; axt[2]=tmp; swap=1;} else{}
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d907      	bls.n	8002412 <stepxyz3D+0xea>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	2301      	movs	r3, #1
 8002410:	667b      	str	r3, [r7, #100]	@ 0x64
	while(swap)//sorting, small to big
 8002412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1de      	bne.n	80023d6 <stepxyz3D+0xae>
	}

	if(dirx==FORWARD)	{ LL_GPIO_SetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);}	else{ LL_GPIO_ResetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);}
 8002418:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <stepxyz3D+0x104>
 8002420:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002424:	4832      	ldr	r0, [pc, #200]	@ (80024f0 <stepxyz3D+0x1c8>)
 8002426:	f7ff fd19 	bl	8001e5c <LL_GPIO_SetOutputPin>
 800242a:	e004      	b.n	8002436 <stepxyz3D+0x10e>
 800242c:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002430:	482f      	ldr	r0, [pc, #188]	@ (80024f0 <stepxyz3D+0x1c8>)
 8002432:	f7ff fd22 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	if(diry==FORWARD)	{ LL_GPIO_SetOutputPin(DIR_3_GPIO_Port, DIR_3_Pin);}	else{ LL_GPIO_ResetOutputPin(DIR_3_GPIO_Port, DIR_3_Pin);}
 8002436:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d105      	bne.n	800244a <stepxyz3D+0x122>
 800243e:	f244 0140 	movw	r1, #16448	@ 0x4040
 8002442:	482b      	ldr	r0, [pc, #172]	@ (80024f0 <stepxyz3D+0x1c8>)
 8002444:	f7ff fd0a 	bl	8001e5c <LL_GPIO_SetOutputPin>
 8002448:	e004      	b.n	8002454 <stepxyz3D+0x12c>
 800244a:	f244 0140 	movw	r1, #16448	@ 0x4040
 800244e:	4828      	ldr	r0, [pc, #160]	@ (80024f0 <stepxyz3D+0x1c8>)
 8002450:	f7ff fd13 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	if(dirz==FORWARD)	{ LL_GPIO_SetOutputPin(DIR_4_GPIO_Port, DIR_4_Pin);}	else{ LL_GPIO_ResetOutputPin(DIR_4_GPIO_Port, DIR_4_Pin);}
 8002454:	f997 3084 	ldrsb.w	r3, [r7, #132]	@ 0x84
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <stepxyz3D+0x140>
 800245c:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002460:	4823      	ldr	r0, [pc, #140]	@ (80024f0 <stepxyz3D+0x1c8>)
 8002462:	f7ff fcfb 	bl	8001e5c <LL_GPIO_SetOutputPin>
 8002466:	e004      	b.n	8002472 <stepxyz3D+0x14a>
 8002468:	f248 0180 	movw	r1, #32896	@ 0x8080
 800246c:	4820      	ldr	r0, [pc, #128]	@ (80024f0 <stepxyz3D+0x1c8>)
 800246e:	f7ff fd04 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	get_limit_sw_state();
 8002472:	f7ff fdc7 	bl	8002004 <get_limit_sw_state>

	if((axt[0]->steps == 0) || (axt[1]->steps == 0))	{slope10 = 0;}	else{ slope10 = fabsf((float)axt[1]->steps / (float)axt[0]->steps);}
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <stepxyz3D+0x15e>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <stepxyz3D+0x166>
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800248c:	e011      	b.n	80024b2 <stepxyz3D+0x18a>
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fd ff18 	bl	80002c8 <__aeabi_ui2f>
 8002498:	4604      	mov	r4, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fd ff12 	bl	80002c8 <__aeabi_ui2f>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4619      	mov	r1, r3
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7fe f819 	bl	80004e0 <__aeabi_fdiv>
 80024ae:	4603      	mov	r3, r0
 80024b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if((axt[1]->steps == 0) || (axt[2]->steps == 0))	{slope21 = 0;}	else{ slope21 = fabsf((float)axt[2]->steps / (float)axt[1]->steps);}
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <stepxyz3D+0x19a>
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d103      	bne.n	80024ca <stepxyz3D+0x1a2>
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024c8:	e011      	b.n	80024ee <stepxyz3D+0x1c6>
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fd fefa 	bl	80002c8 <__aeabi_ui2f>
 80024d4:	4604      	mov	r4, r0
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fd fef4 	bl	80002c8 <__aeabi_ui2f>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4619      	mov	r1, r3
 80024e4:	4620      	mov	r0, r4
 80024e6:	f7fd fffb 	bl	80004e0 <__aeabi_fdiv>
 80024ea:	4603      	mov	r3, r0
 80024ec:	66bb      	str	r3, [r7, #104]	@ 0x68

	while(  (axt[2]->stepsTaken < axt[2]->steps) && IfMovingAwayFromSwitch(axt[2]->dir, axt[2]->sw1MSK, axt[2]->sw2MSK) )//ha nem a bedőlt limit switch felé megy akkor csinálhat steppet
 80024ee:	e0db      	b.n	80026a8 <stepxyz3D+0x380>
 80024f0:	40010800 	.word	0x40010800
	{
		LL_GPIO_SetOutputPin(axt[2]->GPIOport, axt[2]->GPIOpin);//motor steps on rising edge
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4619      	mov	r1, r3
 80024fe:	4610      	mov	r0, r2
 8002500:	f7ff fcac 	bl	8001e5c <LL_GPIO_SetOutputPin>
		axt[2]->stepsTaken++;
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	3201      	adds	r2, #1
 800250a:	609a      	str	r2, [r3, #8]

		if(slope21 != 0)
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002512:	f7fe f8c5 	bl	80006a0 <__aeabi_fcmpeq>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	f040 80ae 	bne.w	800267a <stepxyz3D+0x352>
		{
			virtual_slope21 = ((float)axt[2]->stepsTaken/(axt[1]->stepsTaken+1));
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd fed4 	bl	80002d0 <__aeabi_i2f>
 8002528:	4604      	mov	r4, r0
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	3301      	adds	r3, #1
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd fecd 	bl	80002d0 <__aeabi_i2f>
 8002536:	4603      	mov	r3, r0
 8002538:	4619      	mov	r1, r3
 800253a:	4620      	mov	r0, r4
 800253c:	f7fd ffd0 	bl	80004e0 <__aeabi_fdiv>
 8002540:	4603      	mov	r3, r0
 8002542:	65fb      	str	r3, [r7, #92]	@ 0x5c

			if( (virtual_slope21>=slope21 ) && (axt[1]->stepsTaken<axt[1]->steps) && IfMovingAwayFromSwitch(axt[1]->dir, axt[1]->sw1MSK, axt[1]->sw2MSK))
 8002544:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002546:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002548:	f7fe f8c8 	bl	80006dc <__aeabi_fcmpge>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8093 	beq.w	800267a <stepxyz3D+0x352>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	461a      	mov	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	429a      	cmp	r2, r3
 8002560:	f080 808b 	bcs.w	800267a <stepxyz3D+0x352>
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b25b      	sxtb	r3, r3
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d10c      	bne.n	800258a <stepxyz3D+0x262>
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	785b      	ldrb	r3, [r3, #1]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4b78      	ldr	r3, [pc, #480]	@ (8002758 <stepxyz3D+0x430>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	4013      	ands	r3, r2
 800257e:	b2da      	uxtb	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	429a      	cmp	r2, r3
 8002588:	d111      	bne.n	80025ae <stepxyz3D+0x286>
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b25b      	sxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d172      	bne.n	800267a <stepxyz3D+0x352>
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	789b      	ldrb	r3, [r3, #2]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b6f      	ldr	r3, [pc, #444]	@ (8002758 <stepxyz3D+0x430>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	4013      	ands	r3, r2
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	789b      	ldrb	r3, [r3, #2]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d065      	beq.n	800267a <stepxyz3D+0x352>
			{
				LL_GPIO_SetOutputPin(axt[1]->GPIOport, axt[1]->GPIOpin);//motor steps on rising edge
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4610      	mov	r0, r2
 80025ba:	f7ff fc4f 	bl	8001e5c <LL_GPIO_SetOutputPin>
				axt[1]->stepsTaken++;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	3201      	adds	r2, #1
 80025c4:	609a      	str	r2, [r3, #8]

				if(slope10 != 0)
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80025cc:	f7fe f868 	bl	80006a0 <__aeabi_fcmpeq>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d151      	bne.n	800267a <stepxyz3D+0x352>
				{
					virtual_slope10 = ((float)axt[1]->stepsTaken/(axt[0]->stepsTaken+1));
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd fe78 	bl	80002d0 <__aeabi_i2f>
 80025e0:	4604      	mov	r4, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd fe71 	bl	80002d0 <__aeabi_i2f>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4619      	mov	r1, r3
 80025f2:	4620      	mov	r0, r4
 80025f4:	f7fd ff74 	bl	80004e0 <__aeabi_fdiv>
 80025f8:	4603      	mov	r3, r0
 80025fa:	663b      	str	r3, [r7, #96]	@ 0x60

					if( (virtual_slope10>=slope10 ) && (axt[0]->stepsTaken<axt[0]->steps) && IfMovingAwayFromSwitch(axt[0]->dir, axt[0]->sw1MSK, axt[0]->sw2MSK))
 80025fc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80025fe:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002600:	f7fe f86c 	bl	80006dc <__aeabi_fcmpge>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d037      	beq.n	800267a <stepxyz3D+0x352>
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	461a      	mov	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	d230      	bcs.n	800267a <stepxyz3D+0x352>
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b25b      	sxtb	r3, r3
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d10c      	bne.n	800263e <stepxyz3D+0x316>
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	785b      	ldrb	r3, [r3, #1]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b4b      	ldr	r3, [pc, #300]	@ (8002758 <stepxyz3D+0x430>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4013      	ands	r3, r2
 8002632:	b2da      	uxtb	r2, r3
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	785b      	ldrb	r3, [r3, #1]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	429a      	cmp	r2, r3
 800263c:	d111      	bne.n	8002662 <stepxyz3D+0x33a>
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b25b      	sxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d118      	bne.n	800267a <stepxyz3D+0x352>
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	789b      	ldrb	r3, [r3, #2]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b42      	ldr	r3, [pc, #264]	@ (8002758 <stepxyz3D+0x430>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4013      	ands	r3, r2
 8002656:	b2da      	uxtb	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	789b      	ldrb	r3, [r3, #2]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	429a      	cmp	r2, r3
 8002660:	d00b      	beq.n	800267a <stepxyz3D+0x352>
					{
						LL_GPIO_SetOutputPin(axt[0]->GPIOport, axt[0]->GPIOpin);//motor steps on rising edge
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	4619      	mov	r1, r3
 800266c:	4610      	mov	r0, r2
 800266e:	f7ff fbf5 	bl	8001e5c <LL_GPIO_SetOutputPin>
						axt[0]->stepsTaken++;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	3201      	adds	r2, #1
 8002678:	609a      	str	r2, [r3, #8]
					}
				}
			}
		}
		stepdelay(currentpos);
 800267a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800267e:	f000 f9e5 	bl	8002a4c <stepdelay>
		LL_GPIO_ResetOutputPin(STCK_1_GPIO_Port, STCK_1_Pin);
 8002682:	f240 1101 	movw	r1, #257	@ 0x101
 8002686:	4835      	ldr	r0, [pc, #212]	@ (800275c <stepxyz3D+0x434>)
 8002688:	f7ff fbf7 	bl	8001e7a <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(STCK_3_GPIO_Port, STCK_3_Pin);
 800268c:	f240 4104 	movw	r1, #1028	@ 0x404
 8002690:	4832      	ldr	r0, [pc, #200]	@ (800275c <stepxyz3D+0x434>)
 8002692:	f7ff fbf2 	bl	8001e7a <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(STCK_4_GPIO_Port, STCK_4_Pin);
 8002696:	f640 0108 	movw	r1, #2056	@ 0x808
 800269a:	4830      	ldr	r0, [pc, #192]	@ (800275c <stepxyz3D+0x434>)
 800269c:	f7ff fbed 	bl	8001e7a <LL_GPIO_ResetOutputPin>
		stepdelay(currentpos);
 80026a0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80026a4:	f000 f9d2 	bl	8002a4c <stepdelay>
	while(  (axt[2]->stepsTaken < axt[2]->steps) && IfMovingAwayFromSwitch(axt[2]->dir, axt[2]->sw1MSK, axt[2]->sw2MSK) )//ha nem a bedőlt limit switch felé megy akkor csinálhat steppet
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	461a      	mov	r2, r3
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d226      	bcs.n	8002704 <stepxyz3D+0x3dc>
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d10d      	bne.n	80026de <stepxyz3D+0x3b6>
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b23      	ldr	r3, [pc, #140]	@ (8002758 <stepxyz3D+0x430>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4013      	ands	r3, r2
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	785b      	ldrb	r3, [r3, #1]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	429a      	cmp	r2, r3
 80026da:	f47f af0b 	bne.w	80024f4 <stepxyz3D+0x1cc>
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d10d      	bne.n	8002704 <stepxyz3D+0x3dc>
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	789b      	ldrb	r3, [r3, #2]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <stepxyz3D+0x430>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	4013      	ands	r3, r2
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	789b      	ldrb	r3, [r3, #2]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	429a      	cmp	r2, r3
 8002700:	f47f aef8 	bne.w	80024f4 <stepxyz3D+0x1cc>
	}

	currentpos->current_pos_x += (aX.stepsTaken * aX.dir);
 8002704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002706:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800270a:	b252      	sxtb	r2, r2
 800270c:	fb03 f202 	mul.w	r2, r3, r2
 8002710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	441a      	add	r2, r3
 8002718:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800271c:	601a      	str	r2, [r3, #0]
	currentpos->current_pos_y += (aY.stepsTaken * aY.dir);
 800271e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002720:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002724:	b252      	sxtb	r2, r2
 8002726:	fb03 f202 	mul.w	r2, r3, r2
 800272a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	441a      	add	r2, r3
 8002732:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002736:	605a      	str	r2, [r3, #4]
	currentpos->current_pos_z -= (aZ.stepsTaken * aZ.dir);
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	7f3a      	ldrb	r2, [r7, #28]
 800273c:	b252      	sxtb	r2, r2
 800273e:	fb03 f202 	mul.w	r2, r3, r2
 8002742:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	1a9a      	subs	r2, r3, r2
 800274a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800274e:	609a      	str	r2, [r3, #8]
}
 8002750:	bf00      	nop
 8002752:	3774      	adds	r7, #116	@ 0x74
 8002754:	46bd      	mov	sp, r7
 8002756:	bd90      	pop	{r4, r7, pc}
 8002758:	200002bb 	.word	0x200002bb
 800275c:	40010800 	.word	0x40010800

08002760 <stepxyz25D>:

void stepxyz25D(uint32_t x, int8_t dirx, uint32_t y, int8_t diry, uint32_t z, int8_t dirz, CP* currentpos)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b089      	sub	sp, #36	@ 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	461a      	mov	r2, r3
 800276c:	460b      	mov	r3, r1
 800276e:	72fb      	strb	r3, [r7, #11]
 8002770:	4613      	mov	r3, r2
 8002772:	72bb      	strb	r3, [r7, #10]
	float slope = 0;
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
	float next_slope = 0;
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
	uint32_t x_steps_taken = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	61bb      	str	r3, [r7, #24]
	uint32_t y_steps_taken = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

	if(dirx==FORWARD)	{ LL_GPIO_SetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);}	else{ LL_GPIO_ResetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);}
 8002788:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <stepxyz25D+0x3c>
 8002790:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002794:	48ab      	ldr	r0, [pc, #684]	@ (8002a44 <stepxyz25D+0x2e4>)
 8002796:	f7ff fb61 	bl	8001e5c <LL_GPIO_SetOutputPin>
 800279a:	e004      	b.n	80027a6 <stepxyz25D+0x46>
 800279c:	f241 0110 	movw	r1, #4112	@ 0x1010
 80027a0:	48a8      	ldr	r0, [pc, #672]	@ (8002a44 <stepxyz25D+0x2e4>)
 80027a2:	f7ff fb6a 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	if(diry==FORWARD)	{ LL_GPIO_SetOutputPin(DIR_3_GPIO_Port, DIR_3_Pin);}	else{ LL_GPIO_ResetOutputPin(DIR_3_GPIO_Port, DIR_3_Pin);}
 80027a6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d105      	bne.n	80027ba <stepxyz25D+0x5a>
 80027ae:	f244 0140 	movw	r1, #16448	@ 0x4040
 80027b2:	48a4      	ldr	r0, [pc, #656]	@ (8002a44 <stepxyz25D+0x2e4>)
 80027b4:	f7ff fb52 	bl	8001e5c <LL_GPIO_SetOutputPin>
 80027b8:	e004      	b.n	80027c4 <stepxyz25D+0x64>
 80027ba:	f244 0140 	movw	r1, #16448	@ 0x4040
 80027be:	48a1      	ldr	r0, [pc, #644]	@ (8002a44 <stepxyz25D+0x2e4>)
 80027c0:	f7ff fb5b 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	get_limit_sw_state();
 80027c4:	f7ff fc1e 	bl	8002004 <get_limit_sw_state>
	stepz(z, dirz, currentpos);
 80027c8:	f997 3034 	ldrsb.w	r3, [r7, #52]	@ 0x34
 80027cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027ce:	4619      	mov	r1, r3
 80027d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027d2:	f7ff fd49 	bl	8002268 <stepz>

	if(x>y)
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	f240 808e 	bls.w	80028fc <stepxyz25D+0x19c>
	{
		if(y==0)	{ slope=0;}
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <stepxyz25D+0x8e>
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	e068      	b.n	80028c0 <stepxyz25D+0x160>
		else{ slope = fabs((float)x/y);}
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7fd fd6a 	bl	80002c8 <__aeabi_ui2f>
 80027f4:	4604      	mov	r4, r0
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fd fd66 	bl	80002c8 <__aeabi_ui2f>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4619      	mov	r1, r3
 8002800:	4620      	mov	r0, r4
 8002802:	f7fd fe6d 	bl	80004e0 <__aeabi_fdiv>
 8002806:	4603      	mov	r3, r0
 8002808:	61fb      	str	r3, [r7, #28]

		while(  (x_steps_taken<x) && IfMovingAwayFromSwitch(dirx, sw11bitMSK, sw21bitMSK) )//ha nem a bedőlt limit switch felé megy akkor csinálhat steppet
 800280a:	e059      	b.n	80028c0 <stepxyz25D+0x160>
		{
			LL_GPIO_SetOutputPin(STCK_1_GPIO_Port, STCK_1_Pin);//motor steps on rising edge
 800280c:	f240 1101 	movw	r1, #257	@ 0x101
 8002810:	488c      	ldr	r0, [pc, #560]	@ (8002a44 <stepxyz25D+0x2e4>)
 8002812:	f7ff fb23 	bl	8001e5c <LL_GPIO_SetOutputPin>
			x_steps_taken++;
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	3301      	adds	r3, #1
 800281a:	61bb      	str	r3, [r7, #24]

			if(slope != 0)
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	69f8      	ldr	r0, [r7, #28]
 8002822:	f7fd ff3d 	bl	80006a0 <__aeabi_fcmpeq>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d139      	bne.n	80028a0 <stepxyz25D+0x140>
			{
				next_slope = ((float)x_steps_taken/(y_steps_taken+1));
 800282c:	69b8      	ldr	r0, [r7, #24]
 800282e:	f7fd fd4b 	bl	80002c8 <__aeabi_ui2f>
 8002832:	4604      	mov	r4, r0
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3301      	adds	r3, #1
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fd45 	bl	80002c8 <__aeabi_ui2f>
 800283e:	4603      	mov	r3, r0
 8002840:	4619      	mov	r1, r3
 8002842:	4620      	mov	r0, r4
 8002844:	f7fd fe4c 	bl	80004e0 <__aeabi_fdiv>
 8002848:	4603      	mov	r3, r0
 800284a:	613b      	str	r3, [r7, #16]

				if( (next_slope>=slope ) && (y_steps_taken<y) && IfMovingAwayFromSwitch(diry, sw13bitMSK, sw23bitMSK))
 800284c:	69f9      	ldr	r1, [r7, #28]
 800284e:	6938      	ldr	r0, [r7, #16]
 8002850:	f7fd ff44 	bl	80006dc <__aeabi_fcmpge>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d022      	beq.n	80028a0 <stepxyz25D+0x140>
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	d21e      	bcs.n	80028a0 <stepxyz25D+0x140>
 8002862:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d106      	bne.n	800287a <stepxyz25D+0x11a>
 800286c:	4b76      	ldr	r3, [pc, #472]	@ (8002a48 <stepxyz25D+0x2e8>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b04      	cmp	r3, #4
 8002878:	d10a      	bne.n	8002890 <stepxyz25D+0x130>
 800287a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10e      	bne.n	80028a0 <stepxyz25D+0x140>
 8002882:	4b71      	ldr	r3, [pc, #452]	@ (8002a48 <stepxyz25D+0x2e8>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b08      	cmp	r3, #8
 800288e:	d007      	beq.n	80028a0 <stepxyz25D+0x140>
				{
					LL_GPIO_SetOutputPin(STCK_3_GPIO_Port, STCK_3_Pin);//motor steps on rising edge
 8002890:	f240 4104 	movw	r1, #1028	@ 0x404
 8002894:	486b      	ldr	r0, [pc, #428]	@ (8002a44 <stepxyz25D+0x2e4>)
 8002896:	f7ff fae1 	bl	8001e5c <LL_GPIO_SetOutputPin>
					y_steps_taken++;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
				}
			}
			stepdelay(currentpos);
 80028a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80028a2:	f000 f8d3 	bl	8002a4c <stepdelay>
			LL_GPIO_ResetOutputPin(STCK_1_GPIO_Port, STCK_1_Pin);
 80028a6:	f240 1101 	movw	r1, #257	@ 0x101
 80028aa:	4866      	ldr	r0, [pc, #408]	@ (8002a44 <stepxyz25D+0x2e4>)
 80028ac:	f7ff fae5 	bl	8001e7a <LL_GPIO_ResetOutputPin>
			LL_GPIO_ResetOutputPin(STCK_3_GPIO_Port, STCK_3_Pin);
 80028b0:	f240 4104 	movw	r1, #1028	@ 0x404
 80028b4:	4863      	ldr	r0, [pc, #396]	@ (8002a44 <stepxyz25D+0x2e4>)
 80028b6:	f7ff fae0 	bl	8001e7a <LL_GPIO_ResetOutputPin>
			stepdelay(currentpos);
 80028ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80028bc:	f000 f8c6 	bl	8002a4c <stepdelay>
		while(  (x_steps_taken<x) && IfMovingAwayFromSwitch(dirx, sw11bitMSK, sw21bitMSK) )//ha nem a bedőlt limit switch felé megy akkor csinálhat steppet
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	f080 80a4 	bcs.w	8002a12 <stepxyz25D+0x2b2>
 80028ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d106      	bne.n	80028e2 <stepxyz25D+0x182>
 80028d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002a48 <stepxyz25D+0x2e8>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d194      	bne.n	800280c <stepxyz25D+0xac>
 80028e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	f040 8093 	bne.w	8002a12 <stepxyz25D+0x2b2>
 80028ec:	4b56      	ldr	r3, [pc, #344]	@ (8002a48 <stepxyz25D+0x2e8>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d188      	bne.n	800280c <stepxyz25D+0xac>
 80028fa:	e08a      	b.n	8002a12 <stepxyz25D+0x2b2>
		}
	}
	else
	{
		if(x==0)	{ slope=0;}
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d103      	bne.n	800290a <stepxyz25D+0x1aa>
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	e068      	b.n	80029dc <stepxyz25D+0x27c>
		else{ slope = fabs((float)y/x);}
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fd fcdc 	bl	80002c8 <__aeabi_ui2f>
 8002910:	4604      	mov	r4, r0
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7fd fcd8 	bl	80002c8 <__aeabi_ui2f>
 8002918:	4603      	mov	r3, r0
 800291a:	4619      	mov	r1, r3
 800291c:	4620      	mov	r0, r4
 800291e:	f7fd fddf 	bl	80004e0 <__aeabi_fdiv>
 8002922:	4603      	mov	r3, r0
 8002924:	61fb      	str	r3, [r7, #28]

		while( (y_steps_taken<y) && IfMovingAwayFromSwitch(diry, sw13bitMSK, sw23bitMSK) )//ha nem a bedőlt limit switch felé megy akkor csinálhat steppet
 8002926:	e059      	b.n	80029dc <stepxyz25D+0x27c>
		{
			LL_GPIO_SetOutputPin(STCK_3_GPIO_Port, STCK_3_Pin);//motor steps on rising edge
 8002928:	f240 4104 	movw	r1, #1028	@ 0x404
 800292c:	4845      	ldr	r0, [pc, #276]	@ (8002a44 <stepxyz25D+0x2e4>)
 800292e:	f7ff fa95 	bl	8001e5c <LL_GPIO_SetOutputPin>
			y_steps_taken++;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3301      	adds	r3, #1
 8002936:	617b      	str	r3, [r7, #20]

			if(slope != 0)
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	69f8      	ldr	r0, [r7, #28]
 800293e:	f7fd feaf 	bl	80006a0 <__aeabi_fcmpeq>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d139      	bne.n	80029bc <stepxyz25D+0x25c>
			{
				next_slope = ((float)y_steps_taken/(x_steps_taken+1));
 8002948:	6978      	ldr	r0, [r7, #20]
 800294a:	f7fd fcbd 	bl	80002c8 <__aeabi_ui2f>
 800294e:	4604      	mov	r4, r0
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	3301      	adds	r3, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fcb7 	bl	80002c8 <__aeabi_ui2f>
 800295a:	4603      	mov	r3, r0
 800295c:	4619      	mov	r1, r3
 800295e:	4620      	mov	r0, r4
 8002960:	f7fd fdbe 	bl	80004e0 <__aeabi_fdiv>
 8002964:	4603      	mov	r3, r0
 8002966:	613b      	str	r3, [r7, #16]

				if( (next_slope>=slope ) && (x_steps_taken<x) && IfMovingAwayFromSwitch(dirx, sw11bitMSK, sw21bitMSK))
 8002968:	69f9      	ldr	r1, [r7, #28]
 800296a:	6938      	ldr	r0, [r7, #16]
 800296c:	f7fd feb6 	bl	80006dc <__aeabi_fcmpge>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d022      	beq.n	80029bc <stepxyz25D+0x25c>
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	429a      	cmp	r2, r3
 800297c:	d21e      	bcs.n	80029bc <stepxyz25D+0x25c>
 800297e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002986:	d106      	bne.n	8002996 <stepxyz25D+0x236>
 8002988:	4b2f      	ldr	r3, [pc, #188]	@ (8002a48 <stepxyz25D+0x2e8>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b01      	cmp	r3, #1
 8002994:	d10a      	bne.n	80029ac <stepxyz25D+0x24c>
 8002996:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d10e      	bne.n	80029bc <stepxyz25D+0x25c>
 800299e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a48 <stepxyz25D+0x2e8>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d007      	beq.n	80029bc <stepxyz25D+0x25c>
				{
					LL_GPIO_SetOutputPin(STCK_1_GPIO_Port, STCK_1_Pin);//motor steps on rising edge
 80029ac:	f240 1101 	movw	r1, #257	@ 0x101
 80029b0:	4824      	ldr	r0, [pc, #144]	@ (8002a44 <stepxyz25D+0x2e4>)
 80029b2:	f7ff fa53 	bl	8001e5c <LL_GPIO_SetOutputPin>
					x_steps_taken++;
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61bb      	str	r3, [r7, #24]
				}
			}
			stepdelay(currentpos);
 80029bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80029be:	f000 f845 	bl	8002a4c <stepdelay>
			LL_GPIO_ResetOutputPin(STCK_1_GPIO_Port, STCK_1_Pin);
 80029c2:	f240 1101 	movw	r1, #257	@ 0x101
 80029c6:	481f      	ldr	r0, [pc, #124]	@ (8002a44 <stepxyz25D+0x2e4>)
 80029c8:	f7ff fa57 	bl	8001e7a <LL_GPIO_ResetOutputPin>
			LL_GPIO_ResetOutputPin(STCK_3_GPIO_Port, STCK_3_Pin);
 80029cc:	f240 4104 	movw	r1, #1028	@ 0x404
 80029d0:	481c      	ldr	r0, [pc, #112]	@ (8002a44 <stepxyz25D+0x2e4>)
 80029d2:	f7ff fa52 	bl	8001e7a <LL_GPIO_ResetOutputPin>
			stepdelay(currentpos);
 80029d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80029d8:	f000 f838 	bl	8002a4c <stepdelay>
		while( (y_steps_taken<y) && IfMovingAwayFromSwitch(diry, sw13bitMSK, sw23bitMSK) )//ha nem a bedőlt limit switch felé megy akkor csinálhat steppet
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d216      	bcs.n	8002a12 <stepxyz25D+0x2b2>
 80029e4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d106      	bne.n	80029fc <stepxyz25D+0x29c>
 80029ee:	4b16      	ldr	r3, [pc, #88]	@ (8002a48 <stepxyz25D+0x2e8>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d195      	bne.n	8002928 <stepxyz25D+0x1c8>
 80029fc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d106      	bne.n	8002a12 <stepxyz25D+0x2b2>
 8002a04:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <stepxyz25D+0x2e8>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d18a      	bne.n	8002928 <stepxyz25D+0x1c8>
		}
	}

	currentpos->current_pos_x += (x_steps_taken*dirx);
 8002a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002a1a:	69b9      	ldr	r1, [r7, #24]
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	441a      	add	r2, r3
 8002a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a24:	601a      	str	r2, [r3, #0]
	currentpos->current_pos_y += (y_steps_taken*diry);
 8002a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002a2e:	6979      	ldr	r1, [r7, #20]
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	441a      	add	r2, r3
 8002a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a38:	605a      	str	r2, [r3, #4]
}
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	@ 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd90      	pop	{r4, r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40010800 	.word	0x40010800
 8002a48:	200002bb 	.word	0x200002bb

08002a4c <stepdelay>:

void stepdelay(CP* currentpos)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	switch(currentpos->curr_state & (FeedMove|RapidMove))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	8a5b      	ldrh	r3, [r3, #18]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d002      	beq.n	8002a66 <stepdelay+0x1a>
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d005      	beq.n	8002a70 <stepdelay+0x24>
 8002a64:	e085      	b.n	8002b72 <stepdelay+0x126>
	{
		case RapidMove:		usDelay(800);
 8002a66:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002a6a:	f7ff f9a7 	bl	8001dbc <usDelay>
							break;
 8002a6e:	e085      	b.n	8002b7c <stepdelay+0x130>

		case FeedMove:		switch(currentpos->movespeed)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7c1b      	ldrb	r3, [r3, #16]
 8002a74:	2b80      	cmp	r3, #128	@ 0x80
 8002a76:	d071      	beq.n	8002b5c <stepdelay+0x110>
 8002a78:	2b80      	cmp	r3, #128	@ 0x80
 8002a7a:	dc74      	bgt.n	8002b66 <stepdelay+0x11a>
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	dc47      	bgt.n	8002b10 <stepdelay+0xc4>
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	dd70      	ble.n	8002b66 <stepdelay+0x11a>
 8002a84:	3b01      	subs	r3, #1
 8002a86:	2b1f      	cmp	r3, #31
 8002a88:	d86d      	bhi.n	8002b66 <stepdelay+0x11a>
 8002a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <stepdelay+0x44>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002b17 	.word	0x08002b17
 8002a94:	08002b21 	.word	0x08002b21
 8002a98:	08002b67 	.word	0x08002b67
 8002a9c:	08002b2b 	.word	0x08002b2b
 8002aa0:	08002b67 	.word	0x08002b67
 8002aa4:	08002b67 	.word	0x08002b67
 8002aa8:	08002b67 	.word	0x08002b67
 8002aac:	08002b35 	.word	0x08002b35
 8002ab0:	08002b67 	.word	0x08002b67
 8002ab4:	08002b67 	.word	0x08002b67
 8002ab8:	08002b67 	.word	0x08002b67
 8002abc:	08002b67 	.word	0x08002b67
 8002ac0:	08002b67 	.word	0x08002b67
 8002ac4:	08002b67 	.word	0x08002b67
 8002ac8:	08002b67 	.word	0x08002b67
 8002acc:	08002b3f 	.word	0x08002b3f
 8002ad0:	08002b67 	.word	0x08002b67
 8002ad4:	08002b67 	.word	0x08002b67
 8002ad8:	08002b67 	.word	0x08002b67
 8002adc:	08002b67 	.word	0x08002b67
 8002ae0:	08002b67 	.word	0x08002b67
 8002ae4:	08002b67 	.word	0x08002b67
 8002ae8:	08002b67 	.word	0x08002b67
 8002aec:	08002b67 	.word	0x08002b67
 8002af0:	08002b67 	.word	0x08002b67
 8002af4:	08002b67 	.word	0x08002b67
 8002af8:	08002b67 	.word	0x08002b67
 8002afc:	08002b67 	.word	0x08002b67
 8002b00:	08002b67 	.word	0x08002b67
 8002b04:	08002b67 	.word	0x08002b67
 8002b08:	08002b67 	.word	0x08002b67
 8002b0c:	08002b49 	.word	0x08002b49
 8002b10:	2b40      	cmp	r3, #64	@ 0x40
 8002b12:	d01e      	beq.n	8002b52 <stepdelay+0x106>
 8002b14:	e027      	b.n	8002b66 <stepdelay+0x11a>
							{
								case toolspeed_0:	usDelay(3000);
 8002b16:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002b1a:	f7ff f94f 	bl	8001dbc <usDelay>
													break;
 8002b1e:	e027      	b.n	8002b70 <stepdelay+0x124>
								case toolspeed_1:	usDelay(2000);
 8002b20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b24:	f7ff f94a 	bl	8001dbc <usDelay>
													break;
 8002b28:	e022      	b.n	8002b70 <stepdelay+0x124>
								case toolspeed_2:	usDelay(1600);
 8002b2a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8002b2e:	f7ff f945 	bl	8001dbc <usDelay>
													break;
 8002b32:	e01d      	b.n	8002b70 <stepdelay+0x124>
								case toolspeed_3:	usDelay(1200);
 8002b34:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8002b38:	f7ff f940 	bl	8001dbc <usDelay>
													break;
 8002b3c:	e018      	b.n	8002b70 <stepdelay+0x124>
								case toolspeed_4:	usDelay(1000);
 8002b3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b42:	f7ff f93b 	bl	8001dbc <usDelay>
													break;
 8002b46:	e013      	b.n	8002b70 <stepdelay+0x124>
								case toolspeed_5:	usDelay(800);
 8002b48:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002b4c:	f7ff f936 	bl	8001dbc <usDelay>
													break;
 8002b50:	e00e      	b.n	8002b70 <stepdelay+0x124>
								case toolspeed_6:	usDelay(750);
 8002b52:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002b56:	f7ff f931 	bl	8001dbc <usDelay>
													break;
 8002b5a:	e009      	b.n	8002b70 <stepdelay+0x124>
								case toolspeed_7:	usDelay(650);
 8002b5c:	f240 208a 	movw	r0, #650	@ 0x28a
 8002b60:	f7ff f92c 	bl	8001dbc <usDelay>
													break;
 8002b64:	e004      	b.n	8002b70 <stepdelay+0x124>
								default:			usDelay(650);
 8002b66:	f240 208a 	movw	r0, #650	@ 0x28a
 8002b6a:	f7ff f927 	bl	8001dbc <usDelay>
													break;
 8002b6e:	bf00      	nop
							}
							break;
 8002b70:	e004      	b.n	8002b7c <stepdelay+0x130>

		default:	usDelay(800);
 8002b72:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002b76:	f7ff f921 	bl	8001dbc <usDelay>
					break;
 8002b7a:	bf00      	nop
	}
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <STSPIN220_power_down>:
	}
}
*/

void STSPIN220_power_down(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(STBY_RESET_ALL_GPIO_Port, STBY_RESET_ALL_Pin);
 8002b88:	f640 0108 	movw	r1, #2056	@ 0x808
 8002b8c:	4809      	ldr	r0, [pc, #36]	@ (8002bb4 <STSPIN220_power_down+0x30>)
 8002b8e:	f7ff f974 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(EN_FAULT_1_GPIO_Port, EN_FAULT_1_Pin);
 8002b92:	f240 1101 	movw	r1, #257	@ 0x101
 8002b96:	4807      	ldr	r0, [pc, #28]	@ (8002bb4 <STSPIN220_power_down+0x30>)
 8002b98:	f7ff f96f 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(EN_FAULT_3_GPIO_Port, EN_FAULT_3_Pin);
 8002b9c:	f240 4104 	movw	r1, #1028	@ 0x404
 8002ba0:	4804      	ldr	r0, [pc, #16]	@ (8002bb4 <STSPIN220_power_down+0x30>)
 8002ba2:	f7ff f96a 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(EN_FAULT_4_GPIO_Port, EN_FAULT_4_Pin);
 8002ba6:	4904      	ldr	r1, [pc, #16]	@ (8002bb8 <STSPIN220_power_down+0x34>)
 8002ba8:	4804      	ldr	r0, [pc, #16]	@ (8002bbc <STSPIN220_power_down+0x38>)
 8002baa:	f7ff f966 	bl	8001e7a <LL_GPIO_ResetOutputPin>
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40010c00 	.word	0x40010c00
 8002bb8:	04040004 	.word	0x04040004
 8002bbc:	40010800 	.word	0x40010800

08002bc0 <STSPIN220_init>:

void STSPIN220_init(CP *currentpos, uint16_t stepsizeX, uint16_t stepsizeY, uint16_t stepsizeZ)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	4608      	mov	r0, r1
 8002bca:	4611      	mov	r1, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	817b      	strh	r3, [r7, #10]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	813b      	strh	r3, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]

	LL_GPIO_ResetOutputPin(STBY_RESET_ALL_GPIO_Port, STBY_RESET_ALL_Pin);
 8002bda:	f640 0108 	movw	r1, #2056	@ 0x808
 8002bde:	48a0      	ldr	r0, [pc, #640]	@ (8002e60 <STSPIN220_init+0x2a0>)
 8002be0:	f7ff f94b 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(EN_FAULT_1_GPIO_Port, EN_FAULT_1_Pin);
 8002be4:	f240 1101 	movw	r1, #257	@ 0x101
 8002be8:	489d      	ldr	r0, [pc, #628]	@ (8002e60 <STSPIN220_init+0x2a0>)
 8002bea:	f7ff f946 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(EN_FAULT_3_GPIO_Port, EN_FAULT_3_Pin);
 8002bee:	f240 4104 	movw	r1, #1028	@ 0x404
 8002bf2:	489b      	ldr	r0, [pc, #620]	@ (8002e60 <STSPIN220_init+0x2a0>)
 8002bf4:	f7ff f941 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(EN_FAULT_4_GPIO_Port, EN_FAULT_4_Pin);
 8002bf8:	499a      	ldr	r1, [pc, #616]	@ (8002e64 <STSPIN220_init+0x2a4>)
 8002bfa:	489b      	ldr	r0, [pc, #620]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002bfc:	f7ff f93d 	bl	8001e7a <LL_GPIO_ResetOutputPin>

	currentpos->curr_state &= ~(stepsizeX1_0 | stepsizeX1_2 | stepsizeX1_4 | stepsizeX1_8 | stepsizeY1_0 | stepsizeY1_2 | stepsizeY1_4 | stepsizeY1_8 | stepsizeZ1_0 | stepsizeZ1_2 | stepsizeZ1_4 | stepsizeZ1_8);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8a5b      	ldrh	r3, [r3, #18]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	825a      	strh	r2, [r3, #18]

	switch(stepsizeX)
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	2b80      	cmp	r3, #128	@ 0x80
 8002c12:	d058      	beq.n	8002cc6 <STSPIN220_init+0x106>
 8002c14:	2b80      	cmp	r3, #128	@ 0x80
 8002c16:	dc70      	bgt.n	8002cfa <STSPIN220_init+0x13a>
 8002c18:	2b40      	cmp	r3, #64	@ 0x40
 8002c1a:	d03a      	beq.n	8002c92 <STSPIN220_init+0xd2>
 8002c1c:	2b40      	cmp	r3, #64	@ 0x40
 8002c1e:	dc6c      	bgt.n	8002cfa <STSPIN220_init+0x13a>
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d002      	beq.n	8002c2a <STSPIN220_init+0x6a>
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d01a      	beq.n	8002c5e <STSPIN220_init+0x9e>
							LL_GPIO_SetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);

							currentpos->curr_state |= stepsizeX1_8;
							break;

		default:	break;
 8002c28:	e067      	b.n	8002cfa <STSPIN220_init+0x13a>
							LL_GPIO_ResetOutputPin(MODE1_1_GPIO_Port, MODE1_1_Pin);
 8002c2a:	4990      	ldr	r1, [pc, #576]	@ (8002e6c <STSPIN220_init+0x2ac>)
 8002c2c:	4890      	ldr	r0, [pc, #576]	@ (8002e70 <STSPIN220_init+0x2b0>)
 8002c2e:	f7ff f924 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_ResetOutputPin(MODE2_1_GPIO_Port, MODE2_1_Pin);
 8002c32:	4990      	ldr	r1, [pc, #576]	@ (8002e74 <STSPIN220_init+0x2b4>)
 8002c34:	488e      	ldr	r0, [pc, #568]	@ (8002e70 <STSPIN220_init+0x2b0>)
 8002c36:	f7ff f920 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_ResetOutputPin(STCK_1_GPIO_Port, STCK_1_Pin);
 8002c3a:	f240 1101 	movw	r1, #257	@ 0x101
 8002c3e:	488a      	ldr	r0, [pc, #552]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002c40:	f7ff f91b 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_ResetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);
 8002c44:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002c48:	4887      	ldr	r0, [pc, #540]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002c4a:	f7ff f916 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							currentpos->curr_state |= stepsizeX1_0;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8a5b      	ldrh	r3, [r3, #18]
 8002c52:	f043 0310 	orr.w	r3, r3, #16
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	825a      	strh	r2, [r3, #18]
							break;
 8002c5c:	e04e      	b.n	8002cfc <STSPIN220_init+0x13c>
							LL_GPIO_SetOutputPin(MODE1_1_GPIO_Port, MODE1_1_Pin);
 8002c5e:	4983      	ldr	r1, [pc, #524]	@ (8002e6c <STSPIN220_init+0x2ac>)
 8002c60:	4883      	ldr	r0, [pc, #524]	@ (8002e70 <STSPIN220_init+0x2b0>)
 8002c62:	f7ff f8fb 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(MODE2_1_GPIO_Port, MODE2_1_Pin);
 8002c66:	4983      	ldr	r1, [pc, #524]	@ (8002e74 <STSPIN220_init+0x2b4>)
 8002c68:	4881      	ldr	r0, [pc, #516]	@ (8002e70 <STSPIN220_init+0x2b0>)
 8002c6a:	f7ff f906 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(STCK_1_GPIO_Port, STCK_1_Pin);
 8002c6e:	f240 1101 	movw	r1, #257	@ 0x101
 8002c72:	487d      	ldr	r0, [pc, #500]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002c74:	f7ff f8f2 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);
 8002c78:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002c7c:	487a      	ldr	r0, [pc, #488]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002c7e:	f7ff f8fc 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							currentpos->curr_state |= stepsizeX1_2;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8a5b      	ldrh	r3, [r3, #18]
 8002c86:	f043 0320 	orr.w	r3, r3, #32
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	825a      	strh	r2, [r3, #18]
							break;
 8002c90:	e034      	b.n	8002cfc <STSPIN220_init+0x13c>
							LL_GPIO_ResetOutputPin(MODE1_1_GPIO_Port, MODE1_1_Pin);
 8002c92:	4976      	ldr	r1, [pc, #472]	@ (8002e6c <STSPIN220_init+0x2ac>)
 8002c94:	4876      	ldr	r0, [pc, #472]	@ (8002e70 <STSPIN220_init+0x2b0>)
 8002c96:	f7ff f8f0 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(MODE2_1_GPIO_Port, MODE2_1_Pin);
 8002c9a:	4976      	ldr	r1, [pc, #472]	@ (8002e74 <STSPIN220_init+0x2b4>)
 8002c9c:	4874      	ldr	r0, [pc, #464]	@ (8002e70 <STSPIN220_init+0x2b0>)
 8002c9e:	f7ff f8dd 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(STCK_1_GPIO_Port, STCK_1_Pin);
 8002ca2:	f240 1101 	movw	r1, #257	@ 0x101
 8002ca6:	4870      	ldr	r0, [pc, #448]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002ca8:	f7ff f8e7 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);
 8002cac:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002cb0:	486d      	ldr	r0, [pc, #436]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002cb2:	f7ff f8d3 	bl	8001e5c <LL_GPIO_SetOutputPin>
							currentpos->curr_state |= stepsizeX1_4;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8a5b      	ldrh	r3, [r3, #18]
 8002cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	825a      	strh	r2, [r3, #18]
							break;
 8002cc4:	e01a      	b.n	8002cfc <STSPIN220_init+0x13c>
							LL_GPIO_SetOutputPin(MODE1_1_GPIO_Port, MODE1_1_Pin);
 8002cc6:	4969      	ldr	r1, [pc, #420]	@ (8002e6c <STSPIN220_init+0x2ac>)
 8002cc8:	4869      	ldr	r0, [pc, #420]	@ (8002e70 <STSPIN220_init+0x2b0>)
 8002cca:	f7ff f8c7 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(MODE2_1_GPIO_Port, MODE2_1_Pin);
 8002cce:	4969      	ldr	r1, [pc, #420]	@ (8002e74 <STSPIN220_init+0x2b4>)
 8002cd0:	4867      	ldr	r0, [pc, #412]	@ (8002e70 <STSPIN220_init+0x2b0>)
 8002cd2:	f7ff f8d2 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(STCK_1_GPIO_Port, STCK_1_Pin);
 8002cd6:	f240 1101 	movw	r1, #257	@ 0x101
 8002cda:	4863      	ldr	r0, [pc, #396]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002cdc:	f7ff f8be 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_SetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);
 8002ce0:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002ce4:	4860      	ldr	r0, [pc, #384]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002ce6:	f7ff f8b9 	bl	8001e5c <LL_GPIO_SetOutputPin>
							currentpos->curr_state |= stepsizeX1_8;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8a5b      	ldrh	r3, [r3, #18]
 8002cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	825a      	strh	r2, [r3, #18]
							break;
 8002cf8:	e000      	b.n	8002cfc <STSPIN220_init+0x13c>
		default:	break;
 8002cfa:	bf00      	nop
	}



	switch(stepsizeY)
 8002cfc:	893b      	ldrh	r3, [r7, #8]
 8002cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d02:	d060      	beq.n	8002dc6 <STSPIN220_init+0x206>
 8002d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d08:	dc78      	bgt.n	8002dfc <STSPIN220_init+0x23c>
 8002d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d0e:	d03f      	beq.n	8002d90 <STSPIN220_init+0x1d0>
 8002d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d14:	dc72      	bgt.n	8002dfc <STSPIN220_init+0x23c>
 8002d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d1a:	d003      	beq.n	8002d24 <STSPIN220_init+0x164>
 8002d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d20:	d01b      	beq.n	8002d5a <STSPIN220_init+0x19a>
							LL_GPIO_SetOutputPin(DIR_3_GPIO_Port, DIR_3_Pin);

							currentpos->curr_state |= stepsizeY1_8;
							break;

		default:	break;
 8002d22:	e06b      	b.n	8002dfc <STSPIN220_init+0x23c>
		case stepsizeY1_0:	LL_GPIO_ResetOutputPin(MODE1_3_GPIO_Port, MODE1_3_Pin);
 8002d24:	f240 2102 	movw	r1, #514	@ 0x202
 8002d28:	484d      	ldr	r0, [pc, #308]	@ (8002e60 <STSPIN220_init+0x2a0>)
 8002d2a:	f7ff f8a6 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_ResetOutputPin(MODE2_3_GPIO_Port, MODE2_3_Pin);
 8002d2e:	4952      	ldr	r1, [pc, #328]	@ (8002e78 <STSPIN220_init+0x2b8>)
 8002d30:	484d      	ldr	r0, [pc, #308]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002d32:	f7ff f8a2 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_ResetOutputPin(STCK_3_GPIO_Port, STCK_3_Pin);
 8002d36:	f240 4104 	movw	r1, #1028	@ 0x404
 8002d3a:	484b      	ldr	r0, [pc, #300]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002d3c:	f7ff f89d 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_ResetOutputPin(DIR_3_GPIO_Port, DIR_3_Pin);
 8002d40:	f244 0140 	movw	r1, #16448	@ 0x4040
 8002d44:	4848      	ldr	r0, [pc, #288]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002d46:	f7ff f898 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							currentpos->curr_state |= stepsizeY1_0;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8a5b      	ldrh	r3, [r3, #18]
 8002d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	825a      	strh	r2, [r3, #18]
							break;
 8002d58:	e051      	b.n	8002dfe <STSPIN220_init+0x23e>
		case stepsizeY1_2:	LL_GPIO_SetOutputPin(MODE1_3_GPIO_Port, MODE1_3_Pin);
 8002d5a:	f240 2102 	movw	r1, #514	@ 0x202
 8002d5e:	4840      	ldr	r0, [pc, #256]	@ (8002e60 <STSPIN220_init+0x2a0>)
 8002d60:	f7ff f87c 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(MODE2_3_GPIO_Port, MODE2_3_Pin);
 8002d64:	4944      	ldr	r1, [pc, #272]	@ (8002e78 <STSPIN220_init+0x2b8>)
 8002d66:	4840      	ldr	r0, [pc, #256]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002d68:	f7ff f887 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(STCK_3_GPIO_Port, STCK_3_Pin);
 8002d6c:	f240 4104 	movw	r1, #1028	@ 0x404
 8002d70:	483d      	ldr	r0, [pc, #244]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002d72:	f7ff f873 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(DIR_3_GPIO_Port, DIR_3_Pin);
 8002d76:	f244 0140 	movw	r1, #16448	@ 0x4040
 8002d7a:	483b      	ldr	r0, [pc, #236]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002d7c:	f7ff f87d 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							currentpos->curr_state |= stepsizeY1_2;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8a5b      	ldrh	r3, [r3, #18]
 8002d84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	825a      	strh	r2, [r3, #18]
							break;
 8002d8e:	e036      	b.n	8002dfe <STSPIN220_init+0x23e>
		case stepsizeY1_4:	LL_GPIO_ResetOutputPin(MODE1_3_GPIO_Port, MODE1_3_Pin);
 8002d90:	f240 2102 	movw	r1, #514	@ 0x202
 8002d94:	4832      	ldr	r0, [pc, #200]	@ (8002e60 <STSPIN220_init+0x2a0>)
 8002d96:	f7ff f870 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(MODE2_3_GPIO_Port, MODE2_3_Pin);
 8002d9a:	4937      	ldr	r1, [pc, #220]	@ (8002e78 <STSPIN220_init+0x2b8>)
 8002d9c:	4832      	ldr	r0, [pc, #200]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002d9e:	f7ff f85d 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(STCK_3_GPIO_Port, STCK_3_Pin);
 8002da2:	f240 4104 	movw	r1, #1028	@ 0x404
 8002da6:	4830      	ldr	r0, [pc, #192]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002da8:	f7ff f867 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(DIR_3_GPIO_Port, DIR_3_Pin);
 8002dac:	f244 0140 	movw	r1, #16448	@ 0x4040
 8002db0:	482d      	ldr	r0, [pc, #180]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002db2:	f7ff f853 	bl	8001e5c <LL_GPIO_SetOutputPin>
							currentpos->curr_state |= stepsizeY1_4;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8a5b      	ldrh	r3, [r3, #18]
 8002dba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	825a      	strh	r2, [r3, #18]
							break;
 8002dc4:	e01b      	b.n	8002dfe <STSPIN220_init+0x23e>
		case stepsizeY1_8:	LL_GPIO_SetOutputPin(MODE1_3_GPIO_Port, MODE1_3_Pin);
 8002dc6:	f240 2102 	movw	r1, #514	@ 0x202
 8002dca:	4825      	ldr	r0, [pc, #148]	@ (8002e60 <STSPIN220_init+0x2a0>)
 8002dcc:	f7ff f846 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(MODE2_3_GPIO_Port, MODE2_3_Pin);
 8002dd0:	4929      	ldr	r1, [pc, #164]	@ (8002e78 <STSPIN220_init+0x2b8>)
 8002dd2:	4825      	ldr	r0, [pc, #148]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002dd4:	f7ff f851 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(STCK_3_GPIO_Port, STCK_3_Pin);
 8002dd8:	f240 4104 	movw	r1, #1028	@ 0x404
 8002ddc:	4822      	ldr	r0, [pc, #136]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002dde:	f7ff f83d 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_SetOutputPin(DIR_3_GPIO_Port, DIR_3_Pin);
 8002de2:	f244 0140 	movw	r1, #16448	@ 0x4040
 8002de6:	4820      	ldr	r0, [pc, #128]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002de8:	f7ff f838 	bl	8001e5c <LL_GPIO_SetOutputPin>
							currentpos->curr_state |= stepsizeY1_8;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8a5b      	ldrh	r3, [r3, #18]
 8002df0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	825a      	strh	r2, [r3, #18]
							break;
 8002dfa:	e000      	b.n	8002dfe <STSPIN220_init+0x23e>
		default:	break;
 8002dfc:	bf00      	nop
	}

	switch(stepsizeZ)
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e04:	d072      	beq.n	8002eec <STSPIN220_init+0x32c>
 8002e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e0a:	f300 808b 	bgt.w	8002f24 <STSPIN220_init+0x364>
 8002e0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e12:	d051      	beq.n	8002eb8 <STSPIN220_init+0x2f8>
 8002e14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e18:	f300 8084 	bgt.w	8002f24 <STSPIN220_init+0x364>
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e20:	d003      	beq.n	8002e2a <STSPIN220_init+0x26a>
 8002e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e26:	d02d      	beq.n	8002e84 <STSPIN220_init+0x2c4>
							LL_GPIO_SetOutputPin(DIR_4_GPIO_Port, DIR_4_Pin);

							currentpos->curr_state |= stepsizeZ1_8;
							break;

		default:	break;
 8002e28:	e07c      	b.n	8002f24 <STSPIN220_init+0x364>
		case stepsizeZ1_0:	LL_GPIO_ResetOutputPin(MODE1_4_GPIO_Port, MODE1_4_Pin);
 8002e2a:	4914      	ldr	r1, [pc, #80]	@ (8002e7c <STSPIN220_init+0x2bc>)
 8002e2c:	480e      	ldr	r0, [pc, #56]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002e2e:	f7ff f824 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_ResetOutputPin(MODE2_4_GPIO_Port, MODE2_4_Pin);
 8002e32:	4913      	ldr	r1, [pc, #76]	@ (8002e80 <STSPIN220_init+0x2c0>)
 8002e34:	480c      	ldr	r0, [pc, #48]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002e36:	f7ff f820 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_ResetOutputPin(STCK_4_GPIO_Port, STCK_4_Pin);
 8002e3a:	f640 0108 	movw	r1, #2056	@ 0x808
 8002e3e:	480a      	ldr	r0, [pc, #40]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002e40:	f7ff f81b 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_ResetOutputPin(DIR_4_GPIO_Port, DIR_4_Pin);
 8002e44:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002e48:	4807      	ldr	r0, [pc, #28]	@ (8002e68 <STSPIN220_init+0x2a8>)
 8002e4a:	f7ff f816 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							currentpos->curr_state |= stepsizeZ1_0;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8a5b      	ldrh	r3, [r3, #18]
 8002e52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	825a      	strh	r2, [r3, #18]
							break;
 8002e5c:	e063      	b.n	8002f26 <STSPIN220_init+0x366>
 8002e5e:	bf00      	nop
 8002e60:	40010c00 	.word	0x40010c00
 8002e64:	04040004 	.word	0x04040004
 8002e68:	40010800 	.word	0x40010800
 8002e6c:	04200020 	.word	0x04200020
 8002e70:	40011000 	.word	0x40011000
 8002e74:	04400040 	.word	0x04400040
 8002e78:	04800080 	.word	0x04800080
 8002e7c:	04010001 	.word	0x04010001
 8002e80:	04020002 	.word	0x04020002
		case stepsizeZ1_2:	LL_GPIO_SetOutputPin(MODE1_4_GPIO_Port, MODE1_4_Pin);
 8002e84:	4945      	ldr	r1, [pc, #276]	@ (8002f9c <STSPIN220_init+0x3dc>)
 8002e86:	4846      	ldr	r0, [pc, #280]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002e88:	f7fe ffe8 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(MODE2_4_GPIO_Port, MODE2_4_Pin);
 8002e8c:	4945      	ldr	r1, [pc, #276]	@ (8002fa4 <STSPIN220_init+0x3e4>)
 8002e8e:	4844      	ldr	r0, [pc, #272]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002e90:	f7fe fff3 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(STCK_4_GPIO_Port, STCK_4_Pin);
 8002e94:	f640 0108 	movw	r1, #2056	@ 0x808
 8002e98:	4841      	ldr	r0, [pc, #260]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002e9a:	f7fe ffdf 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(DIR_4_GPIO_Port, DIR_4_Pin);
 8002e9e:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002ea2:	483f      	ldr	r0, [pc, #252]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002ea4:	f7fe ffe9 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							currentpos->curr_state |= stepsizeZ1_2;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8a5b      	ldrh	r3, [r3, #18]
 8002eac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	825a      	strh	r2, [r3, #18]
							break;
 8002eb6:	e036      	b.n	8002f26 <STSPIN220_init+0x366>
		case stepsizeZ1_4:	LL_GPIO_ResetOutputPin(MODE1_4_GPIO_Port, MODE1_4_Pin);
 8002eb8:	4938      	ldr	r1, [pc, #224]	@ (8002f9c <STSPIN220_init+0x3dc>)
 8002eba:	4839      	ldr	r0, [pc, #228]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002ebc:	f7fe ffdd 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(MODE2_4_GPIO_Port, MODE2_4_Pin);
 8002ec0:	4938      	ldr	r1, [pc, #224]	@ (8002fa4 <STSPIN220_init+0x3e4>)
 8002ec2:	4837      	ldr	r0, [pc, #220]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002ec4:	f7fe ffca 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(STCK_4_GPIO_Port, STCK_4_Pin);
 8002ec8:	f640 0108 	movw	r1, #2056	@ 0x808
 8002ecc:	4834      	ldr	r0, [pc, #208]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002ece:	f7fe ffd4 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(DIR_4_GPIO_Port, DIR_4_Pin);
 8002ed2:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002ed6:	4832      	ldr	r0, [pc, #200]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002ed8:	f7fe ffc0 	bl	8001e5c <LL_GPIO_SetOutputPin>
							currentpos->curr_state |= stepsizeZ1_4;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8a5b      	ldrh	r3, [r3, #18]
 8002ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	825a      	strh	r2, [r3, #18]
							break;
 8002eea:	e01c      	b.n	8002f26 <STSPIN220_init+0x366>
		case stepsizeZ1_8:	LL_GPIO_SetOutputPin(MODE1_4_GPIO_Port, MODE1_4_Pin);
 8002eec:	492b      	ldr	r1, [pc, #172]	@ (8002f9c <STSPIN220_init+0x3dc>)
 8002eee:	482c      	ldr	r0, [pc, #176]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002ef0:	f7fe ffb4 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_ResetOutputPin(MODE2_4_GPIO_Port, MODE2_4_Pin);
 8002ef4:	492b      	ldr	r1, [pc, #172]	@ (8002fa4 <STSPIN220_init+0x3e4>)
 8002ef6:	482a      	ldr	r0, [pc, #168]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002ef8:	f7fe ffbf 	bl	8001e7a <LL_GPIO_ResetOutputPin>
							LL_GPIO_SetOutputPin(STCK_4_GPIO_Port, STCK_4_Pin);
 8002efc:	f640 0108 	movw	r1, #2056	@ 0x808
 8002f00:	4827      	ldr	r0, [pc, #156]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002f02:	f7fe ffab 	bl	8001e5c <LL_GPIO_SetOutputPin>
							LL_GPIO_SetOutputPin(DIR_4_GPIO_Port, DIR_4_Pin);
 8002f06:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002f0a:	4825      	ldr	r0, [pc, #148]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002f0c:	f7fe ffa6 	bl	8001e5c <LL_GPIO_SetOutputPin>
							currentpos->curr_state |= stepsizeZ1_8;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8a5b      	ldrh	r3, [r3, #18]
 8002f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	825a      	strh	r2, [r3, #18]
							break;
 8002f22:	e000      	b.n	8002f26 <STSPIN220_init+0x366>
		default:	break;
 8002f24:	bf00      	nop
	}


	LL_mDelay(1);//10
 8002f26:	2001      	movs	r0, #1
 8002f28:	f006 fd28 	bl	800997c <LL_mDelay>
	LL_GPIO_SetOutputPin(STBY_RESET_ALL_GPIO_Port, STBY_RESET_ALL_Pin);//get out of low consumption mode
 8002f2c:	f640 0108 	movw	r1, #2056	@ 0x808
 8002f30:	481d      	ldr	r0, [pc, #116]	@ (8002fa8 <STSPIN220_init+0x3e8>)
 8002f32:	f7fe ff93 	bl	8001e5c <LL_GPIO_SetOutputPin>
	LL_mDelay(1);//10
 8002f36:	2001      	movs	r0, #1
 8002f38:	f006 fd20 	bl	800997c <LL_mDelay>
	LL_GPIO_SetOutputPin(EN_FAULT_1_GPIO_Port, EN_FAULT_1_Pin);//EN drivers
 8002f3c:	f240 1101 	movw	r1, #257	@ 0x101
 8002f40:	4819      	ldr	r0, [pc, #100]	@ (8002fa8 <STSPIN220_init+0x3e8>)
 8002f42:	f7fe ff8b 	bl	8001e5c <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(EN_FAULT_3_GPIO_Port, EN_FAULT_3_Pin);//
 8002f46:	f240 4104 	movw	r1, #1028	@ 0x404
 8002f4a:	4817      	ldr	r0, [pc, #92]	@ (8002fa8 <STSPIN220_init+0x3e8>)
 8002f4c:	f7fe ff86 	bl	8001e5c <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(EN_FAULT_4_GPIO_Port, EN_FAULT_4_Pin);//
 8002f50:	4916      	ldr	r1, [pc, #88]	@ (8002fac <STSPIN220_init+0x3ec>)
 8002f52:	4813      	ldr	r0, [pc, #76]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002f54:	f7fe ff82 	bl	8001e5c <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(STCK_1_GPIO_Port, STCK_1_Pin);
 8002f58:	f240 1101 	movw	r1, #257	@ 0x101
 8002f5c:	4810      	ldr	r0, [pc, #64]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002f5e:	f7fe ff8c 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);
 8002f62:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002f66:	480e      	ldr	r0, [pc, #56]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002f68:	f7fe ff87 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(STCK_3_GPIO_Port, STCK_3_Pin);
 8002f6c:	f240 4104 	movw	r1, #1028	@ 0x404
 8002f70:	480b      	ldr	r0, [pc, #44]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002f72:	f7fe ff82 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(DIR_3_GPIO_Port, DIR_3_Pin);
 8002f76:	f244 0140 	movw	r1, #16448	@ 0x4040
 8002f7a:	4809      	ldr	r0, [pc, #36]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002f7c:	f7fe ff7d 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(STCK_4_GPIO_Port, STCK_4_Pin);
 8002f80:	f640 0108 	movw	r1, #2056	@ 0x808
 8002f84:	4806      	ldr	r0, [pc, #24]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002f86:	f7fe ff78 	bl	8001e7a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(DIR_4_GPIO_Port, DIR_4_Pin);
 8002f8a:	f248 0180 	movw	r1, #32896	@ 0x8080
 8002f8e:	4804      	ldr	r0, [pc, #16]	@ (8002fa0 <STSPIN220_init+0x3e0>)
 8002f90:	f7fe ff73 	bl	8001e7a <LL_GPIO_ResetOutputPin>
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	04010001 	.word	0x04010001
 8002fa0:	40010800 	.word	0x40010800
 8002fa4:	04020002 	.word	0x04020002
 8002fa8:	40010c00 	.word	0x40010c00
 8002fac:	04040004 	.word	0x04040004

08002fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb6:	4b15      	ldr	r3, [pc, #84]	@ (800300c <HAL_MspInit+0x5c>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	4a14      	ldr	r2, [pc, #80]	@ (800300c <HAL_MspInit+0x5c>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6193      	str	r3, [r2, #24]
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_MspInit+0x5c>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	4b0f      	ldr	r3, [pc, #60]	@ (800300c <HAL_MspInit+0x5c>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800300c <HAL_MspInit+0x5c>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd8:	61d3      	str	r3, [r2, #28]
 8002fda:	4b0c      	ldr	r3, [pc, #48]	@ (800300c <HAL_MspInit+0x5c>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <HAL_MspInit+0x60>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <HAL_MspInit+0x60>)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	40021000 	.word	0x40021000
 8003010:	40010000 	.word	0x40010000

08003014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a20      	ldr	r2, [pc, #128]	@ (80030b0 <HAL_SPI_MspInit+0x9c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d139      	bne.n	80030a8 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003034:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <HAL_SPI_MspInit+0xa0>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4a1e      	ldr	r2, [pc, #120]	@ (80030b4 <HAL_SPI_MspInit+0xa0>)
 800303a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800303e:	61d3      	str	r3, [r2, #28]
 8003040:	4b1c      	ldr	r3, [pc, #112]	@ (80030b4 <HAL_SPI_MspInit+0xa0>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304c:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <HAL_SPI_MspInit+0xa0>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4a18      	ldr	r2, [pc, #96]	@ (80030b4 <HAL_SPI_MspInit+0xa0>)
 8003052:	f043 0308 	orr.w	r3, r3, #8
 8003056:	6193      	str	r3, [r2, #24]
 8003058:	4b16      	ldr	r3, [pc, #88]	@ (80030b4 <HAL_SPI_MspInit+0xa0>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003064:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8003068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800306e:	2303      	movs	r3, #3
 8003070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003072:	f107 0310 	add.w	r3, r7, #16
 8003076:	4619      	mov	r1, r3
 8003078:	480f      	ldr	r0, [pc, #60]	@ (80030b8 <HAL_SPI_MspInit+0xa4>)
 800307a:	f000 fcc3 	bl	8003a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800307e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308c:	f107 0310 	add.w	r3, r7, #16
 8003090:	4619      	mov	r1, r3
 8003092:	4809      	ldr	r0, [pc, #36]	@ (80030b8 <HAL_SPI_MspInit+0xa4>)
 8003094:	f000 fcb6 	bl	8003a04 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003098:	2200      	movs	r2, #0
 800309a:	2100      	movs	r1, #0
 800309c:	2024      	movs	r0, #36	@ 0x24
 800309e:	f000 fc02 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80030a2:	2024      	movs	r0, #36	@ 0x24
 80030a4:	f000 fc1b 	bl	80038de <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80030a8:	bf00      	nop
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40003800 	.word	0x40003800
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40010c00 	.word	0x40010c00

080030bc <LL_TIM_DisableCounter>:
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 0201 	bic.w	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	601a      	str	r2, [r3, #0]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr

080030da <LL_TIM_CC_DisableChannel>:
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1a      	ldr	r2, [r3, #32]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	401a      	ands	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	621a      	str	r2, [r3, #32]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <LL_TIM_ClearFlag_CC1>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f06f 0202 	mvn.w	r2, #2
 800310a:	611a      	str	r2, [r3, #16]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <LL_TIM_IsActiveFlag_CC1>:
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d101      	bne.n	800312e <LL_TIM_IsActiveFlag_CC1+0x18>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <LL_TIM_IsActiveFlag_CC1+0x1a>
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <LL_GPIO_IsInputPinSet>:
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	43da      	mvns	r2, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	4013      	ands	r3, r2
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	bf0c      	ite	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	2300      	movne	r3, #0
 800315a:	b2db      	uxtb	r3, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
	...

08003168 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003170:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4013      	ands	r3, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	bf0c      	ite	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	2300      	movne	r3, #0
 8003182:	b2db      	uxtb	r3, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40010400 	.word	0x40010400

08003194 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800319c:	4a03      	ldr	r2, [pc, #12]	@ (80031ac <LL_EXTI_ClearFlag_0_31+0x18>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6153      	str	r3, [r2, #20]
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	40010400 	.word	0x40010400

080031b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <NMI_Handler+0x4>

080031b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <HardFault_Handler+0x4>

080031c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <MemManage_Handler+0x4>

080031c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <BusFault_Handler+0x4>

080031d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <UsageFault_Handler+0x4>

080031d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003200:	f000 fa5e 	bl	80036c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}

08003208 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 800320c:	2010      	movs	r0, #16
 800320e:	f7ff ffab 	bl	8003168 <LL_EXTI_IsActiveFlag_0_31>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01b      	beq.n	8003250 <EXTI4_IRQHandler+0x48>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8003218:	2010      	movs	r0, #16
 800321a:	f7ff ffbb 	bl	8003194 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
    if(LL_GPIO_IsInputPinSet(SW1_1_GPIO_Port, SW1_1_Pin))	{ switches |= sw11bitMSK;}
 800321e:	f241 0110 	movw	r1, #4112	@ 0x1010
 8003222:	480c      	ldr	r0, [pc, #48]	@ (8003254 <EXTI4_IRQHandler+0x4c>)
 8003224:	f7ff ff89 	bl	800313a <LL_GPIO_IsInputPinSet>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d008      	beq.n	8003240 <EXTI4_IRQHandler+0x38>
 800322e:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <EXTI4_IRQHandler+0x50>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <EXTI4_IRQHandler+0x50>)
 800323c:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800323e:	e007      	b.n	8003250 <EXTI4_IRQHandler+0x48>
    else{ switches &= ~sw11bitMSK;}
 8003240:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <EXTI4_IRQHandler+0x50>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	b2da      	uxtb	r2, r3
 800324c:	4b02      	ldr	r3, [pc, #8]	@ (8003258 <EXTI4_IRQHandler+0x50>)
 800324e:	701a      	strb	r2, [r3, #0]
}
 8003250:	bf00      	nop
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40010c00 	.word	0x40010c00
 8003258:	200002bb 	.word	0x200002bb

0800325c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003260:	4802      	ldr	r0, [pc, #8]	@ (800326c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8003262:	f000 fe78 	bl	8003f56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000fac 	.word	0x20000fac

08003270 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003274:	4802      	ldr	r0, [pc, #8]	@ (8003280 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003276:	f000 fe6e 	bl	8003f56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000fac 	.word	0x20000fac

08003284 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8003288:	2020      	movs	r0, #32
 800328a:	f7ff ff6d 	bl	8003168 <LL_EXTI_IsActiveFlag_0_31>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <EXTI9_5_IRQHandler+0x48>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8003294:	2020      	movs	r0, #32
 8003296:	f7ff ff7d 	bl	8003194 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */
    if(LL_GPIO_IsInputPinSet(SW2_1_GPIO_Port, SW2_1_Pin))	{ switches |= sw21bitMSK;}
 800329a:	f242 0120 	movw	r1, #8224	@ 0x2020
 800329e:	482f      	ldr	r0, [pc, #188]	@ (800335c <EXTI9_5_IRQHandler+0xd8>)
 80032a0:	f7ff ff4b 	bl	800313a <LL_GPIO_IsInputPinSet>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <EXTI9_5_IRQHandler+0x38>
 80032aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f043 0302 	orr.w	r3, r3, #2
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e007      	b.n	80032cc <EXTI9_5_IRQHandler+0x48>
	else{ switches &= ~sw21bitMSK;}
 80032bc:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f023 0302 	bic.w	r3, r3, #2
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	4b25      	ldr	r3, [pc, #148]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 80032ca:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 80032cc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80032d0:	f7ff ff4a 	bl	8003168 <LL_EXTI_IsActiveFlag_0_31>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01b      	beq.n	8003312 <EXTI9_5_IRQHandler+0x8e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 80032da:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80032de:	f7ff ff59 	bl	8003194 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_8 */
    if(LL_GPIO_IsInputPinSet(SW1_3_GPIO_Port, SW1_3_Pin))	{ switches |= sw13bitMSK;}
 80032e2:	4920      	ldr	r1, [pc, #128]	@ (8003364 <EXTI9_5_IRQHandler+0xe0>)
 80032e4:	481d      	ldr	r0, [pc, #116]	@ (800335c <EXTI9_5_IRQHandler+0xd8>)
 80032e6:	f7ff ff28 	bl	800313a <LL_GPIO_IsInputPinSet>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <EXTI9_5_IRQHandler+0x7e>
 80032f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b18      	ldr	r3, [pc, #96]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e007      	b.n	8003312 <EXTI9_5_IRQHandler+0x8e>
	else{ switches &= ~sw13bitMSK;}
 8003302:	4b17      	ldr	r3, [pc, #92]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4b14      	ldr	r3, [pc, #80]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 8003310:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8003312:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003316:	f7ff ff27 	bl	8003168 <LL_EXTI_IsActiveFlag_0_31>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01b      	beq.n	8003358 <EXTI9_5_IRQHandler+0xd4>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 8003320:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003324:	f7ff ff36 	bl	8003194 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_9 */
    if(LL_GPIO_IsInputPinSet(SW2_3_GPIO_Port, SW2_3_Pin))	{ switches |= sw23bitMSK;}
 8003328:	490f      	ldr	r1, [pc, #60]	@ (8003368 <EXTI9_5_IRQHandler+0xe4>)
 800332a:	480c      	ldr	r0, [pc, #48]	@ (800335c <EXTI9_5_IRQHandler+0xd8>)
 800332c:	f7ff ff05 	bl	800313a <LL_GPIO_IsInputPinSet>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <EXTI9_5_IRQHandler+0xc4>
 8003336:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4b07      	ldr	r3, [pc, #28]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 8003344:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003346:	e007      	b.n	8003358 <EXTI9_5_IRQHandler+0xd4>
	else{ switches &= ~sw23bitMSK;}
 8003348:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f023 0308 	bic.w	r3, r3, #8
 8003352:	b2da      	uxtb	r2, r3
 8003354:	4b02      	ldr	r3, [pc, #8]	@ (8003360 <EXTI9_5_IRQHandler+0xdc>)
 8003356:	701a      	strb	r2, [r3, #0]
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40010c00 	.word	0x40010c00
 8003360:	200002bb 	.word	0x200002bb
 8003364:	04010001 	.word	0x04010001
 8003368:	04020002 	.word	0x04020002

0800336c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM4))
 800337c:	480a      	ldr	r0, [pc, #40]	@ (80033a8 <TIM4_IRQHandler+0x30>)
 800337e:	f7ff feca 	bl	8003116 <LL_TIM_IsActiveFlag_CC1>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00c      	beq.n	80033a2 <TIM4_IRQHandler+0x2a>
	{
		LL_TIM_ClearFlag_CC1(TIM4);
 8003388:	4807      	ldr	r0, [pc, #28]	@ (80033a8 <TIM4_IRQHandler+0x30>)
 800338a:	f7ff feb7 	bl	80030fc <LL_TIM_ClearFlag_CC1>
		LL_TIM_DisableCounter(TIM4);
 800338e:	4806      	ldr	r0, [pc, #24]	@ (80033a8 <TIM4_IRQHandler+0x30>)
 8003390:	f7ff fe94 	bl	80030bc <LL_TIM_DisableCounter>
		LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH1);
 8003394:	2101      	movs	r1, #1
 8003396:	4804      	ldr	r0, [pc, #16]	@ (80033a8 <TIM4_IRQHandler+0x30>)
 8003398:	f7ff fe9f 	bl	80030da <LL_TIM_CC_DisableChannel>
		us_delay_flag=1;
 800339c:	4b03      	ldr	r3, [pc, #12]	@ (80033ac <TIM4_IRQHandler+0x34>)
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40000800 	.word	0x40000800
 80033ac:	200002ba 	.word	0x200002ba

080033b0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80033b4:	4802      	ldr	r0, [pc, #8]	@ (80033c0 <SPI2_IRQHandler+0x10>)
 80033b6:	f003 f8df 	bl	8006578 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200001fc 	.word	0x200001fc

080033c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 80033c8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80033cc:	f7ff fecc 	bl	8003168 <LL_EXTI_IsActiveFlag_0_31>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d01b      	beq.n	800340e <EXTI15_10_IRQHandler+0x4a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 80033d6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80033da:	f7ff fedb 	bl	8003194 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */
    if(LL_GPIO_IsInputPinSet(SW1_4_GPIO_Port, SW1_4_Pin))	{ switches &= ~sw14bitMSK;}
 80033de:	491e      	ldr	r1, [pc, #120]	@ (8003458 <EXTI15_10_IRQHandler+0x94>)
 80033e0:	481e      	ldr	r0, [pc, #120]	@ (800345c <EXTI15_10_IRQHandler+0x98>)
 80033e2:	f7ff feaa 	bl	800313a <LL_GPIO_IsInputPinSet>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <EXTI15_10_IRQHandler+0x3a>
 80033ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003460 <EXTI15_10_IRQHandler+0x9c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f023 0310 	bic.w	r3, r3, #16
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <EXTI15_10_IRQHandler+0x9c>)
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e007      	b.n	800340e <EXTI15_10_IRQHandler+0x4a>
    else{ switches |= sw14bitMSK;}
 80033fe:	4b18      	ldr	r3, [pc, #96]	@ (8003460 <EXTI15_10_IRQHandler+0x9c>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f043 0310 	orr.w	r3, r3, #16
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <EXTI15_10_IRQHandler+0x9c>)
 800340c:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 800340e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003412:	f7ff fea9 	bl	8003168 <LL_EXTI_IsActiveFlag_0_31>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01b      	beq.n	8003454 <EXTI15_10_IRQHandler+0x90>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 800341c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003420:	f7ff feb8 	bl	8003194 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */
    if(LL_GPIO_IsInputPinSet(SW2_4_GPIO_Port, SW2_4_Pin))	{ switches &= ~sw24bitMSK;}
 8003424:	490f      	ldr	r1, [pc, #60]	@ (8003464 <EXTI15_10_IRQHandler+0xa0>)
 8003426:	480d      	ldr	r0, [pc, #52]	@ (800345c <EXTI15_10_IRQHandler+0x98>)
 8003428:	f7ff fe87 	bl	800313a <LL_GPIO_IsInputPinSet>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <EXTI15_10_IRQHandler+0x80>
 8003432:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <EXTI15_10_IRQHandler+0x9c>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f023 0320 	bic.w	r3, r3, #32
 800343c:	b2da      	uxtb	r2, r3
 800343e:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <EXTI15_10_IRQHandler+0x9c>)
 8003440:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_11 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003442:	e007      	b.n	8003454 <EXTI15_10_IRQHandler+0x90>
    else{ switches |= sw24bitMSK;}
 8003444:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <EXTI15_10_IRQHandler+0x9c>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f043 0320 	orr.w	r3, r3, #32
 800344e:	b2da      	uxtb	r2, r3
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <EXTI15_10_IRQHandler+0x9c>)
 8003452:	701a      	strb	r2, [r3, #0]
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}
 8003458:	04040004 	.word	0x04040004
 800345c:	40010c00 	.word	0x40010c00
 8003460:	200002bb 	.word	0x200002bb
 8003464:	04080008 	.word	0x04080008

08003468 <USBWakeUp_IRQHandler>:

/**
  * @brief This function handles USB wake-up interrupt through EXTI line 18.
  */
void USBWakeUp_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USBWakeUp_IRQn 0 */

  /* USER CODE END USBWakeUp_IRQn 0 */
  if ((&hpcd_USB_FS)->Init.low_power_enable) {
 800346c:	4b08      	ldr	r3, [pc, #32]	@ (8003490 <USBWakeUp_IRQHandler+0x28>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <USBWakeUp_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003474:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <USBWakeUp_IRQHandler+0x2c>)
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	4a06      	ldr	r2, [pc, #24]	@ (8003494 <USBWakeUp_IRQHandler+0x2c>)
 800347a:	f023 0306 	bic.w	r3, r3, #6
 800347e:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 8003480:	f7fd ff62 	bl	8001348 <SystemClock_Config>
  }
  /* Clear EXTI pending bit */
  __HAL_USB_WAKEUP_EXTI_CLEAR_FLAG();
 8003484:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <USBWakeUp_IRQHandler+0x30>)
 8003486:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800348a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN USBWakeUp_IRQn 1 */

  /* USER CODE END USBWakeUp_IRQn 1 */
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000fac 	.word	0x20000fac
 8003494:	e000ed00 	.word	0xe000ed00
 8003498:	40010400 	.word	0x40010400

0800349c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e00a      	b.n	80034c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034ae:	f3af 8000 	nop.w
 80034b2:	4601      	mov	r1, r0
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	60ba      	str	r2, [r7, #8]
 80034ba:	b2ca      	uxtb	r2, r1
 80034bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	3301      	adds	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	dbf0      	blt.n	80034ae <_read+0x12>
  }

  return len;
 80034cc:	687b      	ldr	r3, [r7, #4]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e009      	b.n	80034fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	60ba      	str	r2, [r7, #8]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3301      	adds	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	dbf1      	blt.n	80034e8 <_write+0x12>
  }
  return len;
 8003504:	687b      	ldr	r3, [r7, #4]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <_close>:

int _close(int file)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003534:	605a      	str	r2, [r3, #4]
  return 0;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <_isatty>:

int _isatty(int file)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800354a:	2301      	movs	r3, #1
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr

08003556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003556:	b480      	push	{r7}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
	...

08003570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003578:	4a14      	ldr	r2, [pc, #80]	@ (80035cc <_sbrk+0x5c>)
 800357a:	4b15      	ldr	r3, [pc, #84]	@ (80035d0 <_sbrk+0x60>)
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003584:	4b13      	ldr	r3, [pc, #76]	@ (80035d4 <_sbrk+0x64>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800358c:	4b11      	ldr	r3, [pc, #68]	@ (80035d4 <_sbrk+0x64>)
 800358e:	4a12      	ldr	r2, [pc, #72]	@ (80035d8 <_sbrk+0x68>)
 8003590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003592:	4b10      	ldr	r3, [pc, #64]	@ (80035d4 <_sbrk+0x64>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	429a      	cmp	r2, r3
 800359e:	d207      	bcs.n	80035b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035a0:	f008 fe10 	bl	800c1c4 <__errno>
 80035a4:	4603      	mov	r3, r0
 80035a6:	220c      	movs	r2, #12
 80035a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035aa:	f04f 33ff 	mov.w	r3, #4294967295
 80035ae:	e009      	b.n	80035c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035b0:	4b08      	ldr	r3, [pc, #32]	@ (80035d4 <_sbrk+0x64>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035b6:	4b07      	ldr	r3, [pc, #28]	@ (80035d4 <_sbrk+0x64>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	4a05      	ldr	r2, [pc, #20]	@ (80035d4 <_sbrk+0x64>)
 80035c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035c2:	68fb      	ldr	r3, [r7, #12]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20005000 	.word	0x20005000
 80035d0:	00001400 	.word	0x00001400
 80035d4:	200002d4 	.word	0x200002d4
 80035d8:	20001608 	.word	0x20001608

080035dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035e8:	f7ff fff8 	bl	80035dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035ec:	480b      	ldr	r0, [pc, #44]	@ (800361c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80035ee:	490c      	ldr	r1, [pc, #48]	@ (8003620 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80035f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003624 <LoopFillZerobss+0x16>)
  movs r3, #0
 80035f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f4:	e002      	b.n	80035fc <LoopCopyDataInit>

080035f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035fa:	3304      	adds	r3, #4

080035fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003600:	d3f9      	bcc.n	80035f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003602:	4a09      	ldr	r2, [pc, #36]	@ (8003628 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003604:	4c09      	ldr	r4, [pc, #36]	@ (800362c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003608:	e001      	b.n	800360e <LoopFillZerobss>

0800360a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800360a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800360c:	3204      	adds	r2, #4

0800360e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800360e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003610:	d3fb      	bcc.n	800360a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003612:	f008 fddd 	bl	800c1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003616:	f7fd fb2b 	bl	8000c70 <main>
  bx lr
 800361a:	4770      	bx	lr
  ldr r0, =_sdata
 800361c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003620:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003624:	0800d140 	.word	0x0800d140
  ldr r2, =_sbss
 8003628:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800362c:	20001608 	.word	0x20001608

08003630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003630:	e7fe      	b.n	8003630 <ADC1_2_IRQHandler>
	...

08003634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003638:	4b08      	ldr	r3, [pc, #32]	@ (800365c <HAL_Init+0x28>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a07      	ldr	r2, [pc, #28]	@ (800365c <HAL_Init+0x28>)
 800363e:	f043 0310 	orr.w	r3, r3, #16
 8003642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003644:	2003      	movs	r0, #3
 8003646:	f000 f923 	bl	8003890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800364a:	200f      	movs	r0, #15
 800364c:	f000 f808 	bl	8003660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003650:	f7ff fcae 	bl	8002fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40022000 	.word	0x40022000

08003660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003668:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <HAL_InitTick+0x54>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <HAL_InitTick+0x58>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	4619      	mov	r1, r3
 8003672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003676:	fbb3 f3f1 	udiv	r3, r3, r1
 800367a:	fbb2 f3f3 	udiv	r3, r2, r3
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f93b 	bl	80038fa <HAL_SYSTICK_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e00e      	b.n	80036ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b0f      	cmp	r3, #15
 8003692:	d80a      	bhi.n	80036aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003694:	2200      	movs	r2, #0
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	f000 f903 	bl	80038a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036a0:	4a06      	ldr	r2, [pc, #24]	@ (80036bc <HAL_InitTick+0x5c>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000008 	.word	0x20000008
 80036b8:	20000010 	.word	0x20000010
 80036bc:	2000000c 	.word	0x2000000c

080036c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036c4:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <HAL_IncTick+0x1c>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_IncTick+0x20>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	4a03      	ldr	r2, [pc, #12]	@ (80036e0 <HAL_IncTick+0x20>)
 80036d2:	6013      	str	r3, [r2, #0]
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	20000010 	.word	0x20000010
 80036e0:	200002d8 	.word	0x200002d8

080036e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return uwTick;
 80036e8:	4b02      	ldr	r3, [pc, #8]	@ (80036f4 <HAL_GetTick+0x10>)
 80036ea:	681b      	ldr	r3, [r3, #0]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr
 80036f4:	200002d8 	.word	0x200002d8

080036f8 <__NVIC_SetPriorityGrouping>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <__NVIC_SetPriorityGrouping+0x44>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003714:	4013      	ands	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800372a:	4a04      	ldr	r2, [pc, #16]	@ (800373c <__NVIC_SetPriorityGrouping+0x44>)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	60d3      	str	r3, [r2, #12]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <__NVIC_GetPriorityGrouping>:
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003744:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <__NVIC_GetPriorityGrouping+0x18>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	f003 0307 	and.w	r3, r3, #7
}
 800374e:	4618      	mov	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <__NVIC_EnableIRQ>:
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	2b00      	cmp	r3, #0
 800376c:	db0b      	blt.n	8003786 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	f003 021f 	and.w	r2, r3, #31
 8003774:	4906      	ldr	r1, [pc, #24]	@ (8003790 <__NVIC_EnableIRQ+0x34>)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2001      	movs	r0, #1
 800377e:	fa00 f202 	lsl.w	r2, r0, r2
 8003782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	e000e100 	.word	0xe000e100

08003794 <__NVIC_SetPriority>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db0a      	blt.n	80037be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	490c      	ldr	r1, [pc, #48]	@ (80037e0 <__NVIC_SetPriority+0x4c>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80037bc:	e00a      	b.n	80037d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4908      	ldr	r1, [pc, #32]	@ (80037e4 <__NVIC_SetPriority+0x50>)
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3b04      	subs	r3, #4
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	761a      	strb	r2, [r3, #24]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <NVIC_EncodePriority>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	@ 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f1c3 0307 	rsb	r3, r3, #7
 8003802:	2b04      	cmp	r3, #4
 8003804:	bf28      	it	cs
 8003806:	2304      	movcs	r3, #4
 8003808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3304      	adds	r3, #4
 800380e:	2b06      	cmp	r3, #6
 8003810:	d902      	bls.n	8003818 <NVIC_EncodePriority+0x30>
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3b03      	subs	r3, #3
 8003816:	e000      	b.n	800381a <NVIC_EncodePriority+0x32>
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	f04f 32ff 	mov.w	r2, #4294967295
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	401a      	ands	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003830:	f04f 31ff 	mov.w	r1, #4294967295
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43d9      	mvns	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	4313      	orrs	r3, r2
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	@ 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800385c:	d301      	bcc.n	8003862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385e:	2301      	movs	r3, #1
 8003860:	e00f      	b.n	8003882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003862:	4a0a      	ldr	r2, [pc, #40]	@ (800388c <SysTick_Config+0x40>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386a:	210f      	movs	r1, #15
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	f7ff ff90 	bl	8003794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <SysTick_Config+0x40>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387a:	4b04      	ldr	r3, [pc, #16]	@ (800388c <SysTick_Config+0x40>)
 800387c:	2207      	movs	r2, #7
 800387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	e000e010 	.word	0xe000e010

08003890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff2d 	bl	80036f8 <__NVIC_SetPriorityGrouping>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	4603      	mov	r3, r0
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b8:	f7ff ff42 	bl	8003740 <__NVIC_GetPriorityGrouping>
 80038bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6978      	ldr	r0, [r7, #20]
 80038c4:	f7ff ff90 	bl	80037e8 <NVIC_EncodePriority>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff5f 	bl	8003794 <__NVIC_SetPriority>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4603      	mov	r3, r0
 80038e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff35 	bl	800375c <__NVIC_EnableIRQ>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff ffa2 	bl	800384c <SysTick_Config>
 8003908:	4603      	mov	r3, r0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d005      	beq.n	8003938 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2204      	movs	r2, #4
 8003930:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	e051      	b.n	80039dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 020e 	bic.w	r2, r2, #14
 8003946:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a22      	ldr	r2, [pc, #136]	@ (80039e8 <HAL_DMA_Abort_IT+0xd4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d029      	beq.n	80039b6 <HAL_DMA_Abort_IT+0xa2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a21      	ldr	r2, [pc, #132]	@ (80039ec <HAL_DMA_Abort_IT+0xd8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d022      	beq.n	80039b2 <HAL_DMA_Abort_IT+0x9e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1f      	ldr	r2, [pc, #124]	@ (80039f0 <HAL_DMA_Abort_IT+0xdc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01a      	beq.n	80039ac <HAL_DMA_Abort_IT+0x98>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1e      	ldr	r2, [pc, #120]	@ (80039f4 <HAL_DMA_Abort_IT+0xe0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d012      	beq.n	80039a6 <HAL_DMA_Abort_IT+0x92>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1c      	ldr	r2, [pc, #112]	@ (80039f8 <HAL_DMA_Abort_IT+0xe4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00a      	beq.n	80039a0 <HAL_DMA_Abort_IT+0x8c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1b      	ldr	r2, [pc, #108]	@ (80039fc <HAL_DMA_Abort_IT+0xe8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d102      	bne.n	800399a <HAL_DMA_Abort_IT+0x86>
 8003994:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003998:	e00e      	b.n	80039b8 <HAL_DMA_Abort_IT+0xa4>
 800399a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800399e:	e00b      	b.n	80039b8 <HAL_DMA_Abort_IT+0xa4>
 80039a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039a4:	e008      	b.n	80039b8 <HAL_DMA_Abort_IT+0xa4>
 80039a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039aa:	e005      	b.n	80039b8 <HAL_DMA_Abort_IT+0xa4>
 80039ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039b0:	e002      	b.n	80039b8 <HAL_DMA_Abort_IT+0xa4>
 80039b2:	2310      	movs	r3, #16
 80039b4:	e000      	b.n	80039b8 <HAL_DMA_Abort_IT+0xa4>
 80039b6:	2301      	movs	r3, #1
 80039b8:	4a11      	ldr	r2, [pc, #68]	@ (8003a00 <HAL_DMA_Abort_IT+0xec>)
 80039ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
    } 
  }
  return status;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40020008 	.word	0x40020008
 80039ec:	4002001c 	.word	0x4002001c
 80039f0:	40020030 	.word	0x40020030
 80039f4:	40020044 	.word	0x40020044
 80039f8:	40020058 	.word	0x40020058
 80039fc:	4002006c 	.word	0x4002006c
 8003a00:	40020000 	.word	0x40020000

08003a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b08b      	sub	sp, #44	@ 0x2c
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a12:	2300      	movs	r3, #0
 8003a14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a16:	e169      	b.n	8003cec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a18:	2201      	movs	r2, #1
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	f040 8158 	bne.w	8003ce6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4a9a      	ldr	r2, [pc, #616]	@ (8003ca4 <HAL_GPIO_Init+0x2a0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d05e      	beq.n	8003afe <HAL_GPIO_Init+0xfa>
 8003a40:	4a98      	ldr	r2, [pc, #608]	@ (8003ca4 <HAL_GPIO_Init+0x2a0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d875      	bhi.n	8003b32 <HAL_GPIO_Init+0x12e>
 8003a46:	4a98      	ldr	r2, [pc, #608]	@ (8003ca8 <HAL_GPIO_Init+0x2a4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d058      	beq.n	8003afe <HAL_GPIO_Init+0xfa>
 8003a4c:	4a96      	ldr	r2, [pc, #600]	@ (8003ca8 <HAL_GPIO_Init+0x2a4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d86f      	bhi.n	8003b32 <HAL_GPIO_Init+0x12e>
 8003a52:	4a96      	ldr	r2, [pc, #600]	@ (8003cac <HAL_GPIO_Init+0x2a8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d052      	beq.n	8003afe <HAL_GPIO_Init+0xfa>
 8003a58:	4a94      	ldr	r2, [pc, #592]	@ (8003cac <HAL_GPIO_Init+0x2a8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d869      	bhi.n	8003b32 <HAL_GPIO_Init+0x12e>
 8003a5e:	4a94      	ldr	r2, [pc, #592]	@ (8003cb0 <HAL_GPIO_Init+0x2ac>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d04c      	beq.n	8003afe <HAL_GPIO_Init+0xfa>
 8003a64:	4a92      	ldr	r2, [pc, #584]	@ (8003cb0 <HAL_GPIO_Init+0x2ac>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d863      	bhi.n	8003b32 <HAL_GPIO_Init+0x12e>
 8003a6a:	4a92      	ldr	r2, [pc, #584]	@ (8003cb4 <HAL_GPIO_Init+0x2b0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d046      	beq.n	8003afe <HAL_GPIO_Init+0xfa>
 8003a70:	4a90      	ldr	r2, [pc, #576]	@ (8003cb4 <HAL_GPIO_Init+0x2b0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d85d      	bhi.n	8003b32 <HAL_GPIO_Init+0x12e>
 8003a76:	2b12      	cmp	r3, #18
 8003a78:	d82a      	bhi.n	8003ad0 <HAL_GPIO_Init+0xcc>
 8003a7a:	2b12      	cmp	r3, #18
 8003a7c:	d859      	bhi.n	8003b32 <HAL_GPIO_Init+0x12e>
 8003a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a84 <HAL_GPIO_Init+0x80>)
 8003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a84:	08003aff 	.word	0x08003aff
 8003a88:	08003ad9 	.word	0x08003ad9
 8003a8c:	08003aeb 	.word	0x08003aeb
 8003a90:	08003b2d 	.word	0x08003b2d
 8003a94:	08003b33 	.word	0x08003b33
 8003a98:	08003b33 	.word	0x08003b33
 8003a9c:	08003b33 	.word	0x08003b33
 8003aa0:	08003b33 	.word	0x08003b33
 8003aa4:	08003b33 	.word	0x08003b33
 8003aa8:	08003b33 	.word	0x08003b33
 8003aac:	08003b33 	.word	0x08003b33
 8003ab0:	08003b33 	.word	0x08003b33
 8003ab4:	08003b33 	.word	0x08003b33
 8003ab8:	08003b33 	.word	0x08003b33
 8003abc:	08003b33 	.word	0x08003b33
 8003ac0:	08003b33 	.word	0x08003b33
 8003ac4:	08003b33 	.word	0x08003b33
 8003ac8:	08003ae1 	.word	0x08003ae1
 8003acc:	08003af5 	.word	0x08003af5
 8003ad0:	4a79      	ldr	r2, [pc, #484]	@ (8003cb8 <HAL_GPIO_Init+0x2b4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ad6:	e02c      	b.n	8003b32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	623b      	str	r3, [r7, #32]
          break;
 8003ade:	e029      	b.n	8003b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	623b      	str	r3, [r7, #32]
          break;
 8003ae8:	e024      	b.n	8003b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	3308      	adds	r3, #8
 8003af0:	623b      	str	r3, [r7, #32]
          break;
 8003af2:	e01f      	b.n	8003b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	330c      	adds	r3, #12
 8003afa:	623b      	str	r3, [r7, #32]
          break;
 8003afc:	e01a      	b.n	8003b34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b06:	2304      	movs	r3, #4
 8003b08:	623b      	str	r3, [r7, #32]
          break;
 8003b0a:	e013      	b.n	8003b34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d105      	bne.n	8003b20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b14:	2308      	movs	r3, #8
 8003b16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	611a      	str	r2, [r3, #16]
          break;
 8003b1e:	e009      	b.n	8003b34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b20:	2308      	movs	r3, #8
 8003b22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	615a      	str	r2, [r3, #20]
          break;
 8003b2a:	e003      	b.n	8003b34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	623b      	str	r3, [r7, #32]
          break;
 8003b30:	e000      	b.n	8003b34 <HAL_GPIO_Init+0x130>
          break;
 8003b32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2bff      	cmp	r3, #255	@ 0xff
 8003b38:	d801      	bhi.n	8003b3e <HAL_GPIO_Init+0x13a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	e001      	b.n	8003b42 <HAL_GPIO_Init+0x13e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3304      	adds	r3, #4
 8003b42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2bff      	cmp	r3, #255	@ 0xff
 8003b48:	d802      	bhi.n	8003b50 <HAL_GPIO_Init+0x14c>
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	e002      	b.n	8003b56 <HAL_GPIO_Init+0x152>
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	3b08      	subs	r3, #8
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	210f      	movs	r1, #15
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	401a      	ands	r2, r3
 8003b68:	6a39      	ldr	r1, [r7, #32]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	431a      	orrs	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80b1 	beq.w	8003ce6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b84:	4b4d      	ldr	r3, [pc, #308]	@ (8003cbc <HAL_GPIO_Init+0x2b8>)
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	4a4c      	ldr	r2, [pc, #304]	@ (8003cbc <HAL_GPIO_Init+0x2b8>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6193      	str	r3, [r2, #24]
 8003b90:	4b4a      	ldr	r3, [pc, #296]	@ (8003cbc <HAL_GPIO_Init+0x2b8>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b9c:	4a48      	ldr	r2, [pc, #288]	@ (8003cc0 <HAL_GPIO_Init+0x2bc>)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	3302      	adds	r3, #2
 8003ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	220f      	movs	r2, #15
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a40      	ldr	r2, [pc, #256]	@ (8003cc4 <HAL_GPIO_Init+0x2c0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_GPIO_Init+0x1ec>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3f      	ldr	r2, [pc, #252]	@ (8003cc8 <HAL_GPIO_Init+0x2c4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00d      	beq.n	8003bec <HAL_GPIO_Init+0x1e8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8003ccc <HAL_GPIO_Init+0x2c8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <HAL_GPIO_Init+0x1e4>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3d      	ldr	r2, [pc, #244]	@ (8003cd0 <HAL_GPIO_Init+0x2cc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_GPIO_Init+0x1e0>
 8003be0:	2303      	movs	r3, #3
 8003be2:	e006      	b.n	8003bf2 <HAL_GPIO_Init+0x1ee>
 8003be4:	2304      	movs	r3, #4
 8003be6:	e004      	b.n	8003bf2 <HAL_GPIO_Init+0x1ee>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e002      	b.n	8003bf2 <HAL_GPIO_Init+0x1ee>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <HAL_GPIO_Init+0x1ee>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf4:	f002 0203 	and.w	r2, r2, #3
 8003bf8:	0092      	lsls	r2, r2, #2
 8003bfa:	4093      	lsls	r3, r2
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c02:	492f      	ldr	r1, [pc, #188]	@ (8003cc0 <HAL_GPIO_Init+0x2bc>)
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	3302      	adds	r3, #2
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d006      	beq.n	8003c2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	492c      	ldr	r1, [pc, #176]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	608b      	str	r3, [r1, #8]
 8003c28:	e006      	b.n	8003c38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	4928      	ldr	r1, [pc, #160]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d006      	beq.n	8003c52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c44:	4b23      	ldr	r3, [pc, #140]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	4922      	ldr	r1, [pc, #136]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60cb      	str	r3, [r1, #12]
 8003c50:	e006      	b.n	8003c60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c52:	4b20      	ldr	r3, [pc, #128]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	491e      	ldr	r1, [pc, #120]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d006      	beq.n	8003c7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c6c:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	4918      	ldr	r1, [pc, #96]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
 8003c78:	e006      	b.n	8003c88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c7a:	4b16      	ldr	r3, [pc, #88]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	4914      	ldr	r1, [pc, #80]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d021      	beq.n	8003cd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c94:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	490e      	ldr	r1, [pc, #56]	@ (8003cd4 <HAL_GPIO_Init+0x2d0>)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]
 8003ca0:	e021      	b.n	8003ce6 <HAL_GPIO_Init+0x2e2>
 8003ca2:	bf00      	nop
 8003ca4:	10320000 	.word	0x10320000
 8003ca8:	10310000 	.word	0x10310000
 8003cac:	10220000 	.word	0x10220000
 8003cb0:	10210000 	.word	0x10210000
 8003cb4:	10120000 	.word	0x10120000
 8003cb8:	10110000 	.word	0x10110000
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40010000 	.word	0x40010000
 8003cc4:	40010800 	.word	0x40010800
 8003cc8:	40010c00 	.word	0x40010c00
 8003ccc:	40011000 	.word	0x40011000
 8003cd0:	40011400 	.word	0x40011400
 8003cd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <HAL_GPIO_Init+0x304>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	4909      	ldr	r1, [pc, #36]	@ (8003d08 <HAL_GPIO_Init+0x304>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	3301      	adds	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f47f ae8e 	bne.w	8003a18 <HAL_GPIO_Init+0x14>
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	372c      	adds	r7, #44	@ 0x2c
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr
 8003d08:	40010400 	.word	0x40010400

08003d0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d0e:	b08b      	sub	sp, #44	@ 0x2c
 8003d10:	af06      	add	r7, sp, #24
 8003d12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e0f1      	b.n	8003f02 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f007 fc80 	bl	800b638 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f003 faa3 	bl	8007290 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	687e      	ldr	r6, [r7, #4]
 8003d52:	466d      	mov	r5, sp
 8003d54:	f106 0410 	add.w	r4, r6, #16
 8003d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	1d33      	adds	r3, r6, #4
 8003d62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d64:	6838      	ldr	r0, [r7, #0]
 8003d66:	f003 fa6d 	bl	8007244 <USB_CoreInit>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0c2      	b.n	8003f02 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f003 fa9e 	bl	80072c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	e040      	b.n	8003e10 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3301      	adds	r3, #1
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	440b      	add	r3, r1
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	440b      	add	r3, r1
 8003dc8:	3303      	adds	r3, #3
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	440b      	add	r3, r1
 8003ddc:	3338      	adds	r3, #56	@ 0x38
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	440b      	add	r3, r1
 8003df0:	333c      	adds	r3, #60	@ 0x3c
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	440b      	add	r3, r1
 8003e04:	3340      	adds	r3, #64	@ 0x40
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d3b9      	bcc.n	8003d8e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]
 8003e1e:	e044      	b.n	8003eaa <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	440b      	add	r3, r1
 8003e2e:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	440b      	add	r3, r1
 8003e44:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003e48:	7bfa      	ldrb	r2, [r7, #15]
 8003e4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e62:	7bfa      	ldrb	r2, [r7, #15]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	440b      	add	r3, r1
 8003e70:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	440b      	add	r3, r1
 8003e86:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3b5      	bcc.n	8003e20 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	687e      	ldr	r6, [r7, #4]
 8003ebc:	466d      	mov	r5, sp
 8003ebe:	f106 0410 	add.w	r4, r6, #16
 8003ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	1d33      	adds	r3, r6, #4
 8003ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ece:	6838      	ldr	r0, [r7, #0]
 8003ed0:	f003 fa04 	bl	80072dc <USB_DevInit>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e00d      	b.n	8003f02 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f005 fc85 	bl	800980a <USB_DevDisconnect>

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_PCD_Start+0x16>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e016      	b.n	8003f4e <HAL_PCD_Start+0x44>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 f999 	bl	8007264 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003f32:	2101      	movs	r1, #1
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f007 fe1e 	bl	800bb76 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f005 fc59 	bl	80097f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b088      	sub	sp, #32
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f005 fc5b 	bl	800981e <USB_ReadInterrupts>
 8003f68:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fb1b 	bl	80045b0 <PCD_EP_ISR_Handler>

    return;
 8003f7a:	e119      	b.n	80041b0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d013      	beq.n	8003fae <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f007 fbf1 	bl	800b786 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f905 	bl	80041b6 <HAL_PCD_SetAddress>

    return;
 8003fac:	e100      	b.n	80041b0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003fca:	b292      	uxth	r2, r2
 8003fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003fd0:	e0ee      	b.n	80041b0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00c      	beq.n	8003ff6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fee:	b292      	uxth	r2, r2
 8003ff0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003ff4:	e0dc      	b.n	80041b0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d027      	beq.n	8004050 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0204 	bic.w	r2, r2, #4
 8004012:	b292      	uxth	r2, r2
 8004014:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004020:	b29a      	uxth	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0208 	bic.w	r2, r2, #8
 800402a:	b292      	uxth	r2, r2
 800402c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f007 fbe1 	bl	800b7f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004048:	b292      	uxth	r2, r2
 800404a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800404e:	e0af      	b.n	80041b0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8083 	beq.w	8004162 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800405c:	2300      	movs	r3, #0
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e010      	b.n	8004084 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	7ffb      	ldrb	r3, [r7, #31]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	7ffb      	ldrb	r3, [r7, #31]
 8004070:	8812      	ldrh	r2, [r2, #0]
 8004072:	b292      	uxth	r2, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	3320      	adds	r3, #32
 8004078:	443b      	add	r3, r7
 800407a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800407e:	7ffb      	ldrb	r3, [r7, #31]
 8004080:	3301      	adds	r3, #1
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	7ffb      	ldrb	r3, [r7, #31]
 8004086:	2b07      	cmp	r3, #7
 8004088:	d9eb      	bls.n	8004062 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	b292      	uxth	r2, r2
 800409e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	b292      	uxth	r2, r2
 80040b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80040ba:	bf00      	nop
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f6      	beq.n	80040bc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e0:	b292      	uxth	r2, r2
 80040e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e00f      	b.n	800410c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80040ec:	7ffb      	ldrb	r3, [r7, #31]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	4611      	mov	r1, r2
 80040f4:	7ffa      	ldrb	r2, [r7, #31]
 80040f6:	0092      	lsls	r2, r2, #2
 80040f8:	440a      	add	r2, r1
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	3320      	adds	r3, #32
 80040fe:	443b      	add	r3, r7
 8004100:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004104:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004106:	7ffb      	ldrb	r3, [r7, #31]
 8004108:	3301      	adds	r3, #1
 800410a:	77fb      	strb	r3, [r7, #31]
 800410c:	7ffb      	ldrb	r3, [r7, #31]
 800410e:	2b07      	cmp	r3, #7
 8004110:	d9ec      	bls.n	80040ec <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0208 	orr.w	r2, r2, #8
 8004124:	b292      	uxth	r2, r2
 8004126:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800413c:	b292      	uxth	r2, r2
 800413e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800414a:	b29a      	uxth	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0204 	orr.w	r2, r2, #4
 8004154:	b292      	uxth	r2, r2
 8004156:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f007 fb32 	bl	800b7c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004160:	e026      	b.n	80041b0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00f      	beq.n	800418c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004174:	b29a      	uxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800417e:	b292      	uxth	r2, r2
 8004180:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f007 faf0 	bl	800b76a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800418a:	e011      	b.n	80041b0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00c      	beq.n	80041b0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800419e:	b29a      	uxth	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041a8:	b292      	uxth	r2, r2
 80041aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80041ae:	bf00      	nop
  }
}
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_PCD_SetAddress+0x1a>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e013      	b.n	80041f8 <HAL_PCD_SetAddress+0x42>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f005 faf1 	bl	80097d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	4608      	mov	r0, r1
 800420a:	4611      	mov	r1, r2
 800420c:	461a      	mov	r2, r3
 800420e:	4603      	mov	r3, r0
 8004210:	70fb      	strb	r3, [r7, #3]
 8004212:	460b      	mov	r3, r1
 8004214:	803b      	strh	r3, [r7, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800421e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004222:	2b00      	cmp	r3, #0
 8004224:	da0e      	bge.n	8004244 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	705a      	strb	r2, [r3, #1]
 8004242:	e00e      	b.n	8004262 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	f003 0207 	and.w	r2, r3, #7
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	4413      	add	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	b2da      	uxtb	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800426e:	883a      	ldrh	r2, [r7, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	78ba      	ldrb	r2, [r7, #2]
 8004278:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800427a:	78bb      	ldrb	r3, [r7, #2]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d102      	bne.n	8004286 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_PCD_EP_Open+0x94>
 8004290:	2302      	movs	r3, #2
 8004292:	e00e      	b.n	80042b2 <HAL_PCD_EP_Open+0xb2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68f9      	ldr	r1, [r7, #12]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 f83a 	bl	800731c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80042b0:	7afb      	ldrb	r3, [r7, #11]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	460b      	mov	r3, r1
 80042c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	da0e      	bge.n	80042ec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	705a      	strb	r2, [r3, #1]
 80042ea:	e00e      	b.n	800430a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	f003 0207 	and.w	r2, r3, #7
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_PCD_EP_Close+0x6a>
 8004320:	2302      	movs	r3, #2
 8004322:	e00e      	b.n	8004342 <HAL_PCD_EP_Close+0x88>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	4618      	mov	r0, r3
 8004334:	f003 fbb2 	bl	8007a9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	460b      	mov	r3, r1
 8004358:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800435a:	7afb      	ldrb	r3, [r7, #11]
 800435c:	f003 0207 	and.w	r2, r3, #7
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2200      	movs	r2, #0
 8004382:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2200      	movs	r2, #0
 8004388:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800438a:	7afb      	ldrb	r3, [r7, #11]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	b2da      	uxtb	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6979      	ldr	r1, [r7, #20]
 800439c:	4618      	mov	r0, r3
 800439e:	f003 fd69 	bl	8007e74 <USB_EPStartXfer>

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	f003 0207 	and.w	r2, r3, #7
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b086      	sub	sp, #24
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
 80043e6:	460b      	mov	r3, r1
 80043e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ea:	7afb      	ldrb	r3, [r7, #11]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4413      	add	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2200      	movs	r2, #0
 800441e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2201      	movs	r2, #1
 8004424:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004426:	7afb      	ldrb	r3, [r7, #11]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	b2da      	uxtb	r2, r3
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6979      	ldr	r1, [r7, #20]
 8004438:	4618      	mov	r0, r3
 800443a:	f003 fd1b 	bl	8007e74 <USB_EPStartXfer>

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	f003 0207 	and.w	r2, r3, #7
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	429a      	cmp	r2, r3
 8004460:	d901      	bls.n	8004466 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e04c      	b.n	8004500 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800446a:	2b00      	cmp	r3, #0
 800446c:	da0e      	bge.n	800448c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	705a      	strb	r2, [r3, #1]
 800448a:	e00c      	b.n	80044a6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	4413      	add	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_PCD_EP_SetStall+0x7e>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e01c      	b.n	8004500 <HAL_PCD_EP_SetStall+0xb8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f005 f87e 	bl	80095d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d108      	bne.n	80044f6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f005 f9a3 	bl	800983c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	f003 020f 	and.w	r2, r3, #15
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d901      	bls.n	8004526 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e040      	b.n	80045a8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800452a:	2b00      	cmp	r3, #0
 800452c:	da0e      	bge.n	800454c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	705a      	strb	r2, [r3, #1]
 800454a:	e00e      	b.n	800456a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	f003 0207 	and.w	r2, r3, #7
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	b2da      	uxtb	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_PCD_EP_ClrStall+0x82>
 8004586:	2302      	movs	r3, #2
 8004588:	e00e      	b.n	80045a8 <HAL_PCD_EP_ClrStall+0xa0>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	4618      	mov	r0, r3
 800459a:	f005 f86c 	bl	8009676 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b096      	sub	sp, #88	@ 0x58
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80045b8:	e3be      	b.n	8004d38 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80045c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80045c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80045d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f040 8178 	bne.w	80048ce <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80045de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d151      	bne.n	800468e <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80045f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fa:	81fb      	strh	r3, [r7, #14]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	89fb      	ldrh	r3, [r7, #14]
 8004602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800460a:	b29b      	uxth	r3, r3
 800460c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3328      	adds	r3, #40	@ 0x28
 8004612:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800461c:	b29b      	uxth	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	3302      	adds	r3, #2
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800463c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	441a      	add	r2, r3
 800464a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800464e:	2100      	movs	r1, #0
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f007 f870 	bl	800b736 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 836a 	beq.w	8004d38 <PCD_EP_ISR_Handler+0x788>
 8004664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f040 8365 	bne.w	8004d38 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800467a:	b2da      	uxtb	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800468c:	e354      	b.n	8004d38 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004694:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80046a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80046a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d034      	beq.n	8004716 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	3306      	adds	r3, #6
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80046d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80046e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80046e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f005 f8f6 	bl	80098dc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80046fc:	4013      	ands	r3, r2
 80046fe:	823b      	strh	r3, [r7, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	8a3a      	ldrh	r2, [r7, #16]
 8004706:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800470a:	b292      	uxth	r2, r2
 800470c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f006 ffe4 	bl	800b6dc <HAL_PCD_SetupStageCallback>
 8004714:	e310      	b.n	8004d38 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004716:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800471a:	2b00      	cmp	r3, #0
 800471c:	f280 830c 	bge.w	8004d38 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29a      	uxth	r2, r3
 8004728:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800472c:	4013      	ands	r3, r2
 800472e:	83fb      	strh	r3, [r7, #30]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	8bfa      	ldrh	r2, [r7, #30]
 8004736:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800473a:	b292      	uxth	r2, r2
 800473c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004746:	b29b      	uxth	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	3306      	adds	r3, #6
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004768:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800476a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d019      	beq.n	80047a6 <PCD_EP_ISR_Handler+0x1f6>
 8004772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d015      	beq.n	80047a6 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004780:	6959      	ldr	r1, [r3, #20]
 8004782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004784:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004788:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800478a:	b29b      	uxth	r3, r3
 800478c:	f005 f8a6 	bl	80098dc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	441a      	add	r2, r3
 800479a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800479c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800479e:	2100      	movs	r1, #0
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f006 ffad 	bl	800b700 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80047b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80047b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f040 82bd 	bne.w	8004d38 <PCD_EP_ISR_Handler+0x788>
 80047be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80047c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80047c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047ca:	f000 82b5 	beq.w	8004d38 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047dc:	b29b      	uxth	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	4413      	add	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	801a      	strh	r2, [r3, #0]
 80047fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b3e      	cmp	r3, #62	@ 0x3e
 8004804:	d91d      	bls.n	8004842 <PCD_EP_ISR_Handler+0x292>
 8004806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	647b      	str	r3, [r7, #68]	@ 0x44
 800480e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <PCD_EP_ISR_Handler+0x270>
 800481a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800481c:	3b01      	subs	r3, #1
 800481e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29a      	uxth	r2, r3
 8004826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004828:	b29b      	uxth	r3, r3
 800482a:	029b      	lsls	r3, r3, #10
 800482c:	b29b      	uxth	r3, r3
 800482e:	4313      	orrs	r3, r2
 8004830:	b29b      	uxth	r3, r3
 8004832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483a:	b29a      	uxth	r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	e026      	b.n	8004890 <PCD_EP_ISR_Handler+0x2e0>
 8004842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <PCD_EP_ISR_Handler+0x2b0>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004858:	b29a      	uxth	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	801a      	strh	r2, [r3, #0]
 800485e:	e017      	b.n	8004890 <PCD_EP_ISR_Handler+0x2e0>
 8004860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	647b      	str	r3, [r7, #68]	@ 0x44
 8004868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <PCD_EP_ISR_Handler+0x2ca>
 8004874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004876:	3301      	adds	r3, #1
 8004878:	647b      	str	r3, [r7, #68]	@ 0x44
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29a      	uxth	r2, r3
 8004880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004882:	b29b      	uxth	r3, r3
 8004884:	029b      	lsls	r3, r3, #10
 8004886:	b29b      	uxth	r3, r3
 8004888:	4313      	orrs	r3, r2
 800488a:	b29a      	uxth	r2, r3
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800489c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a0:	827b      	strh	r3, [r7, #18]
 80048a2:	8a7b      	ldrh	r3, [r7, #18]
 80048a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80048a8:	827b      	strh	r3, [r7, #18]
 80048aa:	8a7b      	ldrh	r3, [r7, #18]
 80048ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048b0:	827b      	strh	r3, [r7, #18]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	8a7b      	ldrh	r3, [r7, #18]
 80048b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8013      	strh	r3, [r2, #0]
 80048cc:	e234      	b.n	8004d38 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f280 80fc 	bge.w	8004ae4 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004902:	4013      	ands	r3, r2
 8004904:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800491a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800491e:	b292      	uxth	r2, r2
 8004920:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004922:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800493a:	7b1b      	ldrb	r3, [r3, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d125      	bne.n	800498c <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004948:	b29b      	uxth	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4413      	add	r3, r2
 8004954:	3306      	adds	r3, #6
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004968:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800496c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8092 	beq.w	8004a9a <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800497c:	6959      	ldr	r1, [r3, #20]
 800497e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004980:	88da      	ldrh	r2, [r3, #6]
 8004982:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004986:	f004 ffa9 	bl	80098dc <USB_ReadPMA>
 800498a:	e086      	b.n	8004a9a <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800498c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800498e:	78db      	ldrb	r3, [r3, #3]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d10a      	bne.n	80049aa <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004994:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004998:	461a      	mov	r2, r3
 800499a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f9d9 	bl	8004d54 <HAL_PCD_EP_DB_Receive>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80049a8:	e077      	b.n	8004a9a <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	461a      	mov	r2, r3
 80049ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80049da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d024      	beq.n	8004a52 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004a34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d02e      	beq.n	8004a9a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a42:	6959      	ldr	r1, [r3, #20]
 8004a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a46:	891a      	ldrh	r2, [r3, #8]
 8004a48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a4c:	f004 ff46 	bl	80098dc <USB_ReadPMA>
 8004a50:	e023      	b.n	8004a9a <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	4413      	add	r3, r2
 8004a66:	3306      	adds	r3, #6
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a7a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004a7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a8c:	6959      	ldr	r1, [r3, #20]
 8004a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a90:	895a      	ldrh	r2, [r3, #10]
 8004a92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a96:	f004 ff21 	bl	80098dc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004aa2:	441a      	add	r2, r3
 8004aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ab0:	441a      	add	r2, r3
 8004ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <PCD_EP_ISR_Handler+0x51a>
 8004abe:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d206      	bcs.n	8004ad8 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f006 fe15 	bl	800b700 <HAL_PCD_DataOutStageCallback>
 8004ad6:	e005      	b.n	8004ae4 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f003 f9c8 	bl	8007e74 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ae4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8123 	beq.w	8004d38 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8004af2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b20:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b44:	78db      	ldrb	r3, [r3, #3]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	f040 80a2 	bne.w	8004c90 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8004b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b4e:	2200      	movs	r2, #0
 8004b50:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b54:	7b1b      	ldrb	r3, [r3, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8093 	beq.w	8004c82 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d046      	beq.n	8004bf6 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b6a:	785b      	ldrb	r3, [r3, #1]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d126      	bne.n	8004bbe <PCD_EP_ISR_Handler+0x60e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	4413      	add	r3, r2
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	011a      	lsls	r2, r3, #4
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	4413      	add	r3, r2
 8004b92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b96:	623b      	str	r3, [r7, #32]
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	801a      	strh	r2, [r3, #0]
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	e061      	b.n	8004c82 <PCD_EP_ISR_Handler+0x6d2>
 8004bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d15d      	bne.n	8004c82 <PCD_EP_ISR_Handler+0x6d2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bda:	4413      	add	r3, r2
 8004bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	011a      	lsls	r2, r3, #4
 8004be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be6:	4413      	add	r3, r2
 8004be8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	801a      	strh	r2, [r3, #0]
 8004bf4:	e045      	b.n	8004c82 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d126      	bne.n	8004c52 <PCD_EP_ISR_Handler+0x6a2>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c18:	4413      	add	r3, r2
 8004c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	011a      	lsls	r2, r3, #4
 8004c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c24:	4413      	add	r3, r2
 8004c26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	801a      	strh	r2, [r3, #0]
 8004c50:	e017      	b.n	8004c82 <PCD_EP_ISR_Handler+0x6d2>
 8004c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c54:	785b      	ldrb	r3, [r3, #1]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d113      	bne.n	8004c82 <PCD_EP_ISR_Handler+0x6d2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c68:	4413      	add	r3, r2
 8004c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	011a      	lsls	r2, r3, #4
 8004c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c74:	4413      	add	r3, r2
 8004c76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7e:	2200      	movs	r2, #0
 8004c80:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	4619      	mov	r1, r3
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f006 fd54 	bl	800b736 <HAL_PCD_DataInStageCallback>
 8004c8e:	e053      	b.n	8004d38 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004c90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d146      	bne.n	8004d2a <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4413      	add	r3, r2
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cc4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cca:	699a      	ldr	r2, [r3, #24]
 8004ccc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d907      	bls.n	8004ce4 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8004cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004cdc:	1ad2      	subs	r2, r2, r3
 8004cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce0:	619a      	str	r2, [r3, #24]
 8004ce2:	e002      	b.n	8004cea <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f006 fd1c 	bl	800b736 <HAL_PCD_DataInStageCallback>
 8004cfe:	e01b      	b.n	8004d38 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004d08:	441a      	add	r2, r3
 8004d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d0c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004d16:	441a      	add	r2, r3
 8004d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d1a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d22:	4618      	mov	r0, r3
 8004d24:	f003 f8a6 	bl	8007e74 <USB_EPStartXfer>
 8004d28:	e006      	b.n	8004d38 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004d2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f91b 	bl	8004f6e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	b21b      	sxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f6ff ac38 	blt.w	80045ba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3758      	adds	r7, #88	@ 0x58
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d07e      	beq.n	8004e6a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4413      	add	r3, r2
 8004d80:	3302      	adds	r3, #2
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	8b7b      	ldrh	r3, [r7, #26]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d306      	bcc.n	8004dae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	699a      	ldr	r2, [r3, #24]
 8004da4:	8b7b      	ldrh	r3, [r7, #26]
 8004da6:	1ad2      	subs	r2, r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	619a      	str	r2, [r3, #24]
 8004dac:	e002      	b.n	8004db4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2200      	movs	r2, #0
 8004db2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d123      	bne.n	8004e04 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd6:	833b      	strh	r3, [r7, #24]
 8004dd8:	8b3b      	ldrh	r3, [r7, #24]
 8004dda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004dde:	833b      	strh	r3, [r7, #24]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	441a      	add	r2, r3
 8004dee:	8b3b      	ldrh	r3, [r7, #24]
 8004df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01f      	beq.n	8004e4e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e28:	82fb      	strh	r3, [r7, #22]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	441a      	add	r2, r3
 8004e38:	8afb      	ldrh	r3, [r7, #22]
 8004e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e4e:	8b7b      	ldrh	r3, [r7, #26]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8087 	beq.w	8004f64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	6959      	ldr	r1, [r3, #20]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	891a      	ldrh	r2, [r3, #8]
 8004e62:	8b7b      	ldrh	r3, [r7, #26]
 8004e64:	f004 fd3a 	bl	80098dc <USB_ReadPMA>
 8004e68:	e07c      	b.n	8004f64 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3306      	adds	r3, #6
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	8b7b      	ldrh	r3, [r7, #26]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d306      	bcc.n	8004eac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	8b7b      	ldrh	r3, [r7, #26]
 8004ea4:	1ad2      	subs	r2, r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	619a      	str	r2, [r3, #24]
 8004eaa:	e002      	b.n	8004eb2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d123      	bne.n	8004f02 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed4:	83fb      	strh	r3, [r7, #30]
 8004ed6:	8bfb      	ldrh	r3, [r7, #30]
 8004ed8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004edc:	83fb      	strh	r3, [r7, #30]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	8bfb      	ldrh	r3, [r7, #30]
 8004eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d11f      	bne.n	8004f4c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f26:	83bb      	strh	r3, [r7, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	441a      	add	r2, r3
 8004f36:	8bbb      	ldrh	r3, [r7, #28]
 8004f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f4c:	8b7b      	ldrh	r3, [r7, #26]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6959      	ldr	r1, [r3, #20]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	895a      	ldrh	r2, [r3, #10]
 8004f5e:	8b7b      	ldrh	r3, [r7, #26]
 8004f60:	f004 fcbc 	bl	80098dc <USB_ReadPMA>
    }
  }

  return count;
 8004f64:	8b7b      	ldrh	r3, [r7, #26]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b0a4      	sub	sp, #144	@ 0x90
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f7c:	88fb      	ldrh	r3, [r7, #6]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 81dd 	beq.w	8005342 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3302      	adds	r3, #2
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d907      	bls.n	8004fd0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	699a      	ldr	r2, [r3, #24]
 8004fc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004fc8:	1ad2      	subs	r2, r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	619a      	str	r2, [r3, #24]
 8004fce:	e002      	b.n	8004fd6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f040 80b9 	bne.w	8005152 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d126      	bne.n	8005036 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffc:	4413      	add	r3, r2
 8004ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	011a      	lsls	r2, r3, #4
 8005006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005008:	4413      	add	r3, r2
 800500a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800500e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800501a:	b29a      	uxth	r2, r3
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	801a      	strh	r2, [r3, #0]
 8005020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800502a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502e:	b29a      	uxth	r2, r3
 8005030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005032:	801a      	strh	r2, [r3, #0]
 8005034:	e01a      	b.n	800506c <HAL_PCD_EP_DB_Transmit+0xfe>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d116      	bne.n	800506c <HAL_PCD_EP_DB_Transmit+0xfe>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	637b      	str	r3, [r7, #52]	@ 0x34
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800504c:	b29b      	uxth	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005052:	4413      	add	r3, r2
 8005054:	637b      	str	r3, [r7, #52]	@ 0x34
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	011a      	lsls	r2, r3, #4
 800505c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505e:	4413      	add	r3, r2
 8005060:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005064:	633b      	str	r3, [r7, #48]	@ 0x30
 8005066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005068:	2200      	movs	r2, #0
 800506a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d126      	bne.n	80050c8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	61fb      	str	r3, [r7, #28]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005088:	b29b      	uxth	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	4413      	add	r3, r2
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	011a      	lsls	r2, r3, #4
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	801a      	strh	r2, [r3, #0]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	801a      	strh	r2, [r3, #0]
 80050c6:	e017      	b.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d113      	bne.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050d8:	b29b      	uxth	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	4413      	add	r3, r2
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	011a      	lsls	r2, r3, #4
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	4413      	add	r3, r2
 80050ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	2200      	movs	r2, #0
 80050f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	4619      	mov	r1, r3
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f006 fb19 	bl	800b736 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 82fc 	beq.w	8005708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512a:	82fb      	strh	r3, [r7, #22]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	8afb      	ldrh	r3, [r7, #22]
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005144:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]
 8005150:	e2da      	b.n	8005708 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d021      	beq.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005176:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800518c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005190:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005194:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800519c:	b29b      	uxth	r3, r3
 800519e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	f040 82ae 	bne.w	8005708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	695a      	ldr	r2, [r3, #20]
 80051b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80051b4:	441a      	add	r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80051c2:	441a      	add	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d30b      	bcc.n	80051ec <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051e4:	1ad2      	subs	r2, r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	621a      	str	r2, [r3, #32]
 80051ea:	e017      	b.n	800521c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d108      	bne.n	8005206 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80051f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80051f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005204:	e00a      	b.n	800521c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d165      	bne.n	80052f0 <HAL_PCD_EP_DB_Transmit+0x382>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005232:	b29b      	uxth	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005238:	4413      	add	r3, r2
 800523a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	011a      	lsls	r2, r3, #4
 8005242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005244:	4413      	add	r3, r2
 8005246:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800524a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800524c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005256:	b29a      	uxth	r2, r3
 8005258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525a:	801a      	strh	r2, [r3, #0]
 800525c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005260:	2b3e      	cmp	r3, #62	@ 0x3e
 8005262:	d91d      	bls.n	80052a0 <HAL_PCD_EP_DB_Transmit+0x332>
 8005264:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800526c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005270:	f003 031f 	and.w	r3, r3, #31
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <HAL_PCD_EP_DB_Transmit+0x310>
 8005278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800527a:	3b01      	subs	r3, #1
 800527c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29a      	uxth	r2, r3
 8005284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005286:	b29b      	uxth	r3, r3
 8005288:	029b      	lsls	r3, r3, #10
 800528a:	b29b      	uxth	r3, r3
 800528c:	4313      	orrs	r3, r2
 800528e:	b29b      	uxth	r3, r3
 8005290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005298:	b29a      	uxth	r2, r3
 800529a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529c:	801a      	strh	r2, [r3, #0]
 800529e:	e044      	b.n	800532a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <HAL_PCD_EP_DB_Transmit+0x350>
 80052a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ba:	801a      	strh	r2, [r3, #0]
 80052bc:	e035      	b.n	800532a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80052d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052d4:	3301      	adds	r3, #1
 80052d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29a      	uxth	r2, r3
 80052de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	029b      	lsls	r3, r3, #10
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4313      	orrs	r3, r2
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	e01c      	b.n	800532a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d118      	bne.n	800532a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005306:	b29b      	uxth	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800530c:	4413      	add	r3, r2
 800530e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	011a      	lsls	r2, r3, #4
 8005316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005318:	4413      	add	r3, r2
 800531a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800531e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005324:	b29a      	uxth	r2, r3
 8005326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005328:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6959      	ldr	r1, [r3, #20]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	891a      	ldrh	r2, [r3, #8]
 8005336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800533a:	b29b      	uxth	r3, r3
 800533c:	f004 fa89 	bl	8009852 <USB_WritePMA>
 8005340:	e1e2      	b.n	8005708 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800534a:	b29b      	uxth	r3, r3
 800534c:	461a      	mov	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	3306      	adds	r3, #6
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800536a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005376:	429a      	cmp	r2, r3
 8005378:	d307      	bcc.n	800538a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005382:	1ad2      	subs	r2, r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	619a      	str	r2, [r3, #24]
 8005388:	e002      	b.n	8005390 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2200      	movs	r2, #0
 800538e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f040 80c0 	bne.w	800551a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	785b      	ldrb	r3, [r3, #1]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d126      	bne.n	80053f0 <HAL_PCD_EP_DB_Transmit+0x482>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	461a      	mov	r2, r3
 80053b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053b6:	4413      	add	r3, r2
 80053b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	011a      	lsls	r2, r3, #4
 80053c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053c2:	4413      	add	r3, r2
 80053c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	e01a      	b.n	8005426 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	785b      	ldrb	r3, [r3, #1]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d116      	bne.n	8005426 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005406:	b29b      	uxth	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800540c:	4413      	add	r3, r2
 800540e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	011a      	lsls	r2, r3, #4
 8005416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005418:	4413      	add	r3, r2
 800541a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800541e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005420:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005422:	2200      	movs	r2, #0
 8005424:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	677b      	str	r3, [r7, #116]	@ 0x74
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d12b      	bne.n	800548c <HAL_PCD_EP_DB_Transmit+0x51e>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005442:	b29b      	uxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005448:	4413      	add	r3, r2
 800544a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	011a      	lsls	r2, r3, #4
 8005452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005454:	4413      	add	r3, r2
 8005456:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800545a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800545e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800546a:	b29a      	uxth	r2, r3
 800546c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800547e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005482:	b29a      	uxth	r2, r3
 8005484:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	e017      	b.n	80054bc <HAL_PCD_EP_DB_Transmit+0x54e>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d113      	bne.n	80054bc <HAL_PCD_EP_DB_Transmit+0x54e>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800549c:	b29b      	uxth	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054a2:	4413      	add	r3, r2
 80054a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	011a      	lsls	r2, r3, #4
 80054ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054ae:	4413      	add	r3, r2
 80054b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80054b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054b8:	2200      	movs	r2, #0
 80054ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	4619      	mov	r1, r3
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f006 f937 	bl	800b736 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f040 811a 	bne.w	8005708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ee:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	441a      	add	r2, r3
 8005500:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800550c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005514:	b29b      	uxth	r3, r3
 8005516:	8013      	strh	r3, [r2, #0]
 8005518:	e0f6      	b.n	8005708 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d121      	bne.n	8005568 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	441a      	add	r2, r3
 8005550:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800555c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005564:	b29b      	uxth	r3, r3
 8005566:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800556e:	2b01      	cmp	r3, #1
 8005570:	f040 80ca 	bne.w	8005708 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800557c:	441a      	add	r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	69da      	ldr	r2, [r3, #28]
 8005586:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800558a:	441a      	add	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	429a      	cmp	r2, r3
 800559a:	d30b      	bcc.n	80055b4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6a1a      	ldr	r2, [r3, #32]
 80055a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ac:	1ad2      	subs	r2, r2, r3
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	621a      	str	r2, [r3, #32]
 80055b2:	e017      	b.n	80055e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d108      	bne.n	80055ce <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80055bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80055c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80055cc:	e00a      	b.n	80055e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2200      	movs	r2, #0
 80055da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d165      	bne.n	80056be <HAL_PCD_EP_DB_Transmit+0x750>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005600:	b29b      	uxth	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005606:	4413      	add	r3, r2
 8005608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	011a      	lsls	r2, r3, #4
 8005610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005612:	4413      	add	r3, r2
 8005614:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005618:	65bb      	str	r3, [r7, #88]	@ 0x58
 800561a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005624:	b29a      	uxth	r2, r3
 8005626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800562e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005630:	d91d      	bls.n	800566e <HAL_PCD_EP_DB_Transmit+0x700>
 8005632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	66bb      	str	r3, [r7, #104]	@ 0x68
 800563a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <HAL_PCD_EP_DB_Transmit+0x6de>
 8005646:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005648:	3b01      	subs	r3, #1
 800564a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800564c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29a      	uxth	r2, r3
 8005652:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005654:	b29b      	uxth	r3, r3
 8005656:	029b      	lsls	r3, r3, #10
 8005658:	b29b      	uxth	r3, r3
 800565a:	4313      	orrs	r3, r2
 800565c:	b29b      	uxth	r3, r3
 800565e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005666:	b29a      	uxth	r2, r3
 8005668:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800566a:	801a      	strh	r2, [r3, #0]
 800566c:	e041      	b.n	80056f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800566e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10a      	bne.n	800568c <HAL_PCD_EP_DB_Transmit+0x71e>
 8005676:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005684:	b29a      	uxth	r2, r3
 8005686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005688:	801a      	strh	r2, [r3, #0]
 800568a:	e032      	b.n	80056f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800568c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_PCD_EP_DB_Transmit+0x738>
 80056a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056a2:	3301      	adds	r3, #1
 80056a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	029b      	lsls	r3, r3, #10
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	4313      	orrs	r3, r2
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	e019      	b.n	80056f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	785b      	ldrb	r3, [r3, #1]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d115      	bne.n	80056f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d4:	4413      	add	r3, r2
 80056d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	011a      	lsls	r2, r3, #4
 80056de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e0:	4413      	add	r3, r2
 80056e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6959      	ldr	r1, [r3, #20]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	895a      	ldrh	r2, [r3, #10]
 80056fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005702:	b29b      	uxth	r3, r3
 8005704:	f004 f8a5 	bl	8009852 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800571e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005722:	82bb      	strh	r3, [r7, #20]
 8005724:	8abb      	ldrh	r3, [r7, #20]
 8005726:	f083 0310 	eor.w	r3, r3, #16
 800572a:	82bb      	strh	r3, [r7, #20]
 800572c:	8abb      	ldrh	r3, [r7, #20]
 800572e:	f083 0320 	eor.w	r3, r3, #32
 8005732:	82bb      	strh	r3, [r7, #20]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	441a      	add	r2, r3
 8005742:	8abb      	ldrh	r3, [r7, #20]
 8005744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800574c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005754:	b29b      	uxth	r3, r3
 8005756:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3790      	adds	r7, #144	@ 0x90
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005762:	b480      	push	{r7}
 8005764:	b087      	sub	sp, #28
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	607b      	str	r3, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	817b      	strh	r3, [r7, #10]
 8005770:	4613      	mov	r3, r2
 8005772:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005774:	897b      	ldrh	r3, [r7, #10]
 8005776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005780:	897b      	ldrh	r3, [r7, #10]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e009      	b.n	80057ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005798:	897a      	ldrh	r2, [r7, #10]
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80057ac:	893b      	ldrh	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d107      	bne.n	80057c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	80da      	strh	r2, [r3, #6]
 80057c0:	e00b      	b.n	80057da <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2201      	movs	r2, #1
 80057c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	0c1b      	lsrs	r3, r3, #16
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr
	...

080057e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e272      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8087 	beq.w	8005916 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005808:	4b92      	ldr	r3, [pc, #584]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b04      	cmp	r3, #4
 8005812:	d00c      	beq.n	800582e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005814:	4b8f      	ldr	r3, [pc, #572]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 030c 	and.w	r3, r3, #12
 800581c:	2b08      	cmp	r3, #8
 800581e:	d112      	bne.n	8005846 <HAL_RCC_OscConfig+0x5e>
 8005820:	4b8c      	ldr	r3, [pc, #560]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800582c:	d10b      	bne.n	8005846 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800582e:	4b89      	ldr	r3, [pc, #548]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d06c      	beq.n	8005914 <HAL_RCC_OscConfig+0x12c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d168      	bne.n	8005914 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e24c      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800584e:	d106      	bne.n	800585e <HAL_RCC_OscConfig+0x76>
 8005850:	4b80      	ldr	r3, [pc, #512]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a7f      	ldr	r2, [pc, #508]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	e02e      	b.n	80058bc <HAL_RCC_OscConfig+0xd4>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10c      	bne.n	8005880 <HAL_RCC_OscConfig+0x98>
 8005866:	4b7b      	ldr	r3, [pc, #492]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a7a      	ldr	r2, [pc, #488]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 800586c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	4b78      	ldr	r3, [pc, #480]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a77      	ldr	r2, [pc, #476]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005878:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e01d      	b.n	80058bc <HAL_RCC_OscConfig+0xd4>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005888:	d10c      	bne.n	80058a4 <HAL_RCC_OscConfig+0xbc>
 800588a:	4b72      	ldr	r3, [pc, #456]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a71      	ldr	r2, [pc, #452]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	4b6f      	ldr	r3, [pc, #444]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a6e      	ldr	r2, [pc, #440]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 800589c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	e00b      	b.n	80058bc <HAL_RCC_OscConfig+0xd4>
 80058a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a6a      	ldr	r2, [pc, #424]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 80058aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	4b68      	ldr	r3, [pc, #416]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a67      	ldr	r2, [pc, #412]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 80058b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d013      	beq.n	80058ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c4:	f7fd ff0e 	bl	80036e4 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058cc:	f7fd ff0a 	bl	80036e4 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b64      	cmp	r3, #100	@ 0x64
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e200      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058de:	4b5d      	ldr	r3, [pc, #372]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0xe4>
 80058ea:	e014      	b.n	8005916 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ec:	f7fd fefa 	bl	80036e4 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f4:	f7fd fef6 	bl	80036e4 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b64      	cmp	r3, #100	@ 0x64
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e1ec      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005906:	4b53      	ldr	r3, [pc, #332]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <HAL_RCC_OscConfig+0x10c>
 8005912:	e000      	b.n	8005916 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d063      	beq.n	80059ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005922:	4b4c      	ldr	r3, [pc, #304]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800592e:	4b49      	ldr	r3, [pc, #292]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b08      	cmp	r3, #8
 8005938:	d11c      	bne.n	8005974 <HAL_RCC_OscConfig+0x18c>
 800593a:	4b46      	ldr	r3, [pc, #280]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d116      	bne.n	8005974 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005946:	4b43      	ldr	r3, [pc, #268]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_RCC_OscConfig+0x176>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d001      	beq.n	800595e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e1c0      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4939      	ldr	r1, [pc, #228]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 800596e:	4313      	orrs	r3, r2
 8005970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005972:	e03a      	b.n	80059ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d020      	beq.n	80059be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800597c:	4b36      	ldr	r3, [pc, #216]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005982:	f7fd feaf 	bl	80036e4 <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598a:	f7fd feab 	bl	80036e4 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e1a1      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599c:	4b2d      	ldr	r3, [pc, #180]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f0      	beq.n	800598a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4927      	ldr	r1, [pc, #156]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	600b      	str	r3, [r1, #0]
 80059bc:	e015      	b.n	80059ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059be:	4b26      	ldr	r3, [pc, #152]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c4:	f7fd fe8e 	bl	80036e4 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059cc:	f7fd fe8a 	bl	80036e4 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e180      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059de:	4b1d      	ldr	r3, [pc, #116]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f0      	bne.n	80059cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d03a      	beq.n	8005a6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d019      	beq.n	8005a32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059fe:	4b17      	ldr	r3, [pc, #92]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a04:	f7fd fe6e 	bl	80036e4 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a0c:	f7fd fe6a 	bl	80036e4 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e160      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a54 <HAL_RCC_OscConfig+0x26c>)
 8005a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0f0      	beq.n	8005a0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	f000 fa9c 	bl	8005f68 <RCC_Delay>
 8005a30:	e01c      	b.n	8005a6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a32:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a38:	f7fd fe54 	bl	80036e4 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a3e:	e00f      	b.n	8005a60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a40:	f7fd fe50 	bl	80036e4 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d908      	bls.n	8005a60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e146      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
 8005a52:	bf00      	nop
 8005a54:	40021000 	.word	0x40021000
 8005a58:	42420000 	.word	0x42420000
 8005a5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a60:	4b92      	ldr	r3, [pc, #584]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e9      	bne.n	8005a40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80a6 	beq.w	8005bc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a7e:	4b8b      	ldr	r3, [pc, #556]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10d      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8a:	4b88      	ldr	r3, [pc, #544]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	4a87      	ldr	r2, [pc, #540]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a94:	61d3      	str	r3, [r2, #28]
 8005a96:	4b85      	ldr	r3, [pc, #532]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa6:	4b82      	ldr	r3, [pc, #520]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d118      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a7e      	ldr	r2, [pc, #504]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c8>)
 8005ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005abe:	f7fd fe11 	bl	80036e4 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ac6:	f7fd fe0d 	bl	80036e4 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b64      	cmp	r3, #100	@ 0x64
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e103      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ad8:	4b75      	ldr	r3, [pc, #468]	@ (8005cb0 <HAL_RCC_OscConfig+0x4c8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d106      	bne.n	8005afa <HAL_RCC_OscConfig+0x312>
 8005aec:	4b6f      	ldr	r3, [pc, #444]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	4a6e      	ldr	r2, [pc, #440]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	6213      	str	r3, [r2, #32]
 8005af8:	e02d      	b.n	8005b56 <HAL_RCC_OscConfig+0x36e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCC_OscConfig+0x334>
 8005b02:	4b6a      	ldr	r3, [pc, #424]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	4a69      	ldr	r2, [pc, #420]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	6213      	str	r3, [r2, #32]
 8005b0e:	4b67      	ldr	r3, [pc, #412]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	4a66      	ldr	r2, [pc, #408]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b14:	f023 0304 	bic.w	r3, r3, #4
 8005b18:	6213      	str	r3, [r2, #32]
 8005b1a:	e01c      	b.n	8005b56 <HAL_RCC_OscConfig+0x36e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	2b05      	cmp	r3, #5
 8005b22:	d10c      	bne.n	8005b3e <HAL_RCC_OscConfig+0x356>
 8005b24:	4b61      	ldr	r3, [pc, #388]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	4a60      	ldr	r2, [pc, #384]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b2a:	f043 0304 	orr.w	r3, r3, #4
 8005b2e:	6213      	str	r3, [r2, #32]
 8005b30:	4b5e      	ldr	r3, [pc, #376]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	4a5d      	ldr	r2, [pc, #372]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b36:	f043 0301 	orr.w	r3, r3, #1
 8005b3a:	6213      	str	r3, [r2, #32]
 8005b3c:	e00b      	b.n	8005b56 <HAL_RCC_OscConfig+0x36e>
 8005b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	4a5a      	ldr	r2, [pc, #360]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	6213      	str	r3, [r2, #32]
 8005b4a:	4b58      	ldr	r3, [pc, #352]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	4a57      	ldr	r2, [pc, #348]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b50:	f023 0304 	bic.w	r3, r3, #4
 8005b54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d015      	beq.n	8005b8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b5e:	f7fd fdc1 	bl	80036e4 <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b64:	e00a      	b.n	8005b7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b66:	f7fd fdbd 	bl	80036e4 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e0b1      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ee      	beq.n	8005b66 <HAL_RCC_OscConfig+0x37e>
 8005b88:	e014      	b.n	8005bb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b8a:	f7fd fdab 	bl	80036e4 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b92:	f7fd fda7 	bl	80036e4 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e09b      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba8:	4b40      	ldr	r3, [pc, #256]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1ee      	bne.n	8005b92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bb4:	7dfb      	ldrb	r3, [r7, #23]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d105      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bba:	4b3c      	ldr	r3, [pc, #240]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	4a3b      	ldr	r2, [pc, #236]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 8087 	beq.w	8005cde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bd0:	4b36      	ldr	r3, [pc, #216]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f003 030c 	and.w	r3, r3, #12
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d061      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d146      	bne.n	8005c72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be4:	4b33      	ldr	r3, [pc, #204]	@ (8005cb4 <HAL_RCC_OscConfig+0x4cc>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bea:	f7fd fd7b 	bl	80036e4 <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf2:	f7fd fd77 	bl	80036e4 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e06d      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c04:	4b29      	ldr	r3, [pc, #164]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f0      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c18:	d108      	bne.n	8005c2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c1a:	4b24      	ldr	r3, [pc, #144]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	4921      	ldr	r1, [pc, #132]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a19      	ldr	r1, [r3, #32]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	491b      	ldr	r1, [pc, #108]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c44:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb4 <HAL_RCC_OscConfig+0x4cc>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4a:	f7fd fd4b 	bl	80036e4 <HAL_GetTick>
 8005c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c52:	f7fd fd47 	bl	80036e4 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e03d      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c64:	4b11      	ldr	r3, [pc, #68]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0f0      	beq.n	8005c52 <HAL_RCC_OscConfig+0x46a>
 8005c70:	e035      	b.n	8005cde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c72:	4b10      	ldr	r3, [pc, #64]	@ (8005cb4 <HAL_RCC_OscConfig+0x4cc>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c78:	f7fd fd34 	bl	80036e4 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c80:	f7fd fd30 	bl	80036e4 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e026      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c92:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <HAL_RCC_OscConfig+0x4c4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x498>
 8005c9e:	e01e      	b.n	8005cde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d107      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e019      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	40007000 	.word	0x40007000
 8005cb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce8 <HAL_RCC_OscConfig+0x500>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d106      	bne.n	8005cda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d001      	beq.n	8005cde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40021000 	.word	0x40021000

08005cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e0d0      	b.n	8005ea2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d00:	4b6a      	ldr	r3, [pc, #424]	@ (8005eac <HAL_RCC_ClockConfig+0x1c0>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d910      	bls.n	8005d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0e:	4b67      	ldr	r3, [pc, #412]	@ (8005eac <HAL_RCC_ClockConfig+0x1c0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f023 0207 	bic.w	r2, r3, #7
 8005d16:	4965      	ldr	r1, [pc, #404]	@ (8005eac <HAL_RCC_ClockConfig+0x1c0>)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1e:	4b63      	ldr	r3, [pc, #396]	@ (8005eac <HAL_RCC_ClockConfig+0x1c0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d001      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0b8      	b.n	8005ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d020      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d48:	4b59      	ldr	r3, [pc, #356]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	4a58      	ldr	r2, [pc, #352]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d005      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d60:	4b53      	ldr	r3, [pc, #332]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	4a52      	ldr	r2, [pc, #328]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005d6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d6c:	4b50      	ldr	r3, [pc, #320]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	494d      	ldr	r1, [pc, #308]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d040      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d107      	bne.n	8005da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d92:	4b47      	ldr	r3, [pc, #284]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d115      	bne.n	8005dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e07f      	b.n	8005ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d107      	bne.n	8005dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005daa:	4b41      	ldr	r3, [pc, #260]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e073      	b.n	8005ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dba:	4b3d      	ldr	r3, [pc, #244]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e06b      	b.n	8005ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dca:	4b39      	ldr	r3, [pc, #228]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f023 0203 	bic.w	r2, r3, #3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	4936      	ldr	r1, [pc, #216]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ddc:	f7fd fc82 	bl	80036e4 <HAL_GetTick>
 8005de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de2:	e00a      	b.n	8005dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005de4:	f7fd fc7e 	bl	80036e4 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e053      	b.n	8005ea2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f003 020c 	and.w	r2, r3, #12
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d1eb      	bne.n	8005de4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e0c:	4b27      	ldr	r3, [pc, #156]	@ (8005eac <HAL_RCC_ClockConfig+0x1c0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d210      	bcs.n	8005e3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1a:	4b24      	ldr	r3, [pc, #144]	@ (8005eac <HAL_RCC_ClockConfig+0x1c0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 0207 	bic.w	r2, r3, #7
 8005e22:	4922      	ldr	r1, [pc, #136]	@ (8005eac <HAL_RCC_ClockConfig+0x1c0>)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2a:	4b20      	ldr	r3, [pc, #128]	@ (8005eac <HAL_RCC_ClockConfig+0x1c0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d001      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e032      	b.n	8005ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e48:	4b19      	ldr	r3, [pc, #100]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	4916      	ldr	r1, [pc, #88]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d009      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e66:	4b12      	ldr	r3, [pc, #72]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	490e      	ldr	r1, [pc, #56]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e7a:	f000 f821 	bl	8005ec0 <HAL_RCC_GetSysClockFreq>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	091b      	lsrs	r3, r3, #4
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	490a      	ldr	r1, [pc, #40]	@ (8005eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e8c:	5ccb      	ldrb	r3, [r1, r3]
 8005e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e92:	4a09      	ldr	r2, [pc, #36]	@ (8005eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8005e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e96:	4b09      	ldr	r3, [pc, #36]	@ (8005ebc <HAL_RCC_ClockConfig+0x1d0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fd fbe0 	bl	8003660 <HAL_InitTick>

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40022000 	.word	0x40022000
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	0800d0b4 	.word	0x0800d0b4
 8005eb8:	20000008 	.word	0x20000008
 8005ebc:	2000000c 	.word	0x2000000c

08005ec0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60bb      	str	r3, [r7, #8]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005eda:	4b1e      	ldr	r3, [pc, #120]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 030c 	and.w	r3, r3, #12
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d002      	beq.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x30>
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d003      	beq.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x36>
 8005eee:	e027      	b.n	8005f40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ef0:	4b19      	ldr	r3, [pc, #100]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ef2:	613b      	str	r3, [r7, #16]
      break;
 8005ef4:	e027      	b.n	8005f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	0c9b      	lsrs	r3, r3, #18
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	4a17      	ldr	r2, [pc, #92]	@ (8005f5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005f00:	5cd3      	ldrb	r3, [r2, r3]
 8005f02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d010      	beq.n	8005f30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f0e:	4b11      	ldr	r3, [pc, #68]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	0c5b      	lsrs	r3, r3, #17
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	4a11      	ldr	r2, [pc, #68]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f1a:	5cd3      	ldrb	r3, [r2, r3]
 8005f1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a0d      	ldr	r2, [pc, #52]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f22:	fb03 f202 	mul.w	r2, r3, r2
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	e004      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a0c      	ldr	r2, [pc, #48]	@ (8005f64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f34:	fb02 f303 	mul.w	r3, r2, r3
 8005f38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	613b      	str	r3, [r7, #16]
      break;
 8005f3e:	e002      	b.n	8005f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f40:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f42:	613b      	str	r3, [r7, #16]
      break;
 8005f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f46:	693b      	ldr	r3, [r7, #16]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40021000 	.word	0x40021000
 8005f58:	007a1200 	.word	0x007a1200
 8005f5c:	0800d0c4 	.word	0x0800d0c4
 8005f60:	0800d0d4 	.word	0x0800d0d4
 8005f64:	003d0900 	.word	0x003d0900

08005f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f70:	4b0a      	ldr	r3, [pc, #40]	@ (8005f9c <RCC_Delay+0x34>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa0 <RCC_Delay+0x38>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0a5b      	lsrs	r3, r3, #9
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f84:	bf00      	nop
  }
  while (Delay --);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	60fa      	str	r2, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f9      	bne.n	8005f84 <RCC_Delay+0x1c>
}
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr
 8005f9c:	20000008 	.word	0x20000008
 8005fa0:	10624dd3 	.word	0x10624dd3

08005fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d07d      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10d      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd0:	4b4c      	ldr	r3, [pc, #304]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fda:	61d3      	str	r3, [r2, #28]
 8005fdc:	4b49      	ldr	r3, [pc, #292]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fe4:	60bb      	str	r3, [r7, #8]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fec:	4b46      	ldr	r3, [pc, #280]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d118      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ff8:	4b43      	ldr	r3, [pc, #268]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a42      	ldr	r2, [pc, #264]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006002:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006004:	f7fd fb6e 	bl	80036e4 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600a:	e008      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800600c:	f7fd fb6a 	bl	80036e4 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b64      	cmp	r3, #100	@ 0x64
 8006018:	d901      	bls.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e06d      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601e:	4b3a      	ldr	r3, [pc, #232]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800602a:	4b36      	ldr	r3, [pc, #216]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006032:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d02e      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	429a      	cmp	r2, r3
 8006046:	d027      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006048:	4b2e      	ldr	r3, [pc, #184]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006050:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006052:	4b2e      	ldr	r3, [pc, #184]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006054:	2201      	movs	r2, #1
 8006056:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006058:	4b2c      	ldr	r3, [pc, #176]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800605e:	4a29      	ldr	r2, [pc, #164]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d014      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606e:	f7fd fb39 	bl	80036e4 <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006074:	e00a      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006076:	f7fd fb35 	bl	80036e4 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006084:	4293      	cmp	r3, r2
 8006086:	d901      	bls.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e036      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608c:	4b1d      	ldr	r3, [pc, #116]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0ee      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006098:	4b1a      	ldr	r3, [pc, #104]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4917      	ldr	r1, [pc, #92]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d105      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b0:	4b14      	ldr	r3, [pc, #80]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	4a13      	ldr	r2, [pc, #76]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	490b      	ldr	r1, [pc, #44]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060e6:	4b07      	ldr	r3, [pc, #28]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	4904      	ldr	r1, [pc, #16]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40021000 	.word	0x40021000
 8006108:	40007000 	.word	0x40007000
 800610c:	42420440 	.word	0x42420440

08006110 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e076      	b.n	8006210 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d108      	bne.n	800613c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006132:	d009      	beq.n	8006148 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	61da      	str	r2, [r3, #28]
 800613a:	e005      	b.n	8006148 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fc ff56 	bl	8003014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800617e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061cc:	ea42 0103 	orr.w	r1, r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	0c1a      	lsrs	r2, r3, #16
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f002 0204 	and.w	r2, r2, #4
 80061ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69da      	ldr	r2, [r3, #28]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08c      	sub	sp, #48	@ 0x30
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006226:	2301      	movs	r3, #1
 8006228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_SPI_TransmitReceive+0x26>
 800623a:	2302      	movs	r3, #2
 800623c:	e198      	b.n	8006570 <HAL_SPI_TransmitReceive+0x358>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006246:	f7fd fa4d 	bl	80036e4 <HAL_GetTick>
 800624a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800625c:	887b      	ldrh	r3, [r7, #2]
 800625e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006260:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006264:	2b01      	cmp	r3, #1
 8006266:	d00f      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x70>
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800626e:	d107      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d103      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x68>
 8006278:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800627c:	2b04      	cmp	r3, #4
 800627e:	d003      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006280:	2302      	movs	r3, #2
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006286:	e16d      	b.n	8006564 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <HAL_SPI_TransmitReceive+0x82>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_SPI_TransmitReceive+0x82>
 8006294:	887b      	ldrh	r3, [r7, #2]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80062a0:	e160      	b.n	8006564 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d003      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2205      	movs	r2, #5
 80062b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	887a      	ldrh	r2, [r7, #2]
 80062c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	887a      	ldrh	r2, [r7, #2]
 80062cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	887a      	ldrh	r2, [r7, #2]
 80062d8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	887a      	ldrh	r2, [r7, #2]
 80062de:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f6:	2b40      	cmp	r3, #64	@ 0x40
 80062f8:	d007      	beq.n	800630a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006312:	d17c      	bne.n	800640e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_SPI_TransmitReceive+0x10a>
 800631c:	8b7b      	ldrh	r3, [r7, #26]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d16a      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006326:	881a      	ldrh	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006332:	1c9a      	adds	r2, r3, #2
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006346:	e057      	b.n	80063f8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	d11b      	bne.n	800638e <HAL_SPI_TransmitReceive+0x176>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d016      	beq.n	800638e <HAL_SPI_TransmitReceive+0x176>
 8006360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006362:	2b01      	cmp	r3, #1
 8006364:	d113      	bne.n	800638e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636a:	881a      	ldrh	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006376:	1c9a      	adds	r2, r3, #2
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d119      	bne.n	80063d0 <HAL_SPI_TransmitReceive+0x1b8>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d014      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	b292      	uxth	r2, r2
 80063b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	1c9a      	adds	r2, r3, #2
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063cc:	2301      	movs	r3, #1
 80063ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063d0:	f7fd f988 	bl	80036e4 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063dc:	429a      	cmp	r2, r3
 80063de:	d80b      	bhi.n	80063f8 <HAL_SPI_TransmitReceive+0x1e0>
 80063e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	d007      	beq.n	80063f8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80063f6:	e0b5      	b.n	8006564 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1a2      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x130>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d19d      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x130>
 800640c:	e080      	b.n	8006510 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_SPI_TransmitReceive+0x204>
 8006416:	8b7b      	ldrh	r3, [r7, #26]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d16f      	bne.n	80064fc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	7812      	ldrb	r2, [r2, #0]
 8006428:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006442:	e05b      	b.n	80064fc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b02      	cmp	r3, #2
 8006450:	d11c      	bne.n	800648c <HAL_SPI_TransmitReceive+0x274>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006456:	b29b      	uxth	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d017      	beq.n	800648c <HAL_SPI_TransmitReceive+0x274>
 800645c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645e:	2b01      	cmp	r3, #1
 8006460:	d114      	bne.n	800648c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	7812      	ldrb	r2, [r2, #0]
 800646e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b01      	cmp	r3, #1
 8006498:	d119      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x2b6>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800649e:	b29b      	uxth	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d014      	beq.n	80064ce <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064ca:	2301      	movs	r3, #1
 80064cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064ce:	f7fd f909 	bl	80036e4 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064da:	429a      	cmp	r2, r3
 80064dc:	d803      	bhi.n	80064e6 <HAL_SPI_TransmitReceive+0x2ce>
 80064de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e4:	d102      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x2d4>
 80064e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d107      	bne.n	80064fc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80064fa:	e033      	b.n	8006564 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d19e      	bne.n	8006444 <HAL_SPI_TransmitReceive+0x22c>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d199      	bne.n	8006444 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006512:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f9b3 	bl	8006880 <SPI_EndRxTxTransaction>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d006      	beq.n	800652e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2220      	movs	r2, #32
 800652a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800652c:	e01a      	b.n	8006564 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006536:	2300      	movs	r3, #0
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800655a:	e003      	b.n	8006564 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800656c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006570:	4618      	mov	r0, r3
 8006572:	3730      	adds	r7, #48	@ 0x30
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10e      	bne.n	80065b8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d009      	beq.n	80065b8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d004      	beq.n	80065b8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4798      	blx	r3
    return;
 80065b6:	e0b7      	b.n	8006728 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <HAL_SPI_IRQHandler+0x5e>
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	4798      	blx	r3
    return;
 80065d4:	e0a8      	b.n	8006728 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d105      	bne.n	80065ec <HAL_SPI_IRQHandler+0x74>
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 809e 	beq.w	8006728 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 8098 	beq.w	8006728 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d023      	beq.n	800664a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b03      	cmp	r3, #3
 800660c:	d011      	beq.n	8006632 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006612:	f043 0204 	orr.w	r2, r3, #4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	e00b      	b.n	800664a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	693b      	ldr	r3, [r7, #16]
        return;
 8006648:	e06e      	b.n	8006728 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d014      	beq.n	800667e <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006658:	f043 0201 	orr.w	r2, r3, #1
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006682:	2b00      	cmp	r3, #0
 8006684:	d04f      	beq.n	8006726 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006694:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d104      	bne.n	80066b2 <HAL_SPI_IRQHandler+0x13a>
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d034      	beq.n	800671c <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0203 	bic.w	r2, r2, #3
 80066c0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d011      	beq.n	80066ee <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ce:	4a18      	ldr	r2, [pc, #96]	@ (8006730 <HAL_SPI_IRQHandler+0x1b8>)
 80066d0:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fd f91c 	bl	8003914 <HAL_DMA_Abort_IT>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d016      	beq.n	8006724 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006730 <HAL_SPI_IRQHandler+0x1b8>)
 80066fc:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006702:	4618      	mov	r0, r3
 8006704:	f7fd f906 	bl	8003914 <HAL_DMA_Abort_IT>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006712:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800671a:	e003      	b.n	8006724 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f809 	bl	8006734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006722:	e000      	b.n	8006726 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8006724:	bf00      	nop
    return;
 8006726:	bf00      	nop
  }
}
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	08006747 	.word	0x08006747

08006734 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr

08006746 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006752:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7ff ffe7 	bl	8006734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006780:	f7fc ffb0 	bl	80036e4 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	4413      	add	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006790:	f7fc ffa8 	bl	80036e4 <HAL_GetTick>
 8006794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006796:	4b39      	ldr	r3, [pc, #228]	@ (800687c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	015b      	lsls	r3, r3, #5
 800679c:	0d1b      	lsrs	r3, r3, #20
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	fb02 f303 	mul.w	r3, r2, r3
 80067a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067a6:	e054      	b.n	8006852 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ae:	d050      	beq.n	8006852 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067b0:	f7fc ff98 	bl	80036e4 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d902      	bls.n	80067c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d13d      	bne.n	8006842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067de:	d111      	bne.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067e8:	d004      	beq.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f2:	d107      	bne.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800680c:	d10f      	bne.n	800682e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800682c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e017      	b.n	8006872 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	3b01      	subs	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4013      	ands	r3, r2
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	bf0c      	ite	eq
 8006862:	2301      	moveq	r3, #1
 8006864:	2300      	movne	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	429a      	cmp	r2, r3
 800686e:	d19b      	bne.n	80067a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000008 	.word	0x20000008

08006880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2200      	movs	r2, #0
 8006894:	2180      	movs	r1, #128	@ 0x80
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7ff ff6a 	bl	8006770 <SPI_WaitFlagStateUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d007      	beq.n	80068b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a6:	f043 0220 	orr.w	r2, r3, #32
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e000      	b.n	80068b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <LL_EXTI_EnableIT_0_31>:
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80068c4:	4b05      	ldr	r3, [pc, #20]	@ (80068dc <LL_EXTI_EnableIT_0_31+0x20>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	4904      	ldr	r1, [pc, #16]	@ (80068dc <LL_EXTI_EnableIT_0_31+0x20>)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	600b      	str	r3, [r1, #0]
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40010400 	.word	0x40010400

080068e0 <LL_EXTI_DisableIT_0_31>:
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80068e8:	4b05      	ldr	r3, [pc, #20]	@ (8006900 <LL_EXTI_DisableIT_0_31+0x20>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	43db      	mvns	r3, r3
 80068f0:	4903      	ldr	r1, [pc, #12]	@ (8006900 <LL_EXTI_DisableIT_0_31+0x20>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	600b      	str	r3, [r1, #0]
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr
 8006900:	40010400 	.word	0x40010400

08006904 <LL_EXTI_EnableEvent_0_31>:
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800690c:	4b05      	ldr	r3, [pc, #20]	@ (8006924 <LL_EXTI_EnableEvent_0_31+0x20>)
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	4904      	ldr	r1, [pc, #16]	@ (8006924 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4313      	orrs	r3, r2
 8006916:	604b      	str	r3, [r1, #4]
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	bc80      	pop	{r7}
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40010400 	.word	0x40010400

08006928 <LL_EXTI_DisableEvent_0_31>:
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8006930:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <LL_EXTI_DisableEvent_0_31+0x20>)
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	43db      	mvns	r3, r3
 8006938:	4903      	ldr	r1, [pc, #12]	@ (8006948 <LL_EXTI_DisableEvent_0_31+0x20>)
 800693a:	4013      	ands	r3, r2
 800693c:	604b      	str	r3, [r1, #4]
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	bc80      	pop	{r7}
 8006946:	4770      	bx	lr
 8006948:	40010400 	.word	0x40010400

0800694c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8006954:	4b05      	ldr	r3, [pc, #20]	@ (800696c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	4904      	ldr	r1, [pc, #16]	@ (800696c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4313      	orrs	r3, r2
 800695e:	608b      	str	r3, [r1, #8]
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40010400 	.word	0x40010400

08006970 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8006978:	4b05      	ldr	r3, [pc, #20]	@ (8006990 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	43db      	mvns	r3, r3
 8006980:	4903      	ldr	r1, [pc, #12]	@ (8006990 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8006982:	4013      	ands	r3, r2
 8006984:	608b      	str	r3, [r1, #8]
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr
 8006990:	40010400 	.word	0x40010400

08006994 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800699c:	4b05      	ldr	r3, [pc, #20]	@ (80069b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	4904      	ldr	r1, [pc, #16]	@ (80069b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60cb      	str	r3, [r1, #12]
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40010400 	.word	0x40010400

080069b8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80069c0:	4b05      	ldr	r3, [pc, #20]	@ (80069d8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	43db      	mvns	r3, r3
 80069c8:	4903      	ldr	r1, [pc, #12]	@ (80069d8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	60cb      	str	r3, [r1, #12]
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr
 80069d8:	40010400 	.word	0x40010400

080069dc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	791b      	ldrb	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d065      	beq.n	8006abc <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d06b      	beq.n	8006ad0 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	795b      	ldrb	r3, [r3, #5]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d01c      	beq.n	8006a3a <LL_EXTI_Init+0x5e>
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	dc25      	bgt.n	8006a50 <LL_EXTI_Init+0x74>
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <LL_EXTI_Init+0x32>
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d00b      	beq.n	8006a24 <LL_EXTI_Init+0x48>
 8006a0c:	e020      	b.n	8006a50 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff ff88 	bl	8006928 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff ff4d 	bl	80068bc <LL_EXTI_EnableIT_0_31>
          break;
 8006a22:	e018      	b.n	8006a56 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff ff59 	bl	80068e0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff ff66 	bl	8006904 <LL_EXTI_EnableEvent_0_31>
          break;
 8006a38:	e00d      	b.n	8006a56 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff ff3c 	bl	80068bc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff ff5b 	bl	8006904 <LL_EXTI_EnableEvent_0_31>
          break;
 8006a4e:	e002      	b.n	8006a56 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
          break;
 8006a54:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	799b      	ldrb	r3, [r3, #6]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d038      	beq.n	8006ad0 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	799b      	ldrb	r3, [r3, #6]
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d01c      	beq.n	8006aa0 <LL_EXTI_Init+0xc4>
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	dc25      	bgt.n	8006ab6 <LL_EXTI_Init+0xda>
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d002      	beq.n	8006a74 <LL_EXTI_Init+0x98>
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d00b      	beq.n	8006a8a <LL_EXTI_Init+0xae>
 8006a72:	e020      	b.n	8006ab6 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff ff9d 	bl	80069b8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff ff62 	bl	800694c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006a88:	e022      	b.n	8006ad0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff ff6e 	bl	8006970 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff ff7b 	bl	8006994 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006a9e:	e017      	b.n	8006ad0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff ff51 	bl	800694c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff ff70 	bl	8006994 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006ab4:	e00c      	b.n	8006ad0 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	73fb      	strb	r3, [r7, #15]
            break;
 8006aba:	e009      	b.n	8006ad0 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff ff0d 	bl	80068e0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff ff2c 	bl	8006928 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <LL_GPIO_SetPinMode>:
{
 8006ada:	b490      	push	{r4, r7}
 8006adc:	b088      	sub	sp, #32
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	0e1b      	lsrs	r3, r3, #24
 8006aee:	4413      	add	r3, r2
 8006af0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8006af2:	6822      	ldr	r2, [r4, #0]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	fa93 f3a3 	rbit	r3, r3
 8006afe:	613b      	str	r3, [r7, #16]
  return result;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	fab3 f383 	clz	r3, r3
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	210f      	movs	r1, #15
 8006b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b10:	43db      	mvns	r3, r3
 8006b12:	401a      	ands	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	fa93 f3a3 	rbit	r3, r3
 8006b1e:	61bb      	str	r3, [r7, #24]
  return result;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	fab3 f383 	clz	r3, r3
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b30:	4313      	orrs	r3, r2
 8006b32:	6023      	str	r3, [r4, #0]
}
 8006b34:	bf00      	nop
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc90      	pop	{r4, r7}
 8006b3c:	4770      	bx	lr

08006b3e <LL_GPIO_SetPinSpeed>:
{
 8006b3e:	b490      	push	{r4, r7}
 8006b40:	b088      	sub	sp, #32
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	0e1b      	lsrs	r3, r3, #24
 8006b52:	4413      	add	r3, r2
 8006b54:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8006b56:	6822      	ldr	r2, [r4, #0]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	fa93 f3a3 	rbit	r3, r3
 8006b62:	613b      	str	r3, [r7, #16]
  return result;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	fab3 f383 	clz	r3, r3
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	2103      	movs	r1, #3
 8006b70:	fa01 f303 	lsl.w	r3, r1, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	401a      	ands	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	fa93 f3a3 	rbit	r3, r3
 8006b82:	61bb      	str	r3, [r7, #24]
  return result;
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	fab3 f383 	clz	r3, r3
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	4313      	orrs	r3, r2
 8006b96:	6023      	str	r3, [r4, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	3720      	adds	r7, #32
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc90      	pop	{r4, r7}
 8006ba0:	4770      	bx	lr

08006ba2 <LL_GPIO_SetPinOutputType>:
{
 8006ba2:	b490      	push	{r4, r7}
 8006ba4:	b088      	sub	sp, #32
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	0e1b      	lsrs	r3, r3, #24
 8006bb6:	4413      	add	r3, r2
 8006bb8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	fa93 f3a3 	rbit	r3, r3
 8006bc6:	613b      	str	r3, [r7, #16]
  return result;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	fab3 f383 	clz	r3, r3
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	2104      	movs	r1, #4
 8006bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	401a      	ands	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	fa93 f3a3 	rbit	r3, r3
 8006be6:	61bb      	str	r3, [r7, #24]
  return result;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	fab3 f383 	clz	r3, r3
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	6023      	str	r3, [r4, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	3720      	adds	r7, #32
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc90      	pop	{r4, r7}
 8006c04:	4770      	bx	lr

08006c06 <LL_GPIO_SetPinPull>:
{
 8006c06:	b480      	push	{r7}
 8006c08:	b087      	sub	sp, #28
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	0a1b      	lsrs	r3, r3, #8
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	401a      	ands	r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	fa93 f3a3 	rbit	r3, r3
 8006c2a:	613b      	str	r3, [r7, #16]
  return result;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	fab3 f383 	clz	r3, r3
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	408b      	lsls	r3, r1
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	60da      	str	r2, [r3, #12]
}
 8006c40:	bf00      	nop
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bc80      	pop	{r7}
 8006c48:	4770      	bx	lr

08006c4a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b088      	sub	sp, #32
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	0c1b      	lsrs	r3, r3, #16
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	fa93 f3a3 	rbit	r3, r3
 8006c68:	60fb      	str	r3, [r7, #12]
  return result;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8006c6c:	fab3 f383 	clz	r3, r3
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8006c74:	e044      	b.n	8006d00 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8006c76:	2201      	movs	r2, #1
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	409a      	lsls	r2, r3
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d03a      	beq.n	8006cfa <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	2b07      	cmp	r3, #7
 8006c88:	d806      	bhi.n	8006c98 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8006c8a:	f240 1201 	movw	r2, #257	@ 0x101
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	e008      	b.n	8006caa <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	3b08      	subs	r3, #8
 8006c9c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8006ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ca8:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d106      	bne.n	8006cc0 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	69b9      	ldr	r1, [r7, #24]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff ffa3 	bl	8006c06 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	69b9      	ldr	r1, [r7, #24]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff ff06 	bl	8006ada <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d003      	beq.n	8006cde <LL_GPIO_Init+0x94>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	2b09      	cmp	r3, #9
 8006cdc:	d10d      	bne.n	8006cfa <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	69b9      	ldr	r1, [r7, #24]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff ff29 	bl	8006b3e <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	69b9      	ldr	r1, [r7, #24]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff ff54 	bl	8006ba2 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	fa22 f303 	lsr.w	r3, r2, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1b4      	bne.n	8006c76 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <LL_TIM_SetPrescaler>:
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr

08006d30 <LL_TIM_SetAutoReload>:
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr

08006d4a <LL_TIM_SetRepetitionCounter>:
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <LL_TIM_OC_SetCompareCH1>:
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr

08006d7e <LL_TIM_OC_SetCompareCH2>:
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr

08006d98 <LL_TIM_OC_SetCompareCH3>:
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr

08006db2 <LL_TIM_OC_SetCompareCH4>:
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr

08006dcc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	f043 0201 	orr.w	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	615a      	str	r2, [r3, #20]
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr
	...

08006dec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a27      	ldr	r2, [pc, #156]	@ (8006e9c <LL_TIM_Init+0xb0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00b      	beq.n	8006e1c <LL_TIM_Init+0x30>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0a:	d007      	beq.n	8006e1c <LL_TIM_Init+0x30>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a24      	ldr	r2, [pc, #144]	@ (8006ea0 <LL_TIM_Init+0xb4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <LL_TIM_Init+0x30>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a23      	ldr	r2, [pc, #140]	@ (8006ea4 <LL_TIM_Init+0xb8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d106      	bne.n	8006e2a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e9c <LL_TIM_Init+0xb0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00b      	beq.n	8006e4a <LL_TIM_Init+0x5e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e38:	d007      	beq.n	8006e4a <LL_TIM_Init+0x5e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a18      	ldr	r2, [pc, #96]	@ (8006ea0 <LL_TIM_Init+0xb4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <LL_TIM_Init+0x5e>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a17      	ldr	r2, [pc, #92]	@ (8006ea4 <LL_TIM_Init+0xb8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d106      	bne.n	8006e58 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff ff63 	bl	8006d30 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff ff50 	bl	8006d16 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a08      	ldr	r2, [pc, #32]	@ (8006e9c <LL_TIM_Init+0xb0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d105      	bne.n	8006e8a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff ff60 	bl	8006d4a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff ff9e 	bl	8006dcc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40000400 	.word	0x40000400
 8006ea4:	40000800 	.word	0x40000800

08006ea8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ebe:	d027      	beq.n	8006f10 <LL_TIM_OC_Init+0x68>
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ec6:	d82a      	bhi.n	8006f1e <LL_TIM_OC_Init+0x76>
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ece:	d018      	beq.n	8006f02 <LL_TIM_OC_Init+0x5a>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ed6:	d822      	bhi.n	8006f1e <LL_TIM_OC_Init+0x76>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d003      	beq.n	8006ee6 <LL_TIM_OC_Init+0x3e>
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2b10      	cmp	r3, #16
 8006ee2:	d007      	beq.n	8006ef4 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8006ee4:	e01b      	b.n	8006f1e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f81f 	bl	8006f2c <OC1Config>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef2:	e015      	b.n	8006f20 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f87e 	bl	8006ff8 <OC2Config>
 8006efc:	4603      	mov	r3, r0
 8006efe:	75fb      	strb	r3, [r7, #23]
      break;
 8006f00:	e00e      	b.n	8006f20 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f8e1 	bl	80070cc <OC3Config>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f0e:	e007      	b.n	8006f20 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 f944 	bl	80071a0 <OC4Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1c:	e000      	b.n	8006f20 <LL_TIM_OC_Init+0x78>
      break;
 8006f1e:	bf00      	nop
  }

  return result;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f023 0201 	bic.w	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f023 0202 	bic.w	r2, r3, #2
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f023 0201 	bic.w	r2, r3, #1
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1a      	ldr	r2, [pc, #104]	@ (8006ff4 <OC1Config+0xc8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d11e      	bne.n	8006fcc <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f023 0208 	bic.w	r2, r3, #8
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f023 0204 	bic.w	r2, r3, #4
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff fec0 	bl	8006d64 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	40012c00 	.word	0x40012c00

08006ff8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f023 0210 	bic.w	r2, r3, #16
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f023 0220 	bic.w	r2, r3, #32
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	4313      	orrs	r3, r2
 8007046:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f023 0210 	bic.w	r2, r3, #16
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a1b      	ldr	r2, [pc, #108]	@ (80070c8 <OC2Config+0xd0>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d11f      	bne.n	80070a0 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	019b      	lsls	r3, r3, #6
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	019b      	lsls	r3, r3, #6
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4313      	orrs	r3, r2
 800709e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fe63 	bl	8006d7e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40012c00 	.word	0x40012c00

080070cc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0303 	bic.w	r3, r3, #3
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	021b      	lsls	r3, r3, #8
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a1b      	ldr	r2, [pc, #108]	@ (800719c <OC3Config+0xd0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d11f      	bne.n	8007172 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	029b      	lsls	r3, r3, #10
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	029b      	lsls	r3, r3, #10
 800714e:	4313      	orrs	r3, r2
 8007150:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	015b      	lsls	r3, r3, #5
 800716e:	4313      	orrs	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fe07 	bl	8006d98 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40012c00 	.word	0x40012c00

080071a0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	021b      	lsls	r3, r3, #8
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	031b      	lsls	r3, r3, #12
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	031b      	lsls	r3, r3, #12
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a0f      	ldr	r2, [pc, #60]	@ (8007240 <OC4Config+0xa0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d107      	bne.n	8007218 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	019b      	lsls	r3, r3, #6
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff fdc1 	bl	8006db2 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40012c00 	.word	0x40012c00

08007244 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007244:	b084      	sub	sp, #16
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	f107 0014 	add.w	r0, r7, #20
 8007252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	b004      	add	sp, #16
 8007262:	4770      	bx	lr

08007264 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007274:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007278:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	b29a      	uxth	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr

08007290 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007298:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800729c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	43db      	mvns	r3, r3
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	4013      	ands	r3, r2
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	bc80      	pop	{r7}
 80072c2:	4770      	bx	lr

080072c4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bc80      	pop	{r7}
 80072da:	4770      	bx	lr

080072dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80072dc:	b084      	sub	sp, #16
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	f107 0014 	add.w	r0, r7, #20
 80072ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	bc80      	pop	{r7}
 8007318:	b004      	add	sp, #16
 800731a:	4770      	bx	lr

0800731c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800731c:	b480      	push	{r7}
 800731e:	b09d      	sub	sp, #116	@ 0x74
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800733e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007342:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	78db      	ldrb	r3, [r3, #3]
 800734a:	2b03      	cmp	r3, #3
 800734c:	d81f      	bhi.n	800738e <USB_ActivateEndpoint+0x72>
 800734e:	a201      	add	r2, pc, #4	@ (adr r2, 8007354 <USB_ActivateEndpoint+0x38>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	08007365 	.word	0x08007365
 8007358:	08007381 	.word	0x08007381
 800735c:	08007397 	.word	0x08007397
 8007360:	08007373 	.word	0x08007373
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007364:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007368:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800736c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007370:	e012      	b.n	8007398 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007372:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007376:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800737a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800737e:	e00b      	b.n	8007398 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007380:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007384:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007388:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800738c:	e004      	b.n	8007398 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007394:	e000      	b.n	8007398 <USB_ActivateEndpoint+0x7c>
      break;
 8007396:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	441a      	add	r2, r3
 80073a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80073a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	7812      	ldrb	r2, [r2, #0]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	441a      	add	r2, r3
 80073e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80073ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	7b1b      	ldrb	r3, [r3, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f040 8178 	bne.w	80076f8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8084 	beq.w	800751a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	61bb      	str	r3, [r7, #24]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800741c:	b29b      	uxth	r3, r3
 800741e:	461a      	mov	r2, r3
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	4413      	add	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	011a      	lsls	r2, r3, #4
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	88db      	ldrh	r3, [r3, #6]
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	b29b      	uxth	r3, r3
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	827b      	strh	r3, [r7, #18]
 8007454:	8a7b      	ldrh	r3, [r7, #18]
 8007456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d01b      	beq.n	8007496 <USB_ActivateEndpoint+0x17a>
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29b      	uxth	r3, r3
 800746c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007474:	823b      	strh	r3, [r7, #16]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	441a      	add	r2, r3
 8007480:	8a3b      	ldrh	r3, [r7, #16]
 8007482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800748a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800748e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007492:	b29b      	uxth	r3, r3
 8007494:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	78db      	ldrb	r3, [r3, #3]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d020      	beq.n	80074e0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b4:	81bb      	strh	r3, [r7, #12]
 80074b6:	89bb      	ldrh	r3, [r7, #12]
 80074b8:	f083 0320 	eor.w	r3, r3, #32
 80074bc:	81bb      	strh	r3, [r7, #12]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	441a      	add	r2, r3
 80074c8:	89bb      	ldrh	r3, [r7, #12]
 80074ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074da:	b29b      	uxth	r3, r3
 80074dc:	8013      	strh	r3, [r2, #0]
 80074de:	e2d5      	b.n	8007a8c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074f6:	81fb      	strh	r3, [r7, #14]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	89fb      	ldrh	r3, [r7, #14]
 8007504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800750c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007514:	b29b      	uxth	r3, r3
 8007516:	8013      	strh	r3, [r2, #0]
 8007518:	e2b8      	b.n	8007a8c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	633b      	str	r3, [r7, #48]	@ 0x30
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007524:	b29b      	uxth	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752a:	4413      	add	r3, r2
 800752c:	633b      	str	r3, [r7, #48]	@ 0x30
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	011a      	lsls	r2, r3, #4
 8007534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007536:	4413      	add	r3, r2
 8007538:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800753c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	88db      	ldrh	r3, [r3, #6]
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	b29b      	uxth	r3, r3
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007558:	b29b      	uxth	r3, r3
 800755a:	461a      	mov	r2, r3
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	4413      	add	r3, r2
 8007560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	011a      	lsls	r2, r3, #4
 8007568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756a:	4413      	add	r3, r2
 800756c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007570:	627b      	str	r3, [r7, #36]	@ 0x24
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800757c:	b29a      	uxth	r2, r3
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	801a      	strh	r2, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	2b3e      	cmp	r3, #62	@ 0x3e
 8007588:	d91d      	bls.n	80075c6 <USB_ActivateEndpoint+0x2aa>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	095b      	lsrs	r3, r3, #5
 8007590:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 031f 	and.w	r3, r3, #31
 800759a:	2b00      	cmp	r3, #0
 800759c:	d102      	bne.n	80075a4 <USB_ActivateEndpoint+0x288>
 800759e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075a0:	3b01      	subs	r3, #1
 80075a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	029b      	lsls	r3, r3, #10
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	4313      	orrs	r3, r2
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075be:	b29a      	uxth	r2, r3
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	801a      	strh	r2, [r3, #0]
 80075c4:	e026      	b.n	8007614 <USB_ActivateEndpoint+0x2f8>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <USB_ActivateEndpoint+0x2c8>
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	e017      	b.n	8007614 <USB_ActivateEndpoint+0x2f8>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	085b      	lsrs	r3, r3, #1
 80075ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <USB_ActivateEndpoint+0x2e2>
 80075f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075fa:	3301      	adds	r3, #1
 80075fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29a      	uxth	r2, r3
 8007604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007606:	b29b      	uxth	r3, r3
 8007608:	029b      	lsls	r3, r3, #10
 800760a:	b29b      	uxth	r3, r3
 800760c:	4313      	orrs	r3, r2
 800760e:	b29a      	uxth	r2, r3
 8007610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007612:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007622:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01b      	beq.n	8007664 <USB_ActivateEndpoint+0x348>
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b29b      	uxth	r3, r3
 800763a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800763e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007642:	843b      	strh	r3, [r7, #32]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	441a      	add	r2, r3
 800764e:	8c3b      	ldrh	r3, [r7, #32]
 8007650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007658:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800765c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007660:	b29b      	uxth	r3, r3
 8007662:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d124      	bne.n	80076b6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	b29b      	uxth	r3, r3
 800767a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800767e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007682:	83bb      	strh	r3, [r7, #28]
 8007684:	8bbb      	ldrh	r3, [r7, #28]
 8007686:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800768a:	83bb      	strh	r3, [r7, #28]
 800768c:	8bbb      	ldrh	r3, [r7, #28]
 800768e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007692:	83bb      	strh	r3, [r7, #28]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	441a      	add	r2, r3
 800769e:	8bbb      	ldrh	r3, [r7, #28]
 80076a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	8013      	strh	r3, [r2, #0]
 80076b4:	e1ea      	b.n	8007a8c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076cc:	83fb      	strh	r3, [r7, #30]
 80076ce:	8bfb      	ldrh	r3, [r7, #30]
 80076d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076d4:	83fb      	strh	r3, [r7, #30]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	441a      	add	r2, r3
 80076e0:	8bfb      	ldrh	r3, [r7, #30]
 80076e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	8013      	strh	r3, [r2, #0]
 80076f6:	e1c9      	b.n	8007a8c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	78db      	ldrb	r3, [r3, #3]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d11e      	bne.n	800773e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007716:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	441a      	add	r2, r3
 8007724:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800772c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007730:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007738:	b29b      	uxth	r3, r3
 800773a:	8013      	strh	r3, [r2, #0]
 800773c:	e01d      	b.n	800777a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007754:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	441a      	add	r2, r3
 8007762:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007766:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800776a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800776e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007776:	b29b      	uxth	r3, r3
 8007778:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007784:	b29b      	uxth	r3, r3
 8007786:	461a      	mov	r2, r3
 8007788:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800778a:	4413      	add	r3, r2
 800778c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	011a      	lsls	r2, r3, #4
 8007794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007796:	4413      	add	r3, r2
 8007798:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800779c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	891b      	ldrh	r3, [r3, #8]
 80077a2:	085b      	lsrs	r3, r3, #1
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	461a      	mov	r2, r3
 80077bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077be:	4413      	add	r3, r2
 80077c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	011a      	lsls	r2, r3, #4
 80077c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80077d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	895b      	ldrh	r3, [r3, #10]
 80077d6:	085b      	lsrs	r3, r3, #1
 80077d8:	b29b      	uxth	r3, r3
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077e0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f040 8093 	bne.w	8007912 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80077fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01b      	beq.n	8007840 <USB_ActivateEndpoint+0x524>
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800781a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800781e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	441a      	add	r2, r3
 800782a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800782c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007834:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800783c:	b29b      	uxth	r3, r3
 800783e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800784e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01b      	beq.n	8007890 <USB_ActivateEndpoint+0x574>
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800786a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800786e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	441a      	add	r2, r3
 800787a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800787c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007888:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800788c:	b29b      	uxth	r3, r3
 800788e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80078a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80078aa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078ae:	873b      	strh	r3, [r7, #56]	@ 0x38
 80078b0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80078b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80078b6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	441a      	add	r2, r3
 80078c2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80078c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	441a      	add	r2, r3
 80078fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80078fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800790c:	b29b      	uxth	r3, r3
 800790e:	8013      	strh	r3, [r2, #0]
 8007910:	e0bc      	b.n	8007a8c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007922:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01d      	beq.n	800796a <USB_ActivateEndpoint+0x64e>
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007944:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	441a      	add	r2, r3
 8007952:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800795a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800795e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007966:	b29b      	uxth	r3, r3
 8007968:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800797a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800797e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	d01d      	beq.n	80079c2 <USB_ActivateEndpoint+0x6a6>
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800799c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	441a      	add	r2, r3
 80079aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80079ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079be:	b29b      	uxth	r3, r3
 80079c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	78db      	ldrb	r3, [r3, #3]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d024      	beq.n	8007a14 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079e0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80079e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80079e8:	f083 0320 	eor.w	r3, r3, #32
 80079ec:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	441a      	add	r2, r3
 80079fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80079fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	8013      	strh	r3, [r2, #0]
 8007a12:	e01d      	b.n	8007a50 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a2a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	441a      	add	r2, r3
 8007a38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	441a      	add	r2, r3
 8007a74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007a8c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3774      	adds	r7, #116	@ 0x74
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop

08007a9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b08d      	sub	sp, #52	@ 0x34
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	7b1b      	ldrb	r3, [r3, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f040 808e 	bne.w	8007bcc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d044      	beq.n	8007b42 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	81bb      	strh	r3, [r7, #12]
 8007ac6:	89bb      	ldrh	r3, [r7, #12]
 8007ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01b      	beq.n	8007b08 <USB_DeactivateEndpoint+0x6c>
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae6:	817b      	strh	r3, [r7, #10]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	441a      	add	r2, r3
 8007af2:	897b      	ldrh	r3, [r7, #10]
 8007af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b1e:	813b      	strh	r3, [r7, #8]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	441a      	add	r2, r3
 8007b2a:	893b      	ldrh	r3, [r7, #8]
 8007b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	8013      	strh	r3, [r2, #0]
 8007b40:	e192      	b.n	8007e68 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	827b      	strh	r3, [r7, #18]
 8007b50:	8a7b      	ldrh	r3, [r7, #18]
 8007b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01b      	beq.n	8007b92 <USB_DeactivateEndpoint+0xf6>
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b70:	823b      	strh	r3, [r7, #16]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	441a      	add	r2, r3
 8007b7c:	8a3b      	ldrh	r3, [r7, #16]
 8007b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ba8:	81fb      	strh	r3, [r7, #14]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	441a      	add	r2, r3
 8007bb4:	89fb      	ldrh	r3, [r7, #14]
 8007bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	8013      	strh	r3, [r2, #0]
 8007bca:	e14d      	b.n	8007e68 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f040 80a5 	bne.w	8007d20 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	843b      	strh	r3, [r7, #32]
 8007be4:	8c3b      	ldrh	r3, [r7, #32]
 8007be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d01b      	beq.n	8007c26 <USB_DeactivateEndpoint+0x18a>
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c04:	83fb      	strh	r3, [r7, #30]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	441a      	add	r2, r3
 8007c10:	8bfb      	ldrh	r3, [r7, #30]
 8007c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	83bb      	strh	r3, [r7, #28]
 8007c34:	8bbb      	ldrh	r3, [r7, #28]
 8007c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d01b      	beq.n	8007c76 <USB_DeactivateEndpoint+0x1da>
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c54:	837b      	strh	r3, [r7, #26]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	441a      	add	r2, r3
 8007c60:	8b7b      	ldrh	r3, [r7, #26]
 8007c62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c8c:	833b      	strh	r3, [r7, #24]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	441a      	add	r2, r3
 8007c98:	8b3b      	ldrh	r3, [r7, #24]
 8007c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cc4:	82fb      	strh	r3, [r7, #22]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	441a      	add	r2, r3
 8007cd0:	8afb      	ldrh	r3, [r7, #22]
 8007cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cfc:	82bb      	strh	r3, [r7, #20]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	441a      	add	r2, r3
 8007d08:	8abb      	ldrh	r3, [r7, #20]
 8007d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	8013      	strh	r3, [r2, #0]
 8007d1e:	e0a3      	b.n	8007e68 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007d2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01b      	beq.n	8007d70 <USB_DeactivateEndpoint+0x2d4>
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d4e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	441a      	add	r2, r3
 8007d5a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007d7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01b      	beq.n	8007dc0 <USB_DeactivateEndpoint+0x324>
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d9e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	441a      	add	r2, r3
 8007daa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007db8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	441a      	add	r2, r3
 8007de2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007de4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007de8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	441a      	add	r2, r3
 8007e1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e46:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	441a      	add	r2, r3
 8007e52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3734      	adds	r7, #52	@ 0x34
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr

08007e74 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b0c2      	sub	sp, #264	@ 0x108
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e82:	6018      	str	r0, [r3, #0]
 8007e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	785b      	ldrb	r3, [r3, #1]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	f040 86b7 	bne.w	8008c0e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	699a      	ldr	r2, [r3, #24]
 8007eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d908      	bls.n	8007ece <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007ecc:	e007      	b.n	8007ede <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	7b1b      	ldrb	r3, [r3, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d13a      	bne.n	8007f64 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6959      	ldr	r1, [r3, #20]
 8007efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	88da      	ldrh	r2, [r3, #6]
 8007f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007f14:	6800      	ldr	r0, [r0, #0]
 8007f16:	f001 fc9c 	bl	8009852 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	613b      	str	r3, [r7, #16]
 8007f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	461a      	mov	r2, r3
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	613b      	str	r3, [r7, #16]
 8007f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	011a      	lsls	r2, r3, #4
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	801a      	strh	r2, [r3, #0]
 8007f60:	f000 be1f 	b.w	8008ba2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	78db      	ldrb	r3, [r3, #3]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	f040 8462 	bne.w	800883a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6a1a      	ldr	r2, [r3, #32]
 8007f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	f240 83df 	bls.w	8008752 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fba:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	441a      	add	r2, r3
 8007fd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007fdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fe4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6a1a      	ldr	r2, [r3, #32]
 8007ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008000:	1ad2      	subs	r2, r2, r3
 8008002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800800e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800801c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 81c7 	beq.w	80083c4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	633b      	str	r3, [r7, #48]	@ 0x30
 8008042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d177      	bne.n	8008142 <USB_EPStartXfer+0x2ce>
 8008052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800805e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008062:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800806c:	b29b      	uxth	r3, r3
 800806e:	461a      	mov	r2, r3
 8008070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008072:	4413      	add	r3, r2
 8008074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800807a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	011a      	lsls	r2, r3, #4
 8008084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008086:	4413      	add	r3, r2
 8008088:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800808c:	627b      	str	r3, [r7, #36]	@ 0x24
 800808e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b29b      	uxth	r3, r3
 8008094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008098:	b29a      	uxth	r2, r3
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80080a4:	d921      	bls.n	80080ea <USB_EPStartXfer+0x276>
 80080a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80080b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b4:	f003 031f 	and.w	r3, r3, #31
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d104      	bne.n	80080c6 <USB_EPStartXfer+0x252>
 80080bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80080c0:	3b01      	subs	r3, #1
 80080c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	029b      	lsls	r3, r3, #10
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	4313      	orrs	r3, r2
 80080d8:	b29b      	uxth	r3, r3
 80080da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e6:	801a      	strh	r2, [r3, #0]
 80080e8:	e050      	b.n	800818c <USB_EPStartXfer+0x318>
 80080ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <USB_EPStartXfer+0x294>
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008100:	b29a      	uxth	r2, r3
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	801a      	strh	r2, [r3, #0]
 8008106:	e041      	b.n	800818c <USB_EPStartXfer+0x318>
 8008108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810c:	085b      	lsrs	r3, r3, #1
 800810e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <USB_EPStartXfer+0x2b4>
 800811e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008122:	3301      	adds	r3, #1
 8008124:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	b29a      	uxth	r2, r3
 800812e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008132:	b29b      	uxth	r3, r3
 8008134:	029b      	lsls	r3, r3, #10
 8008136:	b29b      	uxth	r3, r3
 8008138:	4313      	orrs	r3, r2
 800813a:	b29a      	uxth	r2, r3
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	801a      	strh	r2, [r3, #0]
 8008140:	e024      	b.n	800818c <USB_EPStartXfer+0x318>
 8008142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	785b      	ldrb	r3, [r3, #1]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d11c      	bne.n	800818c <USB_EPStartXfer+0x318>
 8008152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008156:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008160:	b29b      	uxth	r3, r3
 8008162:	461a      	mov	r2, r3
 8008164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008166:	4413      	add	r3, r2
 8008168:	633b      	str	r3, [r7, #48]	@ 0x30
 800816a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	011a      	lsls	r2, r3, #4
 8008178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817a:	4413      	add	r3, r2
 800817c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008186:	b29a      	uxth	r2, r3
 8008188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800818c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	895b      	ldrh	r3, [r3, #10]
 8008198:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800819c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6959      	ldr	r1, [r3, #20]
 80081a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80081b2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80081b6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	f001 fb49 	bl	8009852 <USB_WritePMA>
            ep->xfer_buff += len;
 80081c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	695a      	ldr	r2, [r3, #20]
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d0:	441a      	add	r2, r3
 80081d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80081de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6a1a      	ldr	r2, [r3, #32]
 80081ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d90f      	bls.n	800821a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80081fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6a1a      	ldr	r2, [r3, #32]
 8008206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820a:	1ad2      	subs	r2, r2, r3
 800820c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	621a      	str	r2, [r3, #32]
 8008218:	e00e      	b.n	8008238 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800821a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800822a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800822e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2200      	movs	r2, #0
 8008236:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d177      	bne.n	8008338 <USB_EPStartXfer+0x4c4>
 8008248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	61bb      	str	r3, [r7, #24]
 8008254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008262:	b29b      	uxth	r3, r3
 8008264:	461a      	mov	r2, r3
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	4413      	add	r3, r2
 800826a:	61bb      	str	r3, [r7, #24]
 800826c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	011a      	lsls	r2, r3, #4
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	4413      	add	r3, r2
 800827e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	b29b      	uxth	r3, r3
 800828a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800828e:	b29a      	uxth	r2, r3
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	801a      	strh	r2, [r3, #0]
 8008294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008298:	2b3e      	cmp	r3, #62	@ 0x3e
 800829a:	d921      	bls.n	80082e0 <USB_EPStartXfer+0x46c>
 800829c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80082a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082aa:	f003 031f 	and.w	r3, r3, #31
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d104      	bne.n	80082bc <USB_EPStartXfer+0x448>
 80082b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082b6:	3b01      	subs	r3, #1
 80082b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	029b      	lsls	r3, r3, #10
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d8:	b29a      	uxth	r2, r3
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	801a      	strh	r2, [r3, #0]
 80082de:	e056      	b.n	800838e <USB_EPStartXfer+0x51a>
 80082e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10a      	bne.n	80082fe <USB_EPStartXfer+0x48a>
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	801a      	strh	r2, [r3, #0]
 80082fc:	e047      	b.n	800838e <USB_EPStartXfer+0x51a>
 80082fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008302:	085b      	lsrs	r3, r3, #1
 8008304:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d004      	beq.n	800831e <USB_EPStartXfer+0x4aa>
 8008314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008318:	3301      	adds	r3, #1
 800831a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b29a      	uxth	r2, r3
 8008324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008328:	b29b      	uxth	r3, r3
 800832a:	029b      	lsls	r3, r3, #10
 800832c:	b29b      	uxth	r3, r3
 800832e:	4313      	orrs	r3, r2
 8008330:	b29a      	uxth	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	801a      	strh	r2, [r3, #0]
 8008336:	e02a      	b.n	800838e <USB_EPStartXfer+0x51a>
 8008338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	785b      	ldrb	r3, [r3, #1]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d122      	bne.n	800838e <USB_EPStartXfer+0x51a>
 8008348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	623b      	str	r3, [r7, #32]
 8008354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008358:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008362:	b29b      	uxth	r3, r3
 8008364:	461a      	mov	r2, r3
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	4413      	add	r3, r2
 800836a:	623b      	str	r3, [r7, #32]
 800836c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	011a      	lsls	r2, r3, #4
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	4413      	add	r3, r2
 800837e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008388:	b29a      	uxth	r2, r3
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800838e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	891b      	ldrh	r3, [r3, #8]
 800839a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800839e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6959      	ldr	r1, [r3, #20]
 80083aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80083b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80083b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80083bc:	6800      	ldr	r0, [r0, #0]
 80083be:	f001 fa48 	bl	8009852 <USB_WritePMA>
 80083c2:	e3ee      	b.n	8008ba2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	785b      	ldrb	r3, [r3, #1]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d177      	bne.n	80084c4 <USB_EPStartXfer+0x650>
 80083d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	461a      	mov	r2, r3
 80083f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083f4:	4413      	add	r3, r2
 80083f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	011a      	lsls	r2, r3, #4
 8008406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008408:	4413      	add	r3, r2
 800840a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800840e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	b29b      	uxth	r3, r3
 8008416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800841a:	b29a      	uxth	r2, r3
 800841c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800841e:	801a      	strh	r2, [r3, #0]
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008424:	2b3e      	cmp	r3, #62	@ 0x3e
 8008426:	d921      	bls.n	800846c <USB_EPStartXfer+0x5f8>
 8008428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800842c:	095b      	lsrs	r3, r3, #5
 800842e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008436:	f003 031f 	and.w	r3, r3, #31
 800843a:	2b00      	cmp	r3, #0
 800843c:	d104      	bne.n	8008448 <USB_EPStartXfer+0x5d4>
 800843e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008442:	3b01      	subs	r3, #1
 8008444:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b29a      	uxth	r2, r3
 800844e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008452:	b29b      	uxth	r3, r3
 8008454:	029b      	lsls	r3, r3, #10
 8008456:	b29b      	uxth	r3, r3
 8008458:	4313      	orrs	r3, r2
 800845a:	b29b      	uxth	r3, r3
 800845c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008464:	b29a      	uxth	r2, r3
 8008466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	e056      	b.n	800851a <USB_EPStartXfer+0x6a6>
 800846c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <USB_EPStartXfer+0x616>
 8008474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008482:	b29a      	uxth	r2, r3
 8008484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008486:	801a      	strh	r2, [r3, #0]
 8008488:	e047      	b.n	800851a <USB_EPStartXfer+0x6a6>
 800848a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800848e:	085b      	lsrs	r3, r3, #1
 8008490:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d004      	beq.n	80084aa <USB_EPStartXfer+0x636>
 80084a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084a4:	3301      	adds	r3, #1
 80084a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80084aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	029b      	lsls	r3, r3, #10
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	4313      	orrs	r3, r2
 80084bc:	b29a      	uxth	r2, r3
 80084be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084c0:	801a      	strh	r2, [r3, #0]
 80084c2:	e02a      	b.n	800851a <USB_EPStartXfer+0x6a6>
 80084c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	785b      	ldrb	r3, [r3, #1]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d122      	bne.n	800851a <USB_EPStartXfer+0x6a6>
 80084d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	653b      	str	r3, [r7, #80]	@ 0x50
 80084e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	461a      	mov	r2, r3
 80084f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084f4:	4413      	add	r3, r2
 80084f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80084f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	011a      	lsls	r2, r3, #4
 8008506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008508:	4413      	add	r3, r2
 800850a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800850e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008514:	b29a      	uxth	r2, r3
 8008516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008518:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800851a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	891b      	ldrh	r3, [r3, #8]
 8008526:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800852a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6959      	ldr	r1, [r3, #20]
 8008536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800853a:	b29b      	uxth	r3, r3
 800853c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008540:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008544:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008548:	6800      	ldr	r0, [r0, #0]
 800854a:	f001 f982 	bl	8009852 <USB_WritePMA>
            ep->xfer_buff += len;
 800854e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	695a      	ldr	r2, [r3, #20]
 800855a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800855e:	441a      	add	r2, r3
 8008560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800856c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6a1a      	ldr	r2, [r3, #32]
 8008578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	429a      	cmp	r2, r3
 8008586:	d90f      	bls.n	80085a8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6a1a      	ldr	r2, [r3, #32]
 8008594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008598:	1ad2      	subs	r2, r2, r3
 800859a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	621a      	str	r2, [r3, #32]
 80085a6:	e00e      	b.n	80085c6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80085a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80085b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2200      	movs	r2, #0
 80085c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80085d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d177      	bne.n	80086d2 <USB_EPStartXfer+0x85e>
 80085e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	461a      	mov	r2, r3
 8008600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008602:	4413      	add	r3, r2
 8008604:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800860a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	011a      	lsls	r2, r3, #4
 8008614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008616:	4413      	add	r3, r2
 8008618:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800861c:	637b      	str	r3, [r7, #52]	@ 0x34
 800861e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29b      	uxth	r3, r3
 8008624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008628:	b29a      	uxth	r2, r3
 800862a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862c:	801a      	strh	r2, [r3, #0]
 800862e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008632:	2b3e      	cmp	r3, #62	@ 0x3e
 8008634:	d921      	bls.n	800867a <USB_EPStartXfer+0x806>
 8008636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800863a:	095b      	lsrs	r3, r3, #5
 800863c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008644:	f003 031f 	and.w	r3, r3, #31
 8008648:	2b00      	cmp	r3, #0
 800864a:	d104      	bne.n	8008656 <USB_EPStartXfer+0x7e2>
 800864c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008650:	3b01      	subs	r3, #1
 8008652:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	b29a      	uxth	r2, r3
 800865c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008660:	b29b      	uxth	r3, r3
 8008662:	029b      	lsls	r3, r3, #10
 8008664:	b29b      	uxth	r3, r3
 8008666:	4313      	orrs	r3, r2
 8008668:	b29b      	uxth	r3, r3
 800866a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800866e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008672:	b29a      	uxth	r2, r3
 8008674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008676:	801a      	strh	r2, [r3, #0]
 8008678:	e050      	b.n	800871c <USB_EPStartXfer+0x8a8>
 800867a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <USB_EPStartXfer+0x824>
 8008682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	b29b      	uxth	r3, r3
 8008688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800868c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008690:	b29a      	uxth	r2, r3
 8008692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008694:	801a      	strh	r2, [r3, #0]
 8008696:	e041      	b.n	800871c <USB_EPStartXfer+0x8a8>
 8008698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869c:	085b      	lsrs	r3, r3, #1
 800869e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80086a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d004      	beq.n	80086b8 <USB_EPStartXfer+0x844>
 80086ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b2:	3301      	adds	r3, #1
 80086b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80086b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29a      	uxth	r2, r3
 80086be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	029b      	lsls	r3, r3, #10
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ce:	801a      	strh	r2, [r3, #0]
 80086d0:	e024      	b.n	800871c <USB_EPStartXfer+0x8a8>
 80086d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	785b      	ldrb	r3, [r3, #1]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d11c      	bne.n	800871c <USB_EPStartXfer+0x8a8>
 80086e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	461a      	mov	r2, r3
 80086f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086f6:	4413      	add	r3, r2
 80086f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80086fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	011a      	lsls	r2, r3, #4
 8008708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800870a:	4413      	add	r3, r2
 800870c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008716:	b29a      	uxth	r2, r3
 8008718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800871a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800871c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	895b      	ldrh	r3, [r3, #10]
 8008728:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800872c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6959      	ldr	r1, [r3, #20]
 8008738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800873c:	b29b      	uxth	r3, r3
 800873e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008742:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008746:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800874a:	6800      	ldr	r0, [r0, #0]
 800874c:	f001 f881 	bl	8009852 <USB_WritePMA>
 8008750:	e227      	b.n	8008ba2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	b29b      	uxth	r3, r3
 8008780:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008788:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800878c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008790:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	441a      	add	r2, r3
 80087a6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80087aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80087be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087d8:	b29b      	uxth	r3, r3
 80087da:	461a      	mov	r2, r3
 80087dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087de:	4413      	add	r3, r2
 80087e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	011a      	lsls	r2, r3, #4
 80087f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087f2:	4413      	add	r3, r2
 80087f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80087f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087fe:	b29a      	uxth	r2, r3
 8008800:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008802:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	891b      	ldrh	r3, [r3, #8]
 8008810:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6959      	ldr	r1, [r3, #20]
 8008820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008824:	b29b      	uxth	r3, r3
 8008826:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800882a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800882e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008832:	6800      	ldr	r0, [r0, #0]
 8008834:	f001 f80d 	bl	8009852 <USB_WritePMA>
 8008838:	e1b3      	b.n	8008ba2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800883a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800883e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6a1a      	ldr	r2, [r3, #32]
 8008846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800884a:	1ad2      	subs	r2, r2, r3
 800884c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800885c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29b      	uxth	r3, r3
 8008876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 80c6 	beq.w	8008a0c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008884:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	673b      	str	r3, [r7, #112]	@ 0x70
 800888c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d177      	bne.n	800898c <USB_EPStartXfer+0xb18>
 800889c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	461a      	mov	r2, r3
 80088ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088bc:	4413      	add	r3, r2
 80088be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	011a      	lsls	r2, r3, #4
 80088ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088d0:	4413      	add	r3, r2
 80088d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80088d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80088d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088e6:	801a      	strh	r2, [r3, #0]
 80088e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80088ee:	d921      	bls.n	8008934 <USB_EPStartXfer+0xac0>
 80088f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f4:	095b      	lsrs	r3, r3, #5
 80088f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80088fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088fe:	f003 031f 	and.w	r3, r3, #31
 8008902:	2b00      	cmp	r3, #0
 8008904:	d104      	bne.n	8008910 <USB_EPStartXfer+0xa9c>
 8008906:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800890a:	3b01      	subs	r3, #1
 800890c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	b29a      	uxth	r2, r3
 8008916:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800891a:	b29b      	uxth	r3, r3
 800891c:	029b      	lsls	r3, r3, #10
 800891e:	b29b      	uxth	r3, r3
 8008920:	4313      	orrs	r3, r2
 8008922:	b29b      	uxth	r3, r3
 8008924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800892c:	b29a      	uxth	r2, r3
 800892e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008930:	801a      	strh	r2, [r3, #0]
 8008932:	e050      	b.n	80089d6 <USB_EPStartXfer+0xb62>
 8008934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10a      	bne.n	8008952 <USB_EPStartXfer+0xade>
 800893c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	b29b      	uxth	r3, r3
 8008942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800894a:	b29a      	uxth	r2, r3
 800894c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800894e:	801a      	strh	r2, [r3, #0]
 8008950:	e041      	b.n	80089d6 <USB_EPStartXfer+0xb62>
 8008952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008956:	085b      	lsrs	r3, r3, #1
 8008958:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800895c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b00      	cmp	r3, #0
 8008966:	d004      	beq.n	8008972 <USB_EPStartXfer+0xafe>
 8008968:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800896c:	3301      	adds	r3, #1
 800896e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b29a      	uxth	r2, r3
 8008978:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800897c:	b29b      	uxth	r3, r3
 800897e:	029b      	lsls	r3, r3, #10
 8008980:	b29b      	uxth	r3, r3
 8008982:	4313      	orrs	r3, r2
 8008984:	b29a      	uxth	r2, r3
 8008986:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008988:	801a      	strh	r2, [r3, #0]
 800898a:	e024      	b.n	80089d6 <USB_EPStartXfer+0xb62>
 800898c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	785b      	ldrb	r3, [r3, #1]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d11c      	bne.n	80089d6 <USB_EPStartXfer+0xb62>
 800899c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	461a      	mov	r2, r3
 80089ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089b0:	4413      	add	r3, r2
 80089b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80089b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	011a      	lsls	r2, r3, #4
 80089c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089c4:	4413      	add	r3, r2
 80089c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80089ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80089d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	895b      	ldrh	r3, [r3, #10]
 80089e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6959      	ldr	r1, [r3, #20]
 80089f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80089fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a04:	6800      	ldr	r0, [r0, #0]
 8008a06:	f000 ff24 	bl	8009852 <USB_WritePMA>
 8008a0a:	e0ca      	b.n	8008ba2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	785b      	ldrb	r3, [r3, #1]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d177      	bne.n	8008b0c <USB_EPStartXfer+0xc98>
 8008a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a3c:	4413      	add	r3, r2
 8008a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	011a      	lsls	r2, r3, #4
 8008a4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a50:	4413      	add	r3, r2
 8008a52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008a56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a66:	801a      	strh	r2, [r3, #0]
 8008a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a6e:	d921      	bls.n	8008ab4 <USB_EPStartXfer+0xc40>
 8008a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a7e:	f003 031f 	and.w	r3, r3, #31
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d104      	bne.n	8008a90 <USB_EPStartXfer+0xc1c>
 8008a86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	029b      	lsls	r3, r3, #10
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ab0:	801a      	strh	r2, [r3, #0]
 8008ab2:	e05c      	b.n	8008b6e <USB_EPStartXfer+0xcfa>
 8008ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10a      	bne.n	8008ad2 <USB_EPStartXfer+0xc5e>
 8008abc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ace:	801a      	strh	r2, [r3, #0]
 8008ad0:	e04d      	b.n	8008b6e <USB_EPStartXfer+0xcfa>
 8008ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d004      	beq.n	8008af2 <USB_EPStartXfer+0xc7e>
 8008ae8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008aec:	3301      	adds	r3, #1
 8008aee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008af2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	029b      	lsls	r3, r3, #10
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	4313      	orrs	r3, r2
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b08:	801a      	strh	r2, [r3, #0]
 8008b0a:	e030      	b.n	8008b6e <USB_EPStartXfer+0xcfa>
 8008b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d128      	bne.n	8008b6e <USB_EPStartXfer+0xcfa>
 8008b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b40:	4413      	add	r3, r2
 8008b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	011a      	lsls	r2, r3, #4
 8008b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b58:	4413      	add	r3, r2
 8008b5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008b5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	891b      	ldrh	r3, [r3, #8]
 8008b7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6959      	ldr	r1, [r3, #20]
 8008b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b94:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008b98:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008b9c:	6800      	ldr	r0, [r0, #0]
 8008b9e:	f000 fe58 	bl	8009852 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bc8:	817b      	strh	r3, [r7, #10]
 8008bca:	897b      	ldrh	r3, [r7, #10]
 8008bcc:	f083 0310 	eor.w	r3, r3, #16
 8008bd0:	817b      	strh	r3, [r7, #10]
 8008bd2:	897b      	ldrh	r3, [r7, #10]
 8008bd4:	f083 0320 	eor.w	r3, r3, #32
 8008bd8:	817b      	strh	r3, [r7, #10]
 8008bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	441a      	add	r2, r3
 8008bf4:	897b      	ldrh	r3, [r7, #10]
 8008bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	8013      	strh	r3, [r2, #0]
 8008c0a:	f000 bcde 	b.w	80095ca <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	7b1b      	ldrb	r3, [r3, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f040 80bb 	bne.w	8008d96 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	699a      	ldr	r2, [r3, #24]
 8008c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d917      	bls.n	8008c6c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	699a      	ldr	r2, [r3, #24]
 8008c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c5c:	1ad2      	subs	r2, r2, r3
 8008c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	619a      	str	r2, [r3, #24]
 8008c6a:	e00e      	b.n	8008c8a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2200      	movs	r2, #0
 8008c88:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008cae:	4413      	add	r3, r2
 8008cb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	011a      	lsls	r2, r3, #4
 8008cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008ccc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ce2:	801a      	strh	r2, [r3, #0]
 8008ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cea:	d924      	bls.n	8008d36 <USB_EPStartXfer+0xec2>
 8008cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf0:	095b      	lsrs	r3, r3, #5
 8008cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cfa:	f003 031f 	and.w	r3, r3, #31
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d104      	bne.n	8008d0c <USB_EPStartXfer+0xe98>
 8008d02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008d06:	3b01      	subs	r3, #1
 8008d08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	029b      	lsls	r3, r3, #10
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d30:	801a      	strh	r2, [r3, #0]
 8008d32:	f000 bc10 	b.w	8009556 <USB_EPStartXfer+0x16e2>
 8008d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10c      	bne.n	8008d58 <USB_EPStartXfer+0xee4>
 8008d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d54:	801a      	strh	r2, [r3, #0]
 8008d56:	e3fe      	b.n	8009556 <USB_EPStartXfer+0x16e2>
 8008d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d5c:	085b      	lsrs	r3, r3, #1
 8008d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d004      	beq.n	8008d78 <USB_EPStartXfer+0xf04>
 8008d6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008d72:	3301      	adds	r3, #1
 8008d74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	029b      	lsls	r3, r3, #10
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d92:	801a      	strh	r2, [r3, #0]
 8008d94:	e3df      	b.n	8009556 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	78db      	ldrb	r3, [r3, #3]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	f040 8218 	bne.w	80091d8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	785b      	ldrb	r3, [r3, #1]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f040 809d 	bne.w	8008ef4 <USB_EPStartXfer+0x1080>
 8008dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	461a      	mov	r2, r3
 8008dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dde:	4413      	add	r3, r2
 8008de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	011a      	lsls	r2, r3, #4
 8008df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008df6:	4413      	add	r3, r2
 8008df8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e04:	881b      	ldrh	r3, [r3, #0]
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e12:	801a      	strh	r2, [r3, #0]
 8008e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e22:	d92b      	bls.n	8008e7c <USB_EPStartXfer+0x1008>
 8008e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	095b      	lsrs	r3, r3, #5
 8008e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	f003 031f 	and.w	r3, r3, #31
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d104      	bne.n	8008e54 <USB_EPStartXfer+0xfe0>
 8008e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	029b      	lsls	r3, r3, #10
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	4313      	orrs	r3, r2
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e78:	801a      	strh	r2, [r3, #0]
 8008e7a:	e070      	b.n	8008f5e <USB_EPStartXfer+0x10ea>
 8008e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10c      	bne.n	8008ea6 <USB_EPStartXfer+0x1032>
 8008e8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ea2:	801a      	strh	r2, [r3, #0]
 8008ea4:	e05b      	b.n	8008f5e <USB_EPStartXfer+0x10ea>
 8008ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d004      	beq.n	8008ed6 <USB_EPStartXfer+0x1062>
 8008ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	029b      	lsls	r3, r3, #10
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ef0:	801a      	strh	r2, [r3, #0]
 8008ef2:	e034      	b.n	8008f5e <USB_EPStartXfer+0x10ea>
 8008ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d12c      	bne.n	8008f5e <USB_EPStartXfer+0x10ea>
 8008f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	461a      	mov	r2, r3
 8008f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f28:	4413      	add	r3, r2
 8008f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	011a      	lsls	r2, r3, #4
 8008f3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f40:	4413      	add	r3, r2
 8008f42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008f5c:	801a      	strh	r2, [r3, #0]
 8008f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f040 809d 	bne.w	80090b8 <USB_EPStartXfer+0x1244>
 8008f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	011a      	lsls	r2, r3, #4
 8008fb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fba:	4413      	add	r3, r2
 8008fbc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008fc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fd6:	801a      	strh	r2, [r3, #0]
 8008fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fe6:	d92b      	bls.n	8009040 <USB_EPStartXfer+0x11cc>
 8008fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	f003 031f 	and.w	r3, r3, #31
 800900a:	2b00      	cmp	r3, #0
 800900c:	d104      	bne.n	8009018 <USB_EPStartXfer+0x11a4>
 800900e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009012:	3b01      	subs	r3, #1
 8009014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	b29a      	uxth	r2, r3
 8009020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009024:	b29b      	uxth	r3, r3
 8009026:	029b      	lsls	r3, r3, #10
 8009028:	b29b      	uxth	r3, r3
 800902a:	4313      	orrs	r3, r2
 800902c:	b29b      	uxth	r3, r3
 800902e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009036:	b29a      	uxth	r2, r3
 8009038:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800903c:	801a      	strh	r2, [r3, #0]
 800903e:	e069      	b.n	8009114 <USB_EPStartXfer+0x12a0>
 8009040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10c      	bne.n	800906a <USB_EPStartXfer+0x11f6>
 8009050:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	b29b      	uxth	r3, r3
 8009058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800905c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009060:	b29a      	uxth	r2, r3
 8009062:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009066:	801a      	strh	r2, [r3, #0]
 8009068:	e054      	b.n	8009114 <USB_EPStartXfer+0x12a0>
 800906a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800906e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	085b      	lsrs	r3, r3, #1
 8009078:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800907c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	d004      	beq.n	800909a <USB_EPStartXfer+0x1226>
 8009090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009094:	3301      	adds	r3, #1
 8009096:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800909a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	029b      	lsls	r3, r3, #10
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	4313      	orrs	r3, r2
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090b4:	801a      	strh	r2, [r3, #0]
 80090b6:	e02d      	b.n	8009114 <USB_EPStartXfer+0x12a0>
 80090b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	785b      	ldrb	r3, [r3, #1]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d125      	bne.n	8009114 <USB_EPStartXfer+0x12a0>
 80090c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	461a      	mov	r2, r3
 80090da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80090de:	4413      	add	r3, r2
 80090e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80090e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	011a      	lsls	r2, r3, #4
 80090f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80090f6:	4413      	add	r3, r2
 80090f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80090fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	b29a      	uxth	r2, r3
 800910e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009112:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	2b00      	cmp	r3, #0
 8009122:	f000 8218 	beq.w	8009556 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800912a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009146:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800914a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d005      	beq.n	800915e <USB_EPStartXfer+0x12ea>
 8009152:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10d      	bne.n	800917a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800915e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009166:	2b00      	cmp	r3, #0
 8009168:	f040 81f5 	bne.w	8009556 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800916c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009174:	2b00      	cmp	r3, #0
 8009176:	f040 81ee 	bne.w	8009556 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800917a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800917e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	b29b      	uxth	r3, r3
 8009198:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800919c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091a0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80091a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	441a      	add	r2, r3
 80091be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80091c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	8013      	strh	r3, [r2, #0]
 80091d6:	e1be      	b.n	8009556 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80091d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	78db      	ldrb	r3, [r3, #3]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	f040 81b4 	bne.w	8009552 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80091ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	699a      	ldr	r2, [r3, #24]
 80091f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	429a      	cmp	r2, r3
 8009204:	d917      	bls.n	8009236 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800920a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800921a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	699a      	ldr	r2, [r3, #24]
 8009222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009226:	1ad2      	subs	r2, r2, r3
 8009228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800922c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	619a      	str	r2, [r3, #24]
 8009234:	e00e      	b.n	8009254 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800923a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	699b      	ldr	r3, [r3, #24]
 8009242:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800924a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2200      	movs	r2, #0
 8009252:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	785b      	ldrb	r3, [r3, #1]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f040 8085 	bne.w	8009370 <USB_EPStartXfer+0x14fc>
 8009266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800926a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009282:	b29b      	uxth	r3, r3
 8009284:	461a      	mov	r2, r3
 8009286:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800928a:	4413      	add	r3, r2
 800928c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	011a      	lsls	r2, r3, #4
 800929e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80092a2:	4413      	add	r3, r2
 80092a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80092a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092be:	801a      	strh	r2, [r3, #0]
 80092c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80092c6:	d923      	bls.n	8009310 <USB_EPStartXfer+0x149c>
 80092c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092cc:	095b      	lsrs	r3, r3, #5
 80092ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80092d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d6:	f003 031f 	and.w	r3, r3, #31
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d104      	bne.n	80092e8 <USB_EPStartXfer+0x1474>
 80092de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092e2:	3b01      	subs	r3, #1
 80092e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80092e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092ec:	881b      	ldrh	r3, [r3, #0]
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	029b      	lsls	r3, r3, #10
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	4313      	orrs	r3, r2
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009306:	b29a      	uxth	r2, r3
 8009308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800930c:	801a      	strh	r2, [r3, #0]
 800930e:	e060      	b.n	80093d2 <USB_EPStartXfer+0x155e>
 8009310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10c      	bne.n	8009332 <USB_EPStartXfer+0x14be>
 8009318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	b29b      	uxth	r3, r3
 8009320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009328:	b29a      	uxth	r2, r3
 800932a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800932e:	801a      	strh	r2, [r3, #0]
 8009330:	e04f      	b.n	80093d2 <USB_EPStartXfer+0x155e>
 8009332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009336:	085b      	lsrs	r3, r3, #1
 8009338:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800933c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	2b00      	cmp	r3, #0
 8009346:	d004      	beq.n	8009352 <USB_EPStartXfer+0x14de>
 8009348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800934c:	3301      	adds	r3, #1
 800934e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009352:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	b29a      	uxth	r2, r3
 800935a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800935e:	b29b      	uxth	r3, r3
 8009360:	029b      	lsls	r3, r3, #10
 8009362:	b29b      	uxth	r3, r3
 8009364:	4313      	orrs	r3, r2
 8009366:	b29a      	uxth	r2, r3
 8009368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800936c:	801a      	strh	r2, [r3, #0]
 800936e:	e030      	b.n	80093d2 <USB_EPStartXfer+0x155e>
 8009370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d128      	bne.n	80093d2 <USB_EPStartXfer+0x155e>
 8009380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800938e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800939c:	b29b      	uxth	r3, r3
 800939e:	461a      	mov	r2, r3
 80093a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80093a4:	4413      	add	r3, r2
 80093a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80093aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	011a      	lsls	r2, r3, #4
 80093b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80093bc:	4413      	add	r3, r2
 80093be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80093c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80093d0:	801a      	strh	r2, [r3, #0]
 80093d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	785b      	ldrb	r3, [r3, #1]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f040 8085 	bne.w	80094fc <USB_EPStartXfer+0x1688>
 80093f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800940e:	b29b      	uxth	r3, r3
 8009410:	461a      	mov	r2, r3
 8009412:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009416:	4413      	add	r3, r2
 8009418:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800941c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	011a      	lsls	r2, r3, #4
 800942a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800942e:	4413      	add	r3, r2
 8009430:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009434:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009438:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009444:	b29a      	uxth	r2, r3
 8009446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800944a:	801a      	strh	r2, [r3, #0]
 800944c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009450:	2b3e      	cmp	r3, #62	@ 0x3e
 8009452:	d923      	bls.n	800949c <USB_EPStartXfer+0x1628>
 8009454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009458:	095b      	lsrs	r3, r3, #5
 800945a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800945e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009462:	f003 031f 	and.w	r3, r3, #31
 8009466:	2b00      	cmp	r3, #0
 8009468:	d104      	bne.n	8009474 <USB_EPStartXfer+0x1600>
 800946a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800946e:	3b01      	subs	r3, #1
 8009470:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	b29a      	uxth	r2, r3
 800947c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009480:	b29b      	uxth	r3, r3
 8009482:	029b      	lsls	r3, r3, #10
 8009484:	b29b      	uxth	r3, r3
 8009486:	4313      	orrs	r3, r2
 8009488:	b29b      	uxth	r3, r3
 800948a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800948e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009492:	b29a      	uxth	r2, r3
 8009494:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009498:	801a      	strh	r2, [r3, #0]
 800949a:	e05c      	b.n	8009556 <USB_EPStartXfer+0x16e2>
 800949c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10c      	bne.n	80094be <USB_EPStartXfer+0x164a>
 80094a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80094ba:	801a      	strh	r2, [r3, #0]
 80094bc:	e04b      	b.n	8009556 <USB_EPStartXfer+0x16e2>
 80094be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c2:	085b      	lsrs	r3, r3, #1
 80094c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d004      	beq.n	80094de <USB_EPStartXfer+0x166a>
 80094d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094d8:	3301      	adds	r3, #1
 80094da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	029b      	lsls	r3, r3, #10
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	4313      	orrs	r3, r2
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80094f8:	801a      	strh	r2, [r3, #0]
 80094fa:	e02c      	b.n	8009556 <USB_EPStartXfer+0x16e2>
 80094fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d124      	bne.n	8009556 <USB_EPStartXfer+0x16e2>
 800950c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009510:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800951a:	b29b      	uxth	r3, r3
 800951c:	461a      	mov	r2, r3
 800951e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009522:	4413      	add	r3, r2
 8009524:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800952c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	011a      	lsls	r2, r3, #4
 8009536:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800953a:	4413      	add	r3, r2
 800953c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009540:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009548:	b29a      	uxth	r2, r3
 800954a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800954e:	801a      	strh	r2, [r3, #0]
 8009550:	e001      	b.n	8009556 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e03a      	b.n	80095cc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800955a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	b29b      	uxth	r3, r3
 8009574:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800957c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009580:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009584:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009588:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800958c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009590:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009594:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800959c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	441a      	add	r2, r3
 80095b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80095b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b085      	sub	sp, #20
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	785b      	ldrb	r3, [r3, #1]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d020      	beq.n	800962a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095fe:	81bb      	strh	r3, [r7, #12]
 8009600:	89bb      	ldrh	r3, [r7, #12]
 8009602:	f083 0310 	eor.w	r3, r3, #16
 8009606:	81bb      	strh	r3, [r7, #12]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	441a      	add	r2, r3
 8009612:	89bb      	ldrh	r3, [r7, #12]
 8009614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800961c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009624:	b29b      	uxth	r3, r3
 8009626:	8013      	strh	r3, [r2, #0]
 8009628:	e01f      	b.n	800966a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	b29b      	uxth	r3, r3
 8009638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800963c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009640:	81fb      	strh	r3, [r7, #14]
 8009642:	89fb      	ldrh	r3, [r7, #14]
 8009644:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009648:	81fb      	strh	r3, [r7, #14]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	441a      	add	r2, r3
 8009654:	89fb      	ldrh	r3, [r7, #14]
 8009656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800965a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800965e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009666:	b29b      	uxth	r3, r3
 8009668:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	bc80      	pop	{r7}
 8009674:	4770      	bx	lr

08009676 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009676:	b480      	push	{r7}
 8009678:	b087      	sub	sp, #28
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	7b1b      	ldrb	r3, [r3, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	f040 809d 	bne.w	80097c4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	785b      	ldrb	r3, [r3, #1]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d04c      	beq.n	800972c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	823b      	strh	r3, [r7, #16]
 80096a0:	8a3b      	ldrh	r3, [r7, #16]
 80096a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d01b      	beq.n	80096e2 <USB_EPClearStall+0x6c>
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096c0:	81fb      	strh	r3, [r7, #14]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	441a      	add	r2, r3
 80096cc:	89fb      	ldrh	r3, [r7, #14]
 80096ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80096de:	b29b      	uxth	r3, r3
 80096e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	78db      	ldrb	r3, [r3, #3]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d06c      	beq.n	80097c4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009700:	81bb      	strh	r3, [r7, #12]
 8009702:	89bb      	ldrh	r3, [r7, #12]
 8009704:	f083 0320 	eor.w	r3, r3, #32
 8009708:	81bb      	strh	r3, [r7, #12]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	441a      	add	r2, r3
 8009714:	89bb      	ldrh	r3, [r7, #12]
 8009716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800971a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800971e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009726:	b29b      	uxth	r3, r3
 8009728:	8013      	strh	r3, [r2, #0]
 800972a:	e04b      	b.n	80097c4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	4413      	add	r3, r2
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	82fb      	strh	r3, [r7, #22]
 800973a:	8afb      	ldrh	r3, [r7, #22]
 800973c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d01b      	beq.n	800977c <USB_EPClearStall+0x106>
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	b29b      	uxth	r3, r3
 8009752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800975a:	82bb      	strh	r3, [r7, #20]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	441a      	add	r2, r3
 8009766:	8abb      	ldrh	r3, [r7, #20]
 8009768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800976c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009770:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009778:	b29b      	uxth	r3, r3
 800977a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	b29b      	uxth	r3, r3
 800978a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800978e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009792:	827b      	strh	r3, [r7, #18]
 8009794:	8a7b      	ldrh	r3, [r7, #18]
 8009796:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800979a:	827b      	strh	r3, [r7, #18]
 800979c:	8a7b      	ldrh	r3, [r7, #18]
 800979e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80097a2:	827b      	strh	r3, [r7, #18]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	441a      	add	r2, r3
 80097ae:	8a7b      	ldrh	r3, [r7, #18]
 80097b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bc80      	pop	{r7}
 80097ce:	4770      	bx	lr

080097d0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d103      	bne.n	80097ea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2280      	movs	r2, #128	@ 0x80
 80097e6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bc80      	pop	{r7}
 80097f4:	4770      	bx	lr

080097f6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	bc80      	pop	{r7}
 8009808:	4770      	bx	lr

0800980a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	bc80      	pop	{r7}
 800981c:	4770      	bx	lr

0800981e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800981e:	b480      	push	{r7}
 8009820:	b085      	sub	sp, #20
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800982c:	b29b      	uxth	r3, r3
 800982e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009830:	68fb      	ldr	r3, [r7, #12]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	bc80      	pop	{r7}
 800983a:	4770      	bx	lr

0800983c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	bc80      	pop	{r7}
 8009850:	4770      	bx	lr

08009852 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009852:	b480      	push	{r7}
 8009854:	b08b      	sub	sp, #44	@ 0x2c
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	4611      	mov	r1, r2
 800985e:	461a      	mov	r2, r3
 8009860:	460b      	mov	r3, r1
 8009862:	80fb      	strh	r3, [r7, #6]
 8009864:	4613      	mov	r3, r2
 8009866:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009868:	88bb      	ldrh	r3, [r7, #4]
 800986a:	3301      	adds	r3, #1
 800986c:	085b      	lsrs	r3, r3, #1
 800986e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	005a      	lsls	r2, r3, #1
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009884:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	627b      	str	r3, [r7, #36]	@ 0x24
 800988a:	e01e      	b.n	80098ca <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	3301      	adds	r3, #1
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	021b      	lsls	r3, r3, #8
 800989a:	b21a      	sxth	r2, r3
 800989c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	b21b      	sxth	r3, r3
 80098a4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	8a7a      	ldrh	r2, [r7, #18]
 80098aa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	3302      	adds	r3, #2
 80098b0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	3302      	adds	r3, #2
 80098b6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	3301      	adds	r3, #1
 80098bc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	3301      	adds	r3, #1
 80098c2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80098c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c6:	3b01      	subs	r3, #1
 80098c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80098ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1dd      	bne.n	800988c <USB_WritePMA+0x3a>
  }
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	372c      	adds	r7, #44	@ 0x2c
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bc80      	pop	{r7}
 80098da:	4770      	bx	lr

080098dc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80098dc:	b480      	push	{r7}
 80098de:	b08b      	sub	sp, #44	@ 0x2c
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	4611      	mov	r1, r2
 80098e8:	461a      	mov	r2, r3
 80098ea:	460b      	mov	r3, r1
 80098ec:	80fb      	strh	r3, [r7, #6]
 80098ee:	4613      	mov	r3, r2
 80098f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80098f2:	88bb      	ldrh	r3, [r7, #4]
 80098f4:	085b      	lsrs	r3, r3, #1
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009902:	88fb      	ldrh	r3, [r7, #6]
 8009904:	005a      	lsls	r2, r3, #1
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	4413      	add	r3, r2
 800990a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800990e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	627b      	str	r3, [r7, #36]	@ 0x24
 8009914:	e01b      	b.n	800994e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	881b      	ldrh	r3, [r3, #0]
 800991a:	b29b      	uxth	r3, r3
 800991c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	3302      	adds	r3, #2
 8009922:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	b2da      	uxtb	r2, r3
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	3301      	adds	r3, #1
 8009930:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	0a1b      	lsrs	r3, r3, #8
 8009936:	b2da      	uxtb	r2, r3
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	3301      	adds	r3, #1
 8009940:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	3302      	adds	r3, #2
 8009946:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994a:	3b01      	subs	r3, #1
 800994c:	627b      	str	r3, [r7, #36]	@ 0x24
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e0      	bne.n	8009916 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009954:	88bb      	ldrh	r3, [r7, #4]
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	b29b      	uxth	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d007      	beq.n	8009970 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	b29b      	uxth	r3, r3
 8009966:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	b2da      	uxtb	r2, r3
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	701a      	strb	r2, [r3, #0]
  }
}
 8009970:	bf00      	nop
 8009972:	372c      	adds	r7, #44	@ 0x2c
 8009974:	46bd      	mov	sp, r7
 8009976:	bc80      	pop	{r7}
 8009978:	4770      	bx	lr
	...

0800997c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8009984:	4b0e      	ldr	r3, [pc, #56]	@ (80099c0 <LL_mDelay+0x44>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800998a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009992:	d00c      	beq.n	80099ae <LL_mDelay+0x32>
  {
    Delay++;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3301      	adds	r3, #1
 8009998:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800999a:	e008      	b.n	80099ae <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800999c:	4b08      	ldr	r3, [pc, #32]	@ (80099c0 <LL_mDelay+0x44>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <LL_mDelay+0x32>
    {
      Delay--;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	607b      	str	r3, [r7, #4]
  while (Delay)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1f3      	bne.n	800999c <LL_mDelay+0x20>
    }
  }
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bc80      	pop	{r7}
 80099be:	4770      	bx	lr
 80099c0:	e000e010 	.word	0xe000e010

080099c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	460b      	mov	r3, r1
 80099ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	7c1b      	ldrb	r3, [r3, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d115      	bne.n	8009a08 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80099dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099e0:	2202      	movs	r2, #2
 80099e2:	2181      	movs	r1, #129	@ 0x81
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 ff8a 	bl	800b8fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80099f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099f4:	2202      	movs	r2, #2
 80099f6:	2101      	movs	r1, #1
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f001 ff80 	bl	800b8fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009a06:	e012      	b.n	8009a2e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a08:	2340      	movs	r3, #64	@ 0x40
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	2181      	movs	r1, #129	@ 0x81
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 ff75 	bl	800b8fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a1a:	2340      	movs	r3, #64	@ 0x40
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	2101      	movs	r1, #1
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 ff6c 	bl	800b8fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a2e:	2308      	movs	r3, #8
 8009a30:	2203      	movs	r2, #3
 8009a32:	2182      	movs	r1, #130	@ 0x82
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 ff62 	bl	800b8fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a40:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009a44:	f002 f882 	bl	800bb4c <USBD_static_malloc>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d102      	bne.n	8009a60 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	73fb      	strb	r3, [r7, #15]
 8009a5e:	e026      	b.n	8009aae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a66:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	7c1b      	ldrb	r3, [r3, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d109      	bne.n	8009a9e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a94:	2101      	movs	r1, #1
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f002 f822 	bl	800bae0 <USBD_LL_PrepareReceive>
 8009a9c:	e007      	b.n	8009aae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009aa4:	2340      	movs	r3, #64	@ 0x40
 8009aa6:	2101      	movs	r1, #1
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f002 f819 	bl	800bae0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009ac8:	2181      	movs	r1, #129	@ 0x81
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 ff3d 	bl	800b94a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 ff36 	bl	800b94a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009ae6:	2182      	movs	r1, #130	@ 0x82
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 ff2e 	bl	800b94a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00e      	beq.n	8009b1c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f002 f828 	bl	800bb64 <USBD_static_free>
    pdev->pClassData = NULL;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b086      	sub	sp, #24
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b36:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d039      	beq.n	8009bc4 <USBD_CDC_Setup+0x9e>
 8009b50:	2b20      	cmp	r3, #32
 8009b52:	d17f      	bne.n	8009c54 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	88db      	ldrh	r3, [r3, #6]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d029      	beq.n	8009bb0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	b25b      	sxtb	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da11      	bge.n	8009b8a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009b72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	88d2      	ldrh	r2, [r2, #6]
 8009b78:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009b7a:	6939      	ldr	r1, [r7, #16]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	88db      	ldrh	r3, [r3, #6]
 8009b80:	461a      	mov	r2, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f001 fa20 	bl	800afc8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009b88:	e06b      	b.n	8009c62 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	785a      	ldrb	r2, [r3, #1]
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	88db      	ldrh	r3, [r3, #6]
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009ba0:	6939      	ldr	r1, [r7, #16]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88db      	ldrh	r3, [r3, #6]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f001 fa3b 	bl	800b024 <USBD_CtlPrepareRx>
      break;
 8009bae:	e058      	b.n	8009c62 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	7850      	ldrb	r0, [r2, #1]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	4798      	blx	r3
      break;
 8009bc2:	e04e      	b.n	8009c62 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	785b      	ldrb	r3, [r3, #1]
 8009bc8:	2b0b      	cmp	r3, #11
 8009bca:	d02e      	beq.n	8009c2a <USBD_CDC_Setup+0x104>
 8009bcc:	2b0b      	cmp	r3, #11
 8009bce:	dc38      	bgt.n	8009c42 <USBD_CDC_Setup+0x11c>
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <USBD_CDC_Setup+0xb4>
 8009bd4:	2b0a      	cmp	r3, #10
 8009bd6:	d014      	beq.n	8009c02 <USBD_CDC_Setup+0xdc>
 8009bd8:	e033      	b.n	8009c42 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009be0:	2b03      	cmp	r3, #3
 8009be2:	d107      	bne.n	8009bf4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009be4:	f107 030c 	add.w	r3, r7, #12
 8009be8:	2202      	movs	r2, #2
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f001 f9eb 	bl	800afc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bf2:	e02e      	b.n	8009c52 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f001 f97c 	bl	800aef4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	75fb      	strb	r3, [r7, #23]
          break;
 8009c00:	e027      	b.n	8009c52 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c08:	2b03      	cmp	r3, #3
 8009c0a:	d107      	bne.n	8009c1c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c0c:	f107 030f 	add.w	r3, r7, #15
 8009c10:	2201      	movs	r2, #1
 8009c12:	4619      	mov	r1, r3
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 f9d7 	bl	800afc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c1a:	e01a      	b.n	8009c52 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f001 f968 	bl	800aef4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c24:	2302      	movs	r3, #2
 8009c26:	75fb      	strb	r3, [r7, #23]
          break;
 8009c28:	e013      	b.n	8009c52 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	d00d      	beq.n	8009c50 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 f95c 	bl	800aef4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009c40:	e006      	b.n	8009c50 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 f955 	bl	800aef4 <USBD_CtlError>
          ret = USBD_FAIL;
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c4e:	e000      	b.n	8009c52 <USBD_CDC_Setup+0x12c>
          break;
 8009c50:	bf00      	nop
      }
      break;
 8009c52:	e006      	b.n	8009c62 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f001 f94c 	bl	800aef4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c60:	bf00      	nop
  }

  return ret;
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	460b      	mov	r3, r1
 8009c76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c7e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c86:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d03a      	beq.n	8009d08 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009c92:	78fa      	ldrb	r2, [r7, #3]
 8009c94:	6879      	ldr	r1, [r7, #4]
 8009c96:	4613      	mov	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	440b      	add	r3, r1
 8009ca0:	331c      	adds	r3, #28
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d029      	beq.n	8009cfc <USBD_CDC_DataIn+0x90>
 8009ca8:	78fa      	ldrb	r2, [r7, #3]
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	4613      	mov	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	440b      	add	r3, r1
 8009cb6:	331c      	adds	r3, #28
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	78f9      	ldrb	r1, [r7, #3]
 8009cbc:	68b8      	ldr	r0, [r7, #8]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	440b      	add	r3, r1
 8009cc4:	00db      	lsls	r3, r3, #3
 8009cc6:	4403      	add	r3, r0
 8009cc8:	3338      	adds	r3, #56	@ 0x38
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	fbb2 f1f3 	udiv	r1, r2, r3
 8009cd0:	fb01 f303 	mul.w	r3, r1, r3
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d110      	bne.n	8009cfc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009cda:	78fa      	ldrb	r2, [r7, #3]
 8009cdc:	6879      	ldr	r1, [r7, #4]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	440b      	add	r3, r1
 8009ce8:	331c      	adds	r3, #28
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009cee:	78f9      	ldrb	r1, [r7, #3]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f001 fed0 	bl	800ba9a <USBD_LL_Transmit>
 8009cfa:	e003      	b.n	8009d04 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	e000      	b.n	8009d0a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009d08:	2302      	movs	r3, #2
  }
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d24:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d26:	78fb      	ldrb	r3, [r7, #3]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f001 fefb 	bl	800bb26 <USBD_LL_GetRxDataSize>
 8009d30:	4602      	mov	r2, r0
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00d      	beq.n	8009d5e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009d56:	4611      	mov	r1, r2
 8009d58:	4798      	blx	r3

    return USBD_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	e000      	b.n	8009d60 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009d5e:	2302      	movs	r3, #2
  }
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d76:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d014      	beq.n	8009dac <USBD_CDC_EP0_RxReady+0x44>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009d88:	2bff      	cmp	r3, #255	@ 0xff
 8009d8a:	d00f      	beq.n	8009dac <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009d9a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009da2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	22ff      	movs	r2, #255	@ 0xff
 8009da8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
	...

08009db8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2243      	movs	r2, #67	@ 0x43
 8009dc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009dc6:	4b03      	ldr	r3, [pc, #12]	@ (8009dd4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bc80      	pop	{r7}
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	2000009c 	.word	0x2000009c

08009dd8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2243      	movs	r2, #67	@ 0x43
 8009de4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009de6:	4b03      	ldr	r3, [pc, #12]	@ (8009df4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bc80      	pop	{r7}
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	20000058 	.word	0x20000058

08009df8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2243      	movs	r2, #67	@ 0x43
 8009e04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009e06:	4b03      	ldr	r3, [pc, #12]	@ (8009e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bc80      	pop	{r7}
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	200000e0 	.word	0x200000e0

08009e18 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	220a      	movs	r2, #10
 8009e24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009e26:	4b03      	ldr	r3, [pc, #12]	@ (8009e34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bc80      	pop	{r7}
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	20000014 	.word	0x20000014

08009e38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009e42:	2302      	movs	r3, #2
 8009e44:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d005      	beq.n	8009e58 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bc80      	pop	{r7}
 8009e62:	4770      	bx	lr

08009e64 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e78:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009e82:	88fa      	ldrh	r2, [r7, #6]
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	371c      	adds	r7, #28
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bc80      	pop	{r7}
 8009e94:	4770      	bx	lr

08009e96 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b085      	sub	sp, #20
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ea6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bc80      	pop	{r7}
 8009eba:	4770      	bx	lr

08009ebc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d01c      	beq.n	8009f10 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d115      	bne.n	8009f0c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	2181      	movs	r1, #129	@ 0x81
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 fdc9 	bl	800ba9a <USBD_LL_Transmit>

      return USBD_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e002      	b.n	8009f12 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e000      	b.n	8009f12 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009f10:	2302      	movs	r3, #2
  }
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f28:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d017      	beq.n	8009f64 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	7c1b      	ldrb	r3, [r3, #16]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d109      	bne.n	8009f50 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f46:	2101      	movs	r1, #1
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 fdc9 	bl	800bae0 <USBD_LL_PrepareReceive>
 8009f4e:	e007      	b.n	8009f60 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f56:	2340      	movs	r3, #64	@ 0x40
 8009f58:	2101      	movs	r1, #1
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f001 fdc0 	bl	800bae0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	e000      	b.n	8009f66 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009f64:	2302      	movs	r3, #2
  }
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d10a      	bne.n	8009f9a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8009f84:	4814      	ldr	r0, [pc, #80]	@ (8009fd8 <USBD_Init+0x68>)
 8009f86:	f002 f81d 	bl	800bfc4 <iprintf>
 8009f8a:	4814      	ldr	r0, [pc, #80]	@ (8009fdc <USBD_Init+0x6c>)
 8009f8c:	f002 f81a 	bl	800bfc4 <iprintf>
 8009f90:	200a      	movs	r0, #10
 8009f92:	f002 f829 	bl	800bfe8 <putchar>
#endif
    return USBD_FAIL;
 8009f96:	2302      	movs	r3, #2
 8009f98:	e01a      	b.n	8009fd0 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d003      	beq.n	8009fba <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	79fa      	ldrb	r2, [r7, #7]
 8009fc6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f001 fc23 	bl	800b814 <USBD_LL_Init>

  return USBD_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	0800d004 	.word	0x0800d004
 8009fdc:	0800d00c 	.word	0x0800d00c

08009fe0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d006      	beq.n	800a002 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73fb      	strb	r3, [r7, #15]
 800a000:	e00a      	b.n	800a018 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800a002:	4808      	ldr	r0, [pc, #32]	@ (800a024 <USBD_RegisterClass+0x44>)
 800a004:	f001 ffde 	bl	800bfc4 <iprintf>
 800a008:	4807      	ldr	r0, [pc, #28]	@ (800a028 <USBD_RegisterClass+0x48>)
 800a00a:	f001 ffdb 	bl	800bfc4 <iprintf>
 800a00e:	200a      	movs	r0, #10
 800a010:	f001 ffea 	bl	800bfe8 <putchar>
#endif
    status = USBD_FAIL;
 800a014:	2302      	movs	r3, #2
 800a016:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a018:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	0800d004 	.word	0x0800d004
 800a028:	0800d024 	.word	0x0800d024

0800a02c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 fc47 	bl	800b8c8 <USBD_LL_Start>

  return USBD_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	bc80      	pop	{r7}
 800a056:	4770      	bx	lr

0800a058 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a064:	2302      	movs	r3, #2
 800a066:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00c      	beq.n	800a08c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	78fa      	ldrb	r2, [r7, #3]
 800a07c:	4611      	mov	r1, r2
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	4798      	blx	r3
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	460b      	mov	r3, r1
 800a0a0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	78fa      	ldrb	r2, [r7, #3]
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	4798      	blx	r3

  return USBD_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 fed7 	bl	800ae82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a0f0:	f003 031f 	and.w	r3, r3, #31
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d016      	beq.n	800a126 <USBD_LL_SetupStage+0x6a>
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d81c      	bhi.n	800a136 <USBD_LL_SetupStage+0x7a>
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <USBD_LL_SetupStage+0x4a>
 800a100:	2b01      	cmp	r3, #1
 800a102:	d008      	beq.n	800a116 <USBD_LL_SetupStage+0x5a>
 800a104:	e017      	b.n	800a136 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f9ca 	bl	800a4a8 <USBD_StdDevReq>
      break;
 800a114:	e01a      	b.n	800a14c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a11c:	4619      	mov	r1, r3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fa2c 	bl	800a57c <USBD_StdItfReq>
      break;
 800a124:	e012      	b.n	800a14c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa6c 	bl	800a60c <USBD_StdEPReq>
      break;
 800a134:	e00a      	b.n	800a14c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a13c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a140:	b2db      	uxtb	r3, r3
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f001 fc1f 	bl	800b988 <USBD_LL_StallEP>
      break;
 800a14a:	bf00      	nop
  }

  return USBD_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b086      	sub	sp, #24
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	460b      	mov	r3, r1
 800a160:	607a      	str	r2, [r7, #4]
 800a162:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a164:	7afb      	ldrb	r3, [r7, #11]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d14b      	bne.n	800a202 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a170:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d134      	bne.n	800a1e6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	68da      	ldr	r2, [r3, #12]
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	429a      	cmp	r2, r3
 800a186:	d919      	bls.n	800a1bc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	68da      	ldr	r2, [r3, #12]
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	1ad2      	subs	r2, r2, r3
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	68da      	ldr	r2, [r3, #12]
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d203      	bcs.n	800a1aa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	e002      	b.n	800a1b0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f000 ff53 	bl	800b060 <USBD_CtlContinueRx>
 800a1ba:	e038      	b.n	800a22e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00a      	beq.n	800a1de <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d105      	bne.n	800a1de <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 ff50 	bl	800b084 <USBD_CtlSendStatus>
 800a1e4:	e023      	b.n	800a22e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a1ec:	2b05      	cmp	r3, #5
 800a1ee:	d11e      	bne.n	800a22e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f001 fbc4 	bl	800b988 <USBD_LL_StallEP>
 800a200:	e015      	b.n	800a22e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00d      	beq.n	800a22a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a214:	2b03      	cmp	r3, #3
 800a216:	d108      	bne.n	800a22a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	7afa      	ldrb	r2, [r7, #11]
 800a222:	4611      	mov	r1, r2
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	4798      	blx	r3
 800a228:	e001      	b.n	800a22e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a22a:	2302      	movs	r3, #2
 800a22c:	e000      	b.n	800a230 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	460b      	mov	r3, r1
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a246:	7afb      	ldrb	r3, [r7, #11]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d17f      	bne.n	800a34c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3314      	adds	r3, #20
 800a250:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d15c      	bne.n	800a316 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	68da      	ldr	r2, [r3, #12]
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	429a      	cmp	r2, r3
 800a266:	d915      	bls.n	800a294 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	68da      	ldr	r2, [r3, #12]
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	1ad2      	subs	r2, r2, r3
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	461a      	mov	r2, r3
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 febd 	bl	800b000 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a286:	2300      	movs	r3, #0
 800a288:	2200      	movs	r2, #0
 800a28a:	2100      	movs	r1, #0
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f001 fc27 	bl	800bae0 <USBD_LL_PrepareReceive>
 800a292:	e04e      	b.n	800a332 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	6912      	ldr	r2, [r2, #16]
 800a29c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2a0:	fb01 f202 	mul.w	r2, r1, r2
 800a2a4:	1a9b      	subs	r3, r3, r2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d11c      	bne.n	800a2e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d316      	bcc.n	800a2e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	689a      	ldr	r2, [r3, #8]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d20f      	bcs.n	800a2e4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fe99 	bl	800b000 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	2200      	movs	r2, #0
 800a2da:	2100      	movs	r1, #0
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f001 fbff 	bl	800bae0 <USBD_LL_PrepareReceive>
 800a2e2:	e026      	b.n	800a332 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00a      	beq.n	800a306 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d105      	bne.n	800a306 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a306:	2180      	movs	r1, #128	@ 0x80
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f001 fb3d 	bl	800b988 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f000 fecb 	bl	800b0aa <USBD_CtlReceiveStatus>
 800a314:	e00d      	b.n	800a332 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d004      	beq.n	800a32a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a326:	2b00      	cmp	r3, #0
 800a328:	d103      	bne.n	800a332 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a32a:	2180      	movs	r1, #128	@ 0x80
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f001 fb2b 	bl	800b988 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d11d      	bne.n	800a378 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f7ff fe81 	bl	800a044 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a34a:	e015      	b.n	800a378 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a352:	695b      	ldr	r3, [r3, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00d      	beq.n	800a374 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d108      	bne.n	800a374 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	7afa      	ldrb	r2, [r7, #11]
 800a36c:	4611      	mov	r1, r2
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	4798      	blx	r3
 800a372:	e001      	b.n	800a378 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a374:	2302      	movs	r3, #2
 800a376:	e000      	b.n	800a37a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b082      	sub	sp, #8
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a38a:	2340      	movs	r3, #64	@ 0x40
 800a38c:	2200      	movs	r2, #0
 800a38e:	2100      	movs	r1, #0
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f001 fab4 	bl	800b8fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2240      	movs	r2, #64	@ 0x40
 800a3a2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3a6:	2340      	movs	r3, #64	@ 0x40
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2180      	movs	r1, #128	@ 0x80
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f001 faa6 	bl	800b8fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2240      	movs	r2, #64	@ 0x40
 800a3bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d009      	beq.n	800a3fa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	6852      	ldr	r2, [r2, #4]
 800a3f2:	b2d2      	uxtb	r2, r2
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	4798      	blx	r3
  }

  return USBD_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	460b      	mov	r3, r1
 800a40e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	78fa      	ldrb	r2, [r7, #3]
 800a414:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bc80      	pop	{r7}
 800a420:	4770      	bx	lr

0800a422 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2204      	movs	r2, #4
 800a43a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	bc80      	pop	{r7}
 800a448:	4770      	bx	lr

0800a44a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b083      	sub	sp, #12
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a458:	2b04      	cmp	r3, #4
 800a45a:	d105      	bne.n	800a468 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	bc80      	pop	{r7}
 800a472:	4770      	bx	lr

0800a474 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a482:	2b03      	cmp	r3, #3
 800a484:	d10b      	bne.n	800a49e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d005      	beq.n	800a49e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a498:	69db      	ldr	r3, [r3, #28]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4be:	2b40      	cmp	r3, #64	@ 0x40
 800a4c0:	d005      	beq.n	800a4ce <USBD_StdDevReq+0x26>
 800a4c2:	2b40      	cmp	r3, #64	@ 0x40
 800a4c4:	d84f      	bhi.n	800a566 <USBD_StdDevReq+0xbe>
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d009      	beq.n	800a4de <USBD_StdDevReq+0x36>
 800a4ca:	2b20      	cmp	r3, #32
 800a4cc:	d14b      	bne.n	800a566 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	4798      	blx	r3
      break;
 800a4dc:	e048      	b.n	800a570 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	785b      	ldrb	r3, [r3, #1]
 800a4e2:	2b09      	cmp	r3, #9
 800a4e4:	d839      	bhi.n	800a55a <USBD_StdDevReq+0xb2>
 800a4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ec <USBD_StdDevReq+0x44>)
 800a4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ec:	0800a53d 	.word	0x0800a53d
 800a4f0:	0800a551 	.word	0x0800a551
 800a4f4:	0800a55b 	.word	0x0800a55b
 800a4f8:	0800a547 	.word	0x0800a547
 800a4fc:	0800a55b 	.word	0x0800a55b
 800a500:	0800a51f 	.word	0x0800a51f
 800a504:	0800a515 	.word	0x0800a515
 800a508:	0800a55b 	.word	0x0800a55b
 800a50c:	0800a533 	.word	0x0800a533
 800a510:	0800a529 	.word	0x0800a529
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a514:	6839      	ldr	r1, [r7, #0]
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f9dc 	bl	800a8d4 <USBD_GetDescriptor>
          break;
 800a51c:	e022      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fb3f 	bl	800aba4 <USBD_SetAddress>
          break;
 800a526:	e01d      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fb7e 	bl	800ac2c <USBD_SetConfig>
          break;
 800a530:	e018      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fc07 	bl	800ad48 <USBD_GetConfig>
          break;
 800a53a:	e013      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fc37 	bl	800adb2 <USBD_GetStatus>
          break;
 800a544:	e00e      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fc65 	bl	800ae18 <USBD_SetFeature>
          break;
 800a54e:	e009      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fc74 	bl	800ae40 <USBD_ClrFeature>
          break;
 800a558:	e004      	b.n	800a564 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fcc9 	bl	800aef4 <USBD_CtlError>
          break;
 800a562:	bf00      	nop
      }
      break;
 800a564:	e004      	b.n	800a570 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fcc3 	bl	800aef4 <USBD_CtlError>
      break;
 800a56e:	bf00      	nop
  }

  return ret;
 800a570:	7bfb      	ldrb	r3, [r7, #15]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop

0800a57c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a592:	2b40      	cmp	r3, #64	@ 0x40
 800a594:	d005      	beq.n	800a5a2 <USBD_StdItfReq+0x26>
 800a596:	2b40      	cmp	r3, #64	@ 0x40
 800a598:	d82e      	bhi.n	800a5f8 <USBD_StdItfReq+0x7c>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <USBD_StdItfReq+0x26>
 800a59e:	2b20      	cmp	r3, #32
 800a5a0:	d12a      	bne.n	800a5f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d81d      	bhi.n	800a5ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	889b      	ldrh	r3, [r3, #4]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d813      	bhi.n	800a5e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	6839      	ldr	r1, [r7, #0]
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	4798      	blx	r3
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	88db      	ldrh	r3, [r3, #6]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d110      	bne.n	800a5f4 <USBD_StdItfReq+0x78>
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10d      	bne.n	800a5f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fd53 	bl	800b084 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a5de:	e009      	b.n	800a5f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fc86 	bl	800aef4 <USBD_CtlError>
          break;
 800a5e8:	e004      	b.n	800a5f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fc81 	bl	800aef4 <USBD_CtlError>
          break;
 800a5f2:	e000      	b.n	800a5f6 <USBD_StdItfReq+0x7a>
          break;
 800a5f4:	bf00      	nop
      }
      break;
 800a5f6:	e004      	b.n	800a602 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fc7a 	bl	800aef4 <USBD_CtlError>
      break;
 800a600:	bf00      	nop
  }

  return USBD_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	889b      	ldrh	r3, [r3, #4]
 800a61e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a628:	2b40      	cmp	r3, #64	@ 0x40
 800a62a:	d007      	beq.n	800a63c <USBD_StdEPReq+0x30>
 800a62c:	2b40      	cmp	r3, #64	@ 0x40
 800a62e:	f200 8146 	bhi.w	800a8be <USBD_StdEPReq+0x2b2>
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00a      	beq.n	800a64c <USBD_StdEPReq+0x40>
 800a636:	2b20      	cmp	r3, #32
 800a638:	f040 8141 	bne.w	800a8be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	4798      	blx	r3
      break;
 800a64a:	e13d      	b.n	800a8c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a654:	2b20      	cmp	r3, #32
 800a656:	d10a      	bne.n	800a66e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	4798      	blx	r3
 800a666:	4603      	mov	r3, r0
 800a668:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	e12d      	b.n	800a8ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	2b03      	cmp	r3, #3
 800a674:	d007      	beq.n	800a686 <USBD_StdEPReq+0x7a>
 800a676:	2b03      	cmp	r3, #3
 800a678:	f300 811b 	bgt.w	800a8b2 <USBD_StdEPReq+0x2a6>
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d072      	beq.n	800a766 <USBD_StdEPReq+0x15a>
 800a680:	2b01      	cmp	r3, #1
 800a682:	d03a      	beq.n	800a6fa <USBD_StdEPReq+0xee>
 800a684:	e115      	b.n	800a8b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d002      	beq.n	800a696 <USBD_StdEPReq+0x8a>
 800a690:	2b03      	cmp	r3, #3
 800a692:	d015      	beq.n	800a6c0 <USBD_StdEPReq+0xb4>
 800a694:	e02b      	b.n	800a6ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a696:	7bbb      	ldrb	r3, [r7, #14]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00c      	beq.n	800a6b6 <USBD_StdEPReq+0xaa>
 800a69c:	7bbb      	ldrb	r3, [r7, #14]
 800a69e:	2b80      	cmp	r3, #128	@ 0x80
 800a6a0:	d009      	beq.n	800a6b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 f96e 	bl	800b988 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a6ac:	2180      	movs	r1, #128	@ 0x80
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f001 f96a 	bl	800b988 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6b4:	e020      	b.n	800a6f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fc1b 	bl	800aef4 <USBD_CtlError>
              break;
 800a6be:	e01b      	b.n	800a6f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	885b      	ldrh	r3, [r3, #2]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10e      	bne.n	800a6e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a6c8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00b      	beq.n	800a6e6 <USBD_StdEPReq+0xda>
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	2b80      	cmp	r3, #128	@ 0x80
 800a6d2:	d008      	beq.n	800a6e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	88db      	ldrh	r3, [r3, #6]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d104      	bne.n	800a6e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f001 f951 	bl	800b988 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fccc 	bl	800b084 <USBD_CtlSendStatus>

              break;
 800a6ec:	e004      	b.n	800a6f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fbff 	bl	800aef4 <USBD_CtlError>
              break;
 800a6f6:	bf00      	nop
          }
          break;
 800a6f8:	e0e0      	b.n	800a8bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a700:	2b02      	cmp	r3, #2
 800a702:	d002      	beq.n	800a70a <USBD_StdEPReq+0xfe>
 800a704:	2b03      	cmp	r3, #3
 800a706:	d015      	beq.n	800a734 <USBD_StdEPReq+0x128>
 800a708:	e026      	b.n	800a758 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a70a:	7bbb      	ldrb	r3, [r7, #14]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00c      	beq.n	800a72a <USBD_StdEPReq+0x11e>
 800a710:	7bbb      	ldrb	r3, [r7, #14]
 800a712:	2b80      	cmp	r3, #128	@ 0x80
 800a714:	d009      	beq.n	800a72a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 f934 	bl	800b988 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a720:	2180      	movs	r1, #128	@ 0x80
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f001 f930 	bl	800b988 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a728:	e01c      	b.n	800a764 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fbe1 	bl	800aef4 <USBD_CtlError>
              break;
 800a732:	e017      	b.n	800a764 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	885b      	ldrh	r3, [r3, #2]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d112      	bne.n	800a762 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a742:	2b00      	cmp	r3, #0
 800a744:	d004      	beq.n	800a750 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a746:	7bbb      	ldrb	r3, [r7, #14]
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 f93b 	bl	800b9c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fc97 	bl	800b084 <USBD_CtlSendStatus>
              }
              break;
 800a756:	e004      	b.n	800a762 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fbca 	bl	800aef4 <USBD_CtlError>
              break;
 800a760:	e000      	b.n	800a764 <USBD_StdEPReq+0x158>
              break;
 800a762:	bf00      	nop
          }
          break;
 800a764:	e0aa      	b.n	800a8bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d002      	beq.n	800a776 <USBD_StdEPReq+0x16a>
 800a770:	2b03      	cmp	r3, #3
 800a772:	d032      	beq.n	800a7da <USBD_StdEPReq+0x1ce>
 800a774:	e097      	b.n	800a8a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d007      	beq.n	800a78c <USBD_StdEPReq+0x180>
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b80      	cmp	r3, #128	@ 0x80
 800a780:	d004      	beq.n	800a78c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fbb5 	bl	800aef4 <USBD_CtlError>
                break;
 800a78a:	e091      	b.n	800a8b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a78c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a790:	2b00      	cmp	r3, #0
 800a792:	da0b      	bge.n	800a7ac <USBD_StdEPReq+0x1a0>
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a79a:	4613      	mov	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	3310      	adds	r3, #16
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	e00b      	b.n	800a7c4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fbf8 	bl	800afc8 <USBD_CtlSendData>
              break;
 800a7d8:	e06a      	b.n	800a8b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a7da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	da11      	bge.n	800a806 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a7e2:	7bbb      	ldrb	r3, [r7, #14]
 800a7e4:	f003 020f 	and.w	r2, r3, #15
 800a7e8:	6879      	ldr	r1, [r7, #4]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	440b      	add	r3, r1
 800a7f4:	3318      	adds	r3, #24
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d117      	bne.n	800a82c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fb78 	bl	800aef4 <USBD_CtlError>
                  break;
 800a804:	e054      	b.n	800a8b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	f003 020f 	and.w	r2, r3, #15
 800a80c:	6879      	ldr	r1, [r7, #4]
 800a80e:	4613      	mov	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	440b      	add	r3, r1
 800a818:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d104      	bne.n	800a82c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fb65 	bl	800aef4 <USBD_CtlError>
                  break;
 800a82a:	e041      	b.n	800a8b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a82c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a830:	2b00      	cmp	r3, #0
 800a832:	da0b      	bge.n	800a84c <USBD_StdEPReq+0x240>
 800a834:	7bbb      	ldrb	r3, [r7, #14]
 800a836:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a83a:	4613      	mov	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	3310      	adds	r3, #16
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	4413      	add	r3, r2
 800a848:	3304      	adds	r3, #4
 800a84a:	e00b      	b.n	800a864 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a852:	4613      	mov	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	4413      	add	r3, r2
 800a862:	3304      	adds	r3, #4
 800a864:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <USBD_StdEPReq+0x266>
 800a86c:	7bbb      	ldrb	r3, [r7, #14]
 800a86e:	2b80      	cmp	r3, #128	@ 0x80
 800a870:	d103      	bne.n	800a87a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	2200      	movs	r2, #0
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	e00e      	b.n	800a898 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f001 f8c0 	bl	800ba04 <USBD_LL_IsStallEP>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2201      	movs	r2, #1
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	e002      	b.n	800a898 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	2202      	movs	r2, #2
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fb92 	bl	800afc8 <USBD_CtlSendData>
              break;
 800a8a4:	e004      	b.n	800a8b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fb23 	bl	800aef4 <USBD_CtlError>
              break;
 800a8ae:	bf00      	nop
          }
          break;
 800a8b0:	e004      	b.n	800a8bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fb1d 	bl	800aef4 <USBD_CtlError>
          break;
 800a8ba:	bf00      	nop
      }
      break;
 800a8bc:	e004      	b.n	800a8c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fb17 	bl	800aef4 <USBD_CtlError>
      break;
 800a8c6:	bf00      	nop
  }

  return ret;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	885b      	ldrh	r3, [r3, #2]
 800a8ee:	0a1b      	lsrs	r3, r3, #8
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	2b06      	cmp	r3, #6
 800a8f6:	f200 8128 	bhi.w	800ab4a <USBD_GetDescriptor+0x276>
 800a8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a900 <USBD_GetDescriptor+0x2c>)
 800a8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a900:	0800a91d 	.word	0x0800a91d
 800a904:	0800a935 	.word	0x0800a935
 800a908:	0800a975 	.word	0x0800a975
 800a90c:	0800ab4b 	.word	0x0800ab4b
 800a910:	0800ab4b 	.word	0x0800ab4b
 800a914:	0800aaeb 	.word	0x0800aaeb
 800a918:	0800ab17 	.word	0x0800ab17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	7c12      	ldrb	r2, [r2, #16]
 800a928:	f107 0108 	add.w	r1, r7, #8
 800a92c:	4610      	mov	r0, r2
 800a92e:	4798      	blx	r3
 800a930:	60f8      	str	r0, [r7, #12]
      break;
 800a932:	e112      	b.n	800ab5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	7c1b      	ldrb	r3, [r3, #16]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10d      	bne.n	800a958 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a944:	f107 0208 	add.w	r2, r7, #8
 800a948:	4610      	mov	r0, r2
 800a94a:	4798      	blx	r3
 800a94c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3301      	adds	r3, #1
 800a952:	2202      	movs	r2, #2
 800a954:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a956:	e100      	b.n	800ab5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a95e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a960:	f107 0208 	add.w	r2, r7, #8
 800a964:	4610      	mov	r0, r2
 800a966:	4798      	blx	r3
 800a968:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3301      	adds	r3, #1
 800a96e:	2202      	movs	r2, #2
 800a970:	701a      	strb	r2, [r3, #0]
      break;
 800a972:	e0f2      	b.n	800ab5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	885b      	ldrh	r3, [r3, #2]
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b05      	cmp	r3, #5
 800a97c:	f200 80ac 	bhi.w	800aad8 <USBD_GetDescriptor+0x204>
 800a980:	a201      	add	r2, pc, #4	@ (adr r2, 800a988 <USBD_GetDescriptor+0xb4>)
 800a982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a986:	bf00      	nop
 800a988:	0800a9a1 	.word	0x0800a9a1
 800a98c:	0800a9d5 	.word	0x0800a9d5
 800a990:	0800aa09 	.word	0x0800aa09
 800a994:	0800aa3d 	.word	0x0800aa3d
 800a998:	0800aa71 	.word	0x0800aa71
 800a99c:	0800aaa5 	.word	0x0800aaa5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00b      	beq.n	800a9c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	7c12      	ldrb	r2, [r2, #16]
 800a9b8:	f107 0108 	add.w	r1, r7, #8
 800a9bc:	4610      	mov	r0, r2
 800a9be:	4798      	blx	r3
 800a9c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9c2:	e091      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fa94 	bl	800aef4 <USBD_CtlError>
            err++;
 800a9cc:	7afb      	ldrb	r3, [r7, #11]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9d2:	e089      	b.n	800aae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00b      	beq.n	800a9f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	7c12      	ldrb	r2, [r2, #16]
 800a9ec:	f107 0108 	add.w	r1, r7, #8
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	4798      	blx	r3
 800a9f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9f6:	e077      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fa7a 	bl	800aef4 <USBD_CtlError>
            err++;
 800aa00:	7afb      	ldrb	r3, [r7, #11]
 800aa02:	3301      	adds	r3, #1
 800aa04:	72fb      	strb	r3, [r7, #11]
          break;
 800aa06:	e06f      	b.n	800aae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00b      	beq.n	800aa2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	7c12      	ldrb	r2, [r2, #16]
 800aa20:	f107 0108 	add.w	r1, r7, #8
 800aa24:	4610      	mov	r0, r2
 800aa26:	4798      	blx	r3
 800aa28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa2a:	e05d      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fa60 	bl	800aef4 <USBD_CtlError>
            err++;
 800aa34:	7afb      	ldrb	r3, [r7, #11]
 800aa36:	3301      	adds	r3, #1
 800aa38:	72fb      	strb	r3, [r7, #11]
          break;
 800aa3a:	e055      	b.n	800aae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	7c12      	ldrb	r2, [r2, #16]
 800aa54:	f107 0108 	add.w	r1, r7, #8
 800aa58:	4610      	mov	r0, r2
 800aa5a:	4798      	blx	r3
 800aa5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa5e:	e043      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 fa46 	bl	800aef4 <USBD_CtlError>
            err++;
 800aa68:	7afb      	ldrb	r3, [r7, #11]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa6e:	e03b      	b.n	800aae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00b      	beq.n	800aa94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	7c12      	ldrb	r2, [r2, #16]
 800aa88:	f107 0108 	add.w	r1, r7, #8
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	4798      	blx	r3
 800aa90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa92:	e029      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fa2c 	bl	800aef4 <USBD_CtlError>
            err++;
 800aa9c:	7afb      	ldrb	r3, [r7, #11]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	72fb      	strb	r3, [r7, #11]
          break;
 800aaa2:	e021      	b.n	800aae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	7c12      	ldrb	r2, [r2, #16]
 800aabc:	f107 0108 	add.w	r1, r7, #8
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
 800aac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aac6:	e00f      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fa12 	bl	800aef4 <USBD_CtlError>
            err++;
 800aad0:	7afb      	ldrb	r3, [r7, #11]
 800aad2:	3301      	adds	r3, #1
 800aad4:	72fb      	strb	r3, [r7, #11]
          break;
 800aad6:	e007      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa0a 	bl	800aef4 <USBD_CtlError>
          err++;
 800aae0:	7afb      	ldrb	r3, [r7, #11]
 800aae2:	3301      	adds	r3, #1
 800aae4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800aae6:	e038      	b.n	800ab5a <USBD_GetDescriptor+0x286>
 800aae8:	e037      	b.n	800ab5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	7c1b      	ldrb	r3, [r3, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d109      	bne.n	800ab06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aafa:	f107 0208 	add.w	r2, r7, #8
 800aafe:	4610      	mov	r0, r2
 800ab00:	4798      	blx	r3
 800ab02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab04:	e029      	b.n	800ab5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f9f3 	bl	800aef4 <USBD_CtlError>
        err++;
 800ab0e:	7afb      	ldrb	r3, [r7, #11]
 800ab10:	3301      	adds	r3, #1
 800ab12:	72fb      	strb	r3, [r7, #11]
      break;
 800ab14:	e021      	b.n	800ab5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7c1b      	ldrb	r3, [r3, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10d      	bne.n	800ab3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab26:	f107 0208 	add.w	r2, r7, #8
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	4798      	blx	r3
 800ab2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3301      	adds	r3, #1
 800ab34:	2207      	movs	r2, #7
 800ab36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab38:	e00f      	b.n	800ab5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f9d9 	bl	800aef4 <USBD_CtlError>
        err++;
 800ab42:	7afb      	ldrb	r3, [r7, #11]
 800ab44:	3301      	adds	r3, #1
 800ab46:	72fb      	strb	r3, [r7, #11]
      break;
 800ab48:	e007      	b.n	800ab5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f9d1 	bl	800aef4 <USBD_CtlError>
      err++;
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	3301      	adds	r3, #1
 800ab56:	72fb      	strb	r3, [r7, #11]
      break;
 800ab58:	bf00      	nop
  }

  if (err != 0U)
 800ab5a:	7afb      	ldrb	r3, [r7, #11]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d11c      	bne.n	800ab9a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ab60:	893b      	ldrh	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d011      	beq.n	800ab8a <USBD_GetDescriptor+0x2b6>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	88db      	ldrh	r3, [r3, #6]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00d      	beq.n	800ab8a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	88da      	ldrh	r2, [r3, #6]
 800ab72:	893b      	ldrh	r3, [r7, #8]
 800ab74:	4293      	cmp	r3, r2
 800ab76:	bf28      	it	cs
 800ab78:	4613      	movcs	r3, r2
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab7e:	893b      	ldrh	r3, [r7, #8]
 800ab80:	461a      	mov	r2, r3
 800ab82:	68f9      	ldr	r1, [r7, #12]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fa1f 	bl	800afc8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	88db      	ldrh	r3, [r3, #6]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d104      	bne.n	800ab9c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fa76 	bl	800b084 <USBD_CtlSendStatus>
 800ab98:	e000      	b.n	800ab9c <USBD_GetDescriptor+0x2c8>
    return;
 800ab9a:	bf00      	nop
    }
  }
}
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop

0800aba4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	889b      	ldrh	r3, [r3, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d130      	bne.n	800ac18 <USBD_SetAddress+0x74>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	88db      	ldrh	r3, [r3, #6]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d12c      	bne.n	800ac18 <USBD_SetAddress+0x74>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	885b      	ldrh	r3, [r3, #2]
 800abc2:	2b7f      	cmp	r3, #127	@ 0x7f
 800abc4:	d828      	bhi.n	800ac18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	885b      	ldrh	r3, [r3, #2]
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d104      	bne.n	800abe6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f988 	bl	800aef4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe4:	e01d      	b.n	800ac22 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	7bfa      	ldrb	r2, [r7, #15]
 800abea:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 ff32 	bl	800ba5c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fa43 	bl	800b084 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2202      	movs	r2, #2
 800ac08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0c:	e009      	b.n	800ac22 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac16:	e004      	b.n	800ac22 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f96a 	bl	800aef4 <USBD_CtlError>
  }
}
 800ac20:	bf00      	nop
 800ac22:	bf00      	nop
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	885b      	ldrh	r3, [r3, #2]
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	4b41      	ldr	r3, [pc, #260]	@ (800ad44 <USBD_SetConfig+0x118>)
 800ac3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac40:	4b40      	ldr	r3, [pc, #256]	@ (800ad44 <USBD_SetConfig+0x118>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d904      	bls.n	800ac52 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f952 	bl	800aef4 <USBD_CtlError>
 800ac50:	e075      	b.n	800ad3e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d002      	beq.n	800ac62 <USBD_SetConfig+0x36>
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d023      	beq.n	800aca8 <USBD_SetConfig+0x7c>
 800ac60:	e062      	b.n	800ad28 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ac62:	4b38      	ldr	r3, [pc, #224]	@ (800ad44 <USBD_SetConfig+0x118>)
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d01a      	beq.n	800aca0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ac6a:	4b36      	ldr	r3, [pc, #216]	@ (800ad44 <USBD_SetConfig+0x118>)
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2203      	movs	r2, #3
 800ac78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ac7c:	4b31      	ldr	r3, [pc, #196]	@ (800ad44 <USBD_SetConfig+0x118>)
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7ff f9e8 	bl	800a058 <USBD_SetClassConfig>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d104      	bne.n	800ac98 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ac8e:	6839      	ldr	r1, [r7, #0]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f92f 	bl	800aef4 <USBD_CtlError>
            return;
 800ac96:	e052      	b.n	800ad3e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f9f3 	bl	800b084 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ac9e:	e04e      	b.n	800ad3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f9ef 	bl	800b084 <USBD_CtlSendStatus>
        break;
 800aca6:	e04a      	b.n	800ad3e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aca8:	4b26      	ldr	r3, [pc, #152]	@ (800ad44 <USBD_SetConfig+0x118>)
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d112      	bne.n	800acd6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2202      	movs	r2, #2
 800acb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800acb8:	4b22      	ldr	r3, [pc, #136]	@ (800ad44 <USBD_SetConfig+0x118>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	461a      	mov	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800acc2:	4b20      	ldr	r3, [pc, #128]	@ (800ad44 <USBD_SetConfig+0x118>)
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff f9e4 	bl	800a096 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f9d8 	bl	800b084 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800acd4:	e033      	b.n	800ad3e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800acd6:	4b1b      	ldr	r3, [pc, #108]	@ (800ad44 <USBD_SetConfig+0x118>)
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d01d      	beq.n	800ad20 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff f9d2 	bl	800a096 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800acf2:	4b14      	ldr	r3, [pc, #80]	@ (800ad44 <USBD_SetConfig+0x118>)
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800acfc:	4b11      	ldr	r3, [pc, #68]	@ (800ad44 <USBD_SetConfig+0x118>)
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff f9a8 	bl	800a058 <USBD_SetClassConfig>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d104      	bne.n	800ad18 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f8ef 	bl	800aef4 <USBD_CtlError>
            return;
 800ad16:	e012      	b.n	800ad3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f9b3 	bl	800b084 <USBD_CtlSendStatus>
        break;
 800ad1e:	e00e      	b.n	800ad3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f9af 	bl	800b084 <USBD_CtlSendStatus>
        break;
 800ad26:	e00a      	b.n	800ad3e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f8e2 	bl	800aef4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ad30:	4b04      	ldr	r3, [pc, #16]	@ (800ad44 <USBD_SetConfig+0x118>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff f9ad 	bl	800a096 <USBD_ClrClassConfig>
        break;
 800ad3c:	bf00      	nop
    }
  }
}
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	200002dc 	.word	0x200002dc

0800ad48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	88db      	ldrh	r3, [r3, #6]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d004      	beq.n	800ad64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f8c9 	bl	800aef4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad62:	e022      	b.n	800adaa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	dc02      	bgt.n	800ad74 <USBD_GetConfig+0x2c>
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	dc03      	bgt.n	800ad7a <USBD_GetConfig+0x32>
 800ad72:	e015      	b.n	800ada0 <USBD_GetConfig+0x58>
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	d00b      	beq.n	800ad90 <USBD_GetConfig+0x48>
 800ad78:	e012      	b.n	800ada0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3308      	adds	r3, #8
 800ad84:	2201      	movs	r2, #1
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f91d 	bl	800afc8 <USBD_CtlSendData>
        break;
 800ad8e:	e00c      	b.n	800adaa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3304      	adds	r3, #4
 800ad94:	2201      	movs	r2, #1
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f915 	bl	800afc8 <USBD_CtlSendData>
        break;
 800ad9e:	e004      	b.n	800adaa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f8a6 	bl	800aef4 <USBD_CtlError>
        break;
 800ada8:	bf00      	nop
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b082      	sub	sp, #8
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adc2:	3b01      	subs	r3, #1
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d81e      	bhi.n	800ae06 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	88db      	ldrh	r3, [r3, #6]
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d004      	beq.n	800adda <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f88e 	bl	800aef4 <USBD_CtlError>
        break;
 800add8:	e01a      	b.n	800ae10 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d005      	beq.n	800adf6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f043 0202 	orr.w	r2, r3, #2
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	330c      	adds	r3, #12
 800adfa:	2202      	movs	r2, #2
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f8e2 	bl	800afc8 <USBD_CtlSendData>
      break;
 800ae04:	e004      	b.n	800ae10 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f873 	bl	800aef4 <USBD_CtlError>
      break;
 800ae0e:	bf00      	nop
  }
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	885b      	ldrh	r3, [r3, #2]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d106      	bne.n	800ae38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f926 	bl	800b084 <USBD_CtlSendStatus>
  }
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae50:	3b01      	subs	r3, #1
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d80b      	bhi.n	800ae6e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	885b      	ldrh	r3, [r3, #2]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d10c      	bne.n	800ae78 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f90c 	bl	800b084 <USBD_CtlSendStatus>
      }
      break;
 800ae6c:	e004      	b.n	800ae78 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f83f 	bl	800aef4 <USBD_CtlError>
      break;
 800ae76:	e000      	b.n	800ae7a <USBD_ClrFeature+0x3a>
      break;
 800ae78:	bf00      	nop
  }
}
 800ae7a:	bf00      	nop
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781a      	ldrb	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	785a      	ldrb	r2, [r3, #1]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	3302      	adds	r3, #2
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	3303      	adds	r3, #3
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	021b      	lsls	r3, r3, #8
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	4413      	add	r3, r2
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	3304      	adds	r3, #4
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	3305      	adds	r3, #5
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	021b      	lsls	r3, r3, #8
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	4413      	add	r3, r2
 800aeca:	b29a      	uxth	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	3306      	adds	r3, #6
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	3307      	adds	r3, #7
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	021b      	lsls	r3, r3, #8
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	4413      	add	r3, r2
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	80da      	strh	r2, [r3, #6]

}
 800aeea:	bf00      	nop
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bc80      	pop	{r7}
 800aef2:	4770      	bx	lr

0800aef4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800aefe:	2180      	movs	r1, #128	@ 0x80
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fd41 	bl	800b988 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800af06:	2100      	movs	r1, #0
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fd3d 	bl	800b988 <USBD_LL_StallEP>
}
 800af0e:	bf00      	nop
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b086      	sub	sp, #24
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d032      	beq.n	800af92 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f000 f834 	bl	800af9a <USBD_GetLen>
 800af32:	4603      	mov	r3, r0
 800af34:	3301      	adds	r3, #1
 800af36:	b29b      	uxth	r3, r3
 800af38:	005b      	lsls	r3, r3, #1
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800af40:	7dfb      	ldrb	r3, [r7, #23]
 800af42:	1c5a      	adds	r2, r3, #1
 800af44:	75fa      	strb	r2, [r7, #23]
 800af46:	461a      	mov	r2, r3
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	4413      	add	r3, r2
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	7812      	ldrb	r2, [r2, #0]
 800af50:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800af52:	7dfb      	ldrb	r3, [r7, #23]
 800af54:	1c5a      	adds	r2, r3, #1
 800af56:	75fa      	strb	r2, [r7, #23]
 800af58:	461a      	mov	r2, r3
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	4413      	add	r3, r2
 800af5e:	2203      	movs	r2, #3
 800af60:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800af62:	e012      	b.n	800af8a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	60fa      	str	r2, [r7, #12]
 800af6a:	7dfa      	ldrb	r2, [r7, #23]
 800af6c:	1c51      	adds	r1, r2, #1
 800af6e:	75f9      	strb	r1, [r7, #23]
 800af70:	4611      	mov	r1, r2
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	440a      	add	r2, r1
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	1c5a      	adds	r2, r3, #1
 800af7e:	75fa      	strb	r2, [r7, #23]
 800af80:	461a      	mov	r2, r3
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	4413      	add	r3, r2
 800af86:	2200      	movs	r2, #0
 800af88:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1e8      	bne.n	800af64 <USBD_GetString+0x4e>
    }
  }
}
 800af92:	bf00      	nop
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b085      	sub	sp, #20
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800afa2:	2300      	movs	r3, #0
 800afa4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800afa6:	e005      	b.n	800afb4 <USBD_GetLen+0x1a>
  {
    len++;
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
 800afaa:	3301      	adds	r3, #1
 800afac:	73fb      	strb	r3, [r7, #15]
    buf++;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3301      	adds	r3, #1
 800afb2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1f5      	bne.n	800afa8 <USBD_GetLen+0xe>
  }

  return len;
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bc80      	pop	{r7}
 800afc6:	4770      	bx	lr

0800afc8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	4613      	mov	r3, r2
 800afd4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2202      	movs	r2, #2
 800afda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800afde:	88fa      	ldrh	r2, [r7, #6]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800afe4:	88fa      	ldrh	r2, [r7, #6]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800afea:	88fb      	ldrh	r3, [r7, #6]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	2100      	movs	r1, #0
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f000 fd52 	bl	800ba9a <USBD_LL_Transmit>

  return USBD_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	4613      	mov	r3, r2
 800b00c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b00e:	88fb      	ldrh	r3, [r7, #6]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	2100      	movs	r1, #0
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f000 fd40 	bl	800ba9a <USBD_LL_Transmit>

  return USBD_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2203      	movs	r2, #3
 800b036:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b03a:	88fa      	ldrh	r2, [r7, #6]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b042:	88fa      	ldrh	r2, [r7, #6]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b04a:	88fb      	ldrh	r3, [r7, #6]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	2100      	movs	r1, #0
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f000 fd45 	bl	800bae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	4613      	mov	r3, r2
 800b06c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b06e:	88fb      	ldrh	r3, [r7, #6]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	2100      	movs	r1, #0
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f000 fd33 	bl	800bae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2204      	movs	r2, #4
 800b090:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b094:	2300      	movs	r3, #0
 800b096:	2200      	movs	r2, #0
 800b098:	2100      	movs	r1, #0
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fcfd 	bl	800ba9a <USBD_LL_Transmit>

  return USBD_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2205      	movs	r2, #5
 800b0b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	2200      	movs	r2, #0
 800b0be:	2100      	movs	r1, #0
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fd0d 	bl	800bae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <LL_GPIO_SetOutputPin>:
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	0a1b      	lsrs	r3, r3, #8
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	611a      	str	r2, [r3, #16]
}
 800b0e4:	bf00      	nop
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bc80      	pop	{r7}
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	LL_GPIO_SetOutputPin(USB_REENUM_GPIO_Port, USB_REENUM_Pin);
 800b0f4:	4914      	ldr	r1, [pc, #80]	@ (800b148 <MX_USB_DEVICE_Init+0x58>)
 800b0f6:	4815      	ldr	r0, [pc, #84]	@ (800b14c <MX_USB_DEVICE_Init+0x5c>)
 800b0f8:	f7ff ffea 	bl	800b0d0 <LL_GPIO_SetOutputPin>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	4914      	ldr	r1, [pc, #80]	@ (800b150 <MX_USB_DEVICE_Init+0x60>)
 800b100:	4814      	ldr	r0, [pc, #80]	@ (800b154 <MX_USB_DEVICE_Init+0x64>)
 800b102:	f7fe ff35 	bl	8009f70 <USBD_Init>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d001      	beq.n	800b110 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800b10c:	f7f6 fe82 	bl	8001e14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b110:	4911      	ldr	r1, [pc, #68]	@ (800b158 <MX_USB_DEVICE_Init+0x68>)
 800b112:	4810      	ldr	r0, [pc, #64]	@ (800b154 <MX_USB_DEVICE_Init+0x64>)
 800b114:	f7fe ff64 	bl	8009fe0 <USBD_RegisterClass>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
 800b11e:	f7f6 fe79 	bl	8001e14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b122:	490e      	ldr	r1, [pc, #56]	@ (800b15c <MX_USB_DEVICE_Init+0x6c>)
 800b124:	480b      	ldr	r0, [pc, #44]	@ (800b154 <MX_USB_DEVICE_Init+0x64>)
 800b126:	f7fe fe87 	bl	8009e38 <USBD_CDC_RegisterInterface>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 800b130:	f7f6 fe70 	bl	8001e14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b134:	4807      	ldr	r0, [pc, #28]	@ (800b154 <MX_USB_DEVICE_Init+0x64>)
 800b136:	f7fe ff79 	bl	800a02c <USBD_Start>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <MX_USB_DEVICE_Init+0x54>
  {
    Error_Handler();
 800b140:	f7f6 fe68 	bl	8001e14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b144:	bf00      	nop
 800b146:	bd80      	pop	{r7, pc}
 800b148:	04800080 	.word	0x04800080
 800b14c:	40011000 	.word	0x40011000
 800b150:	20000134 	.word	0x20000134
 800b154:	200002e0 	.word	0x200002e0
 800b158:	20000020 	.word	0x20000020
 800b15c:	20000124 	.word	0x20000124

0800b160 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b164:	2200      	movs	r2, #0
 800b166:	4905      	ldr	r1, [pc, #20]	@ (800b17c <CDC_Init_FS+0x1c>)
 800b168:	4805      	ldr	r0, [pc, #20]	@ (800b180 <CDC_Init_FS+0x20>)
 800b16a:	f7fe fe7b 	bl	8009e64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b16e:	4905      	ldr	r1, [pc, #20]	@ (800b184 <CDC_Init_FS+0x24>)
 800b170:	4803      	ldr	r0, [pc, #12]	@ (800b180 <CDC_Init_FS+0x20>)
 800b172:	f7fe fe90 	bl	8009e96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b176:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b178:	4618      	mov	r0, r3
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	200009ac 	.word	0x200009ac
 800b180:	200002e0 	.word	0x200002e0
 800b184:	200005ac 	.word	0x200005ac

0800b188 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b188:	b480      	push	{r7}
 800b18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b18c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b18e:	4618      	mov	r0, r3
 800b190:	46bd      	mov	sp, r7
 800b192:	bc80      	pop	{r7}
 800b194:	4770      	bx	lr
	...

0800b198 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	4603      	mov	r3, r0
 800b1a0:	6039      	str	r1, [r7, #0]
 800b1a2:	71fb      	strb	r3, [r7, #7]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */

  switch(cmd)
 800b1a8:	79fb      	ldrb	r3, [r7, #7]
 800b1aa:	2b23      	cmp	r3, #35	@ 0x23
 800b1ac:	f200 809c 	bhi.w	800b2e8 <CDC_Control_FS+0x150>
 800b1b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b8 <CDC_Control_FS+0x20>)
 800b1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b6:	bf00      	nop
 800b1b8:	0800b2e9 	.word	0x0800b2e9
 800b1bc:	0800b2e9 	.word	0x0800b2e9
 800b1c0:	0800b2e9 	.word	0x0800b2e9
 800b1c4:	0800b2e9 	.word	0x0800b2e9
 800b1c8:	0800b2e9 	.word	0x0800b2e9
 800b1cc:	0800b2e9 	.word	0x0800b2e9
 800b1d0:	0800b2e9 	.word	0x0800b2e9
 800b1d4:	0800b2e9 	.word	0x0800b2e9
 800b1d8:	0800b2e9 	.word	0x0800b2e9
 800b1dc:	0800b2e9 	.word	0x0800b2e9
 800b1e0:	0800b2e9 	.word	0x0800b2e9
 800b1e4:	0800b2e9 	.word	0x0800b2e9
 800b1e8:	0800b2e9 	.word	0x0800b2e9
 800b1ec:	0800b2e9 	.word	0x0800b2e9
 800b1f0:	0800b2e9 	.word	0x0800b2e9
 800b1f4:	0800b2e9 	.word	0x0800b2e9
 800b1f8:	0800b2e9 	.word	0x0800b2e9
 800b1fc:	0800b2e9 	.word	0x0800b2e9
 800b200:	0800b2e9 	.word	0x0800b2e9
 800b204:	0800b2e9 	.word	0x0800b2e9
 800b208:	0800b2e9 	.word	0x0800b2e9
 800b20c:	0800b2e9 	.word	0x0800b2e9
 800b210:	0800b2e9 	.word	0x0800b2e9
 800b214:	0800b2e9 	.word	0x0800b2e9
 800b218:	0800b2e9 	.word	0x0800b2e9
 800b21c:	0800b2e9 	.word	0x0800b2e9
 800b220:	0800b2e9 	.word	0x0800b2e9
 800b224:	0800b2e9 	.word	0x0800b2e9
 800b228:	0800b2e9 	.word	0x0800b2e9
 800b22c:	0800b2e9 	.word	0x0800b2e9
 800b230:	0800b2e9 	.word	0x0800b2e9
 800b234:	0800b2e9 	.word	0x0800b2e9
 800b238:	0800b249 	.word	0x0800b249
 800b23c:	0800b283 	.word	0x0800b283
 800b240:	0800b2c9 	.word	0x0800b2c9
 800b244:	0800b2e9 	.word	0x0800b2e9
  /*                                        2 - Even                              */
  /*                                        3 - Mark                              */
  /*                                        4 - Space                             */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).           */
  /********************************************************************************/
    case CDC_SET_LINE_CODING:	LineCoding[0] = pbuf[0];
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781a      	ldrb	r2, [r3, #0]
 800b24c:	4b2a      	ldr	r3, [pc, #168]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b24e:	701a      	strb	r2, [r3, #0]
								LineCoding[1] = pbuf[1];
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	785a      	ldrb	r2, [r3, #1]
 800b254:	4b28      	ldr	r3, [pc, #160]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b256:	705a      	strb	r2, [r3, #1]
								LineCoding[2] = pbuf[2];
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	789a      	ldrb	r2, [r3, #2]
 800b25c:	4b26      	ldr	r3, [pc, #152]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b25e:	709a      	strb	r2, [r3, #2]
								LineCoding[3] = pbuf[3];
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	78da      	ldrb	r2, [r3, #3]
 800b264:	4b24      	ldr	r3, [pc, #144]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b266:	70da      	strb	r2, [r3, #3]
								LineCoding[4] = pbuf[4];
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	791a      	ldrb	r2, [r3, #4]
 800b26c:	4b22      	ldr	r3, [pc, #136]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b26e:	711a      	strb	r2, [r3, #4]
								LineCoding[5] = pbuf[5];
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	795a      	ldrb	r2, [r3, #5]
 800b274:	4b20      	ldr	r3, [pc, #128]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b276:	715a      	strb	r2, [r3, #5]
								LineCoding[6] = pbuf[6];
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	799a      	ldrb	r2, [r3, #6]
 800b27c:	4b1e      	ldr	r3, [pc, #120]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b27e:	719a      	strb	r2, [r3, #6]
								break;
 800b280:	e033      	b.n	800b2ea <CDC_Control_FS+0x152>

    case CDC_GET_LINE_CODING:	pbuf[0] = LineCoding[0];
 800b282:	4b1d      	ldr	r3, [pc, #116]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b284:	781a      	ldrb	r2, [r3, #0]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	701a      	strb	r2, [r3, #0]
								pbuf[1] = LineCoding[1];
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	3301      	adds	r3, #1
 800b28e:	4a1a      	ldr	r2, [pc, #104]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b290:	7852      	ldrb	r2, [r2, #1]
 800b292:	701a      	strb	r2, [r3, #0]
								pbuf[2] = LineCoding[2];
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	3302      	adds	r3, #2
 800b298:	4a17      	ldr	r2, [pc, #92]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b29a:	7892      	ldrb	r2, [r2, #2]
 800b29c:	701a      	strb	r2, [r3, #0]
								pbuf[3] = LineCoding[3];
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	3303      	adds	r3, #3
 800b2a2:	4a15      	ldr	r2, [pc, #84]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b2a4:	78d2      	ldrb	r2, [r2, #3]
 800b2a6:	701a      	strb	r2, [r3, #0]
								pbuf[4] = LineCoding[4];
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	4a12      	ldr	r2, [pc, #72]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b2ae:	7912      	ldrb	r2, [r2, #4]
 800b2b0:	701a      	strb	r2, [r3, #0]
								pbuf[5] = LineCoding[5];
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	3305      	adds	r3, #5
 800b2b6:	4a10      	ldr	r2, [pc, #64]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b2b8:	7952      	ldrb	r2, [r2, #5]
 800b2ba:	701a      	strb	r2, [r3, #0]
								pbuf[6] = LineCoding[6];
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	3306      	adds	r3, #6
 800b2c0:	4a0d      	ldr	r2, [pc, #52]	@ (800b2f8 <CDC_Control_FS+0x160>)
 800b2c2:	7992      	ldrb	r2, [r2, #6]
 800b2c4:	701a      	strb	r2, [r3, #0]
								break;
 800b2c6:	e010      	b.n	800b2ea <CDC_Control_FS+0x152>

    case CDC_SET_CONTROL_LINE_STATE:	USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	60fb      	str	r3, [r7, #12]
										if((req->wValue & 0x0001) != 0) { host_com_port_open = 1;} else{ host_com_port_open = 0;}
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	885b      	ldrh	r3, [r3, #2]
 800b2d0:	f003 0301 	and.w	r3, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d003      	beq.n	800b2e0 <CDC_Control_FS+0x148>
 800b2d8:	4b08      	ldr	r3, [pc, #32]	@ (800b2fc <CDC_Control_FS+0x164>)
 800b2da:	2201      	movs	r2, #1
 800b2dc:	701a      	strb	r2, [r3, #0]
										break;
 800b2de:	e004      	b.n	800b2ea <CDC_Control_FS+0x152>
										if((req->wValue & 0x0001) != 0) { host_com_port_open = 1;} else{ host_com_port_open = 0;}
 800b2e0:	4b06      	ldr	r3, [pc, #24]	@ (800b2fc <CDC_Control_FS+0x164>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	701a      	strb	r2, [r3, #0]
										break;
 800b2e6:	e000      	b.n	800b2ea <CDC_Control_FS+0x152>

    case CDC_SEND_BREAK:
    						break;

    default:
	  	  	  break;
 800b2e8:	bf00      	nop
  }

  return (USBD_OK);
 800b2ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bc80      	pop	{r7}
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	200005a4 	.word	0x200005a4
 800b2fc:	200005ab 	.word	0x200005ab

0800b300 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b300:	b590      	push	{r4, r7, lr}
 800b302:	b089      	sub	sp, #36	@ 0x24
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t status = 0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	76fb      	strb	r3, [r7, #27]
	uint32_t i = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	61fb      	str	r3, [r7, #28]

	if(rxflagbyte != 1)
 800b312:	4b2a      	ldr	r3, [pc, #168]	@ (800b3bc <CDC_Receive_FS+0xbc>)
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d03f      	beq.n	800b39a <CDC_Receive_FS+0x9a>
	{
		for(i=0; i<(*Len); i++)
 800b31a:	2300      	movs	r3, #0
 800b31c:	61fb      	str	r3, [r7, #28]
 800b31e:	e037      	b.n	800b390 <CDC_Receive_FS+0x90>
		{
			rxbuffer[rxbufend] = Buf[i];
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	4413      	add	r3, r2
 800b326:	4a26      	ldr	r2, [pc, #152]	@ (800b3c0 <CDC_Receive_FS+0xc0>)
 800b328:	7812      	ldrb	r2, [r2, #0]
 800b32a:	7819      	ldrb	r1, [r3, #0]
 800b32c:	4b25      	ldr	r3, [pc, #148]	@ (800b3c4 <CDC_Receive_FS+0xc4>)
 800b32e:	5499      	strb	r1, [r3, r2]
			if(Buf[i] == CMD_DONE_CHAR)
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	4413      	add	r3, r2
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2b3b      	cmp	r3, #59	@ 0x3b
 800b33a:	d103      	bne.n	800b344 <CDC_Receive_FS+0x44>
			{
				rxflagbyte = 1;
 800b33c:	4b1f      	ldr	r3, [pc, #124]	@ (800b3bc <CDC_Receive_FS+0xbc>)
 800b33e:	2201      	movs	r2, #1
 800b340:	701a      	strb	r2, [r3, #0]
				break;
 800b342:	e02a      	b.n	800b39a <CDC_Receive_FS+0x9a>
			}
			else{ rxbufend++;}
 800b344:	4b1e      	ldr	r3, [pc, #120]	@ (800b3c0 <CDC_Receive_FS+0xc0>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	3301      	adds	r3, #1
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	4b1c      	ldr	r3, [pc, #112]	@ (800b3c0 <CDC_Receive_FS+0xc0>)
 800b34e:	701a      	strb	r2, [r3, #0]
			if(rxbufend == RXBUFFSIZE)//ha véletlen hosszabb lenne a bejövő mint a buffer akkor figyelmen kívül hagyjuk a végét.
 800b350:	4b1b      	ldr	r3, [pc, #108]	@ (800b3c0 <CDC_Receive_FS+0xc0>)
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	2b64      	cmp	r3, #100	@ 0x64
 800b356:	d118      	bne.n	800b38a <CDC_Receive_FS+0x8a>
			{
				rxbuffer[RXBUFFSIZE-1] = CMD_DONE_CHAR;	//lezárjuk rendesen bab
 800b358:	4b1a      	ldr	r3, [pc, #104]	@ (800b3c4 <CDC_Receive_FS+0xc4>)
 800b35a:	223b      	movs	r2, #59	@ 0x3b
 800b35c:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
				rxbufend = RXBUFFSIZE-1;				//
 800b360:	4b17      	ldr	r3, [pc, #92]	@ (800b3c0 <CDC_Receive_FS+0xc0>)
 800b362:	2263      	movs	r2, #99	@ 0x63
 800b364:	701a      	strb	r2, [r3, #0]
				LL_mDelay(100);
 800b366:	2064      	movs	r0, #100	@ 0x64
 800b368:	f7fe fb08 	bl	800997c <LL_mDelay>

				uint8_t str[] = {"Too long cmd"};
 800b36c:	4b16      	ldr	r3, [pc, #88]	@ (800b3c8 <CDC_Receive_FS+0xc8>)
 800b36e:	f107 040c 	add.w	r4, r7, #12
 800b372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b374:	c407      	stmia	r4!, {r0, r1, r2}
 800b376:	7023      	strb	r3, [r4, #0]
				ext_brd_transmit_string(PrintInfo_cmd, str, sizeof(str));
 800b378:	f107 030c 	add.w	r3, r7, #12
 800b37c:	220d      	movs	r2, #13
 800b37e:	4619      	mov	r1, r3
 800b380:	2003      	movs	r0, #3
 800b382:	f7f6 faa5 	bl	80018d0 <ext_brd_transmit_string>


				Error_Handler();
 800b386:	f7f6 fd45 	bl	8001e14 <Error_Handler>
		for(i=0; i<(*Len); i++)
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	3301      	adds	r3, #1
 800b38e:	61fb      	str	r3, [r7, #28]
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	69fa      	ldr	r2, [r7, #28]
 800b396:	429a      	cmp	r2, r3
 800b398:	d3c2      	bcc.n	800b320 <CDC_Receive_FS+0x20>
			}
		}
	}


	status = USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	480b      	ldr	r0, [pc, #44]	@ (800b3cc <CDC_Receive_FS+0xcc>)
 800b39e:	f7fe fd7a 	bl	8009e96 <USBD_CDC_SetRxBuffer>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	76fb      	strb	r3, [r7, #27]
	status = USBD_CDC_ReceivePacket(&hUsbDeviceFS);//won't accept further data untill this is called
 800b3a6:	4809      	ldr	r0, [pc, #36]	@ (800b3cc <CDC_Receive_FS+0xcc>)
 800b3a8:	f7fe fdb7 	bl	8009f1a <USBD_CDC_ReceivePacket>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	76fb      	strb	r3, [r7, #27]

	return (status);
 800b3b0:	f997 301b 	ldrsb.w	r3, [r7, #27]
  /* USER CODE END 6 */
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3724      	adds	r7, #36	@ 0x24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd90      	pop	{r4, r7, pc}
 800b3bc:	200002b9 	.word	0x200002b9
 800b3c0:	200002b8 	.word	0x200002b8
 800b3c4:	20000254 	.word	0x20000254
 800b3c8:	0800d03c 	.word	0x0800d03c
 800b3cc:	200002e0 	.word	0x200002e0

0800b3d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b3e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b418 <CDC_Transmit_FS+0x48>)
 800b3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3e6:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState != 0)
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <CDC_Transmit_FS+0x26>
  {
	  return USBD_BUSY;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e00b      	b.n	800b40e <CDC_Transmit_FS+0x3e>
  }
  else
  {
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b3f6:	887b      	ldrh	r3, [r7, #2]
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	6879      	ldr	r1, [r7, #4]
 800b3fc:	4806      	ldr	r0, [pc, #24]	@ (800b418 <CDC_Transmit_FS+0x48>)
 800b3fe:	f7fe fd31 	bl	8009e64 <USBD_CDC_SetTxBuffer>
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b402:	4805      	ldr	r0, [pc, #20]	@ (800b418 <CDC_Transmit_FS+0x48>)
 800b404:	f7fe fd5a 	bl	8009ebc <USBD_CDC_TransmitPacket>
 800b408:	4603      	mov	r3, r0
 800b40a:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END 7 */
  return result;
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	200002e0 	.word	0x200002e0

0800b41c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	4603      	mov	r3, r0
 800b424:	6039      	str	r1, [r7, #0]
 800b426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	2212      	movs	r2, #18
 800b42c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b42e:	4b03      	ldr	r3, [pc, #12]	@ (800b43c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b430:	4618      	mov	r0, r3
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	bc80      	pop	{r7}
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	20000150 	.word	0x20000150

0800b440 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	4603      	mov	r3, r0
 800b448:	6039      	str	r1, [r7, #0]
 800b44a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2204      	movs	r2, #4
 800b450:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b452:	4b03      	ldr	r3, [pc, #12]	@ (800b460 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b454:	4618      	mov	r0, r3
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	bc80      	pop	{r7}
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	20000164 	.word	0x20000164

0800b464 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	6039      	str	r1, [r7, #0]
 800b46e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b470:	79fb      	ldrb	r3, [r7, #7]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d105      	bne.n	800b482 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	4907      	ldr	r1, [pc, #28]	@ (800b498 <USBD_FS_ProductStrDescriptor+0x34>)
 800b47a:	4808      	ldr	r0, [pc, #32]	@ (800b49c <USBD_FS_ProductStrDescriptor+0x38>)
 800b47c:	f7ff fd4b 	bl	800af16 <USBD_GetString>
 800b480:	e004      	b.n	800b48c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	4904      	ldr	r1, [pc, #16]	@ (800b498 <USBD_FS_ProductStrDescriptor+0x34>)
 800b486:	4805      	ldr	r0, [pc, #20]	@ (800b49c <USBD_FS_ProductStrDescriptor+0x38>)
 800b488:	f7ff fd45 	bl	800af16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b48c:	4b02      	ldr	r3, [pc, #8]	@ (800b498 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	20000dac 	.word	0x20000dac
 800b49c:	0800d04c 	.word	0x0800d04c

0800b4a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	6039      	str	r1, [r7, #0]
 800b4aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	4904      	ldr	r1, [pc, #16]	@ (800b4c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b4b0:	4804      	ldr	r0, [pc, #16]	@ (800b4c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b4b2:	f7ff fd30 	bl	800af16 <USBD_GetString>
  return USBD_StrDesc;
 800b4b6:	4b02      	ldr	r3, [pc, #8]	@ (800b4c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	20000dac 	.word	0x20000dac
 800b4c4:	0800d074 	.word	0x0800d074

0800b4c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	6039      	str	r1, [r7, #0]
 800b4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	221a      	movs	r2, #26
 800b4d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4da:	f000 f843 	bl	800b564 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b4de:	4b02      	ldr	r3, [pc, #8]	@ (800b4e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	20000168 	.word	0x20000168

0800b4ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	6039      	str	r1, [r7, #0]
 800b4f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4f8:	79fb      	ldrb	r3, [r7, #7]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d105      	bne.n	800b50a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	4907      	ldr	r1, [pc, #28]	@ (800b520 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b502:	4808      	ldr	r0, [pc, #32]	@ (800b524 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b504:	f7ff fd07 	bl	800af16 <USBD_GetString>
 800b508:	e004      	b.n	800b514 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	4904      	ldr	r1, [pc, #16]	@ (800b520 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b50e:	4805      	ldr	r0, [pc, #20]	@ (800b524 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b510:	f7ff fd01 	bl	800af16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b514:	4b02      	ldr	r3, [pc, #8]	@ (800b520 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20000dac 	.word	0x20000dac
 800b524:	0800d088 	.word	0x0800d088

0800b528 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	6039      	str	r1, [r7, #0]
 800b532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d105      	bne.n	800b546 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	4907      	ldr	r1, [pc, #28]	@ (800b55c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b53e:	4808      	ldr	r0, [pc, #32]	@ (800b560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b540:	f7ff fce9 	bl	800af16 <USBD_GetString>
 800b544:	e004      	b.n	800b550 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	4904      	ldr	r1, [pc, #16]	@ (800b55c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b54a:	4805      	ldr	r0, [pc, #20]	@ (800b560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b54c:	f7ff fce3 	bl	800af16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b550:	4b02      	ldr	r3, [pc, #8]	@ (800b55c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	20000dac 	.word	0x20000dac
 800b560:	0800d094 	.word	0x0800d094

0800b564 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b56a:	4b0f      	ldr	r3, [pc, #60]	@ (800b5a8 <Get_SerialNum+0x44>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b570:	4b0e      	ldr	r3, [pc, #56]	@ (800b5ac <Get_SerialNum+0x48>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b576:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b0 <Get_SerialNum+0x4c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4413      	add	r3, r2
 800b582:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d009      	beq.n	800b59e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b58a:	2208      	movs	r2, #8
 800b58c:	4909      	ldr	r1, [pc, #36]	@ (800b5b4 <Get_SerialNum+0x50>)
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f000 f814 	bl	800b5bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b594:	2204      	movs	r2, #4
 800b596:	4908      	ldr	r1, [pc, #32]	@ (800b5b8 <Get_SerialNum+0x54>)
 800b598:	68b8      	ldr	r0, [r7, #8]
 800b59a:	f000 f80f 	bl	800b5bc <IntToUnicode>
  }
}
 800b59e:	bf00      	nop
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	1ffff7e8 	.word	0x1ffff7e8
 800b5ac:	1ffff7ec 	.word	0x1ffff7ec
 800b5b0:	1ffff7f0 	.word	0x1ffff7f0
 800b5b4:	2000016a 	.word	0x2000016a
 800b5b8:	2000017a 	.word	0x2000017a

0800b5bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	75fb      	strb	r3, [r7, #23]
 800b5d2:	e027      	b.n	800b624 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	0f1b      	lsrs	r3, r3, #28
 800b5d8:	2b09      	cmp	r3, #9
 800b5da:	d80b      	bhi.n	800b5f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	0f1b      	lsrs	r3, r3, #28
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	7dfb      	ldrb	r3, [r7, #23]
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	440b      	add	r3, r1
 800b5ec:	3230      	adds	r2, #48	@ 0x30
 800b5ee:	b2d2      	uxtb	r2, r2
 800b5f0:	701a      	strb	r2, [r3, #0]
 800b5f2:	e00a      	b.n	800b60a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	0f1b      	lsrs	r3, r3, #28
 800b5f8:	b2da      	uxtb	r2, r3
 800b5fa:	7dfb      	ldrb	r3, [r7, #23]
 800b5fc:	005b      	lsls	r3, r3, #1
 800b5fe:	4619      	mov	r1, r3
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	440b      	add	r3, r1
 800b604:	3237      	adds	r2, #55	@ 0x37
 800b606:	b2d2      	uxtb	r2, r2
 800b608:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	011b      	lsls	r3, r3, #4
 800b60e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b610:	7dfb      	ldrb	r3, [r7, #23]
 800b612:	005b      	lsls	r3, r3, #1
 800b614:	3301      	adds	r3, #1
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	4413      	add	r3, r2
 800b61a:	2200      	movs	r2, #0
 800b61c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b61e:	7dfb      	ldrb	r3, [r7, #23]
 800b620:	3301      	adds	r3, #1
 800b622:	75fb      	strb	r3, [r7, #23]
 800b624:	7dfa      	ldrb	r2, [r7, #23]
 800b626:	79fb      	ldrb	r3, [r7, #7]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d3d3      	bcc.n	800b5d4 <IntToUnicode+0x18>
  }
}
 800b62c:	bf00      	nop
 800b62e:	bf00      	nop
 800b630:	371c      	adds	r7, #28
 800b632:	46bd      	mov	sp, r7
 800b634:	bc80      	pop	{r7}
 800b636:	4770      	bx	lr

0800b638 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a22      	ldr	r2, [pc, #136]	@ (800b6d0 <HAL_PCD_MspInit+0x98>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d13d      	bne.n	800b6c6 <HAL_PCD_MspInit+0x8e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b64a:	4b22      	ldr	r3, [pc, #136]	@ (800b6d4 <HAL_PCD_MspInit+0x9c>)
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	4a21      	ldr	r2, [pc, #132]	@ (800b6d4 <HAL_PCD_MspInit+0x9c>)
 800b650:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b654:	61d3      	str	r3, [r2, #28]
 800b656:	4b1f      	ldr	r3, [pc, #124]	@ (800b6d4 <HAL_PCD_MspInit+0x9c>)
 800b658:	69db      	ldr	r3, [r3, #28]
 800b65a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b65e:	60fb      	str	r3, [r7, #12]
 800b660:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 1, 0);
 800b662:	2200      	movs	r2, #0
 800b664:	2101      	movs	r1, #1
 800b666:	2013      	movs	r0, #19
 800b668:	f7f8 f91d 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800b66c:	2013      	movs	r0, #19
 800b66e:	f7f8 f936 	bl	80038de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 800b672:	2200      	movs	r2, #0
 800b674:	2101      	movs	r1, #1
 800b676:	2014      	movs	r0, #20
 800b678:	f7f8 f915 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b67c:	2014      	movs	r0, #20
 800b67e:	f7f8 f92e 	bl	80038de <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	699b      	ldr	r3, [r3, #24]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d11d      	bne.n	800b6c6 <HAL_PCD_MspInit+0x8e>
    {
      /* Enable EXTI Line 20 for USB wakeup */
      __HAL_USB_WAKEUP_EXTI_CLEAR_FLAG();
 800b68a:	4b13      	ldr	r3, [pc, #76]	@ (800b6d8 <HAL_PCD_MspInit+0xa0>)
 800b68c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b690:	615a      	str	r2, [r3, #20]
      __HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 800b692:	4b11      	ldr	r3, [pc, #68]	@ (800b6d8 <HAL_PCD_MspInit+0xa0>)
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	4a10      	ldr	r2, [pc, #64]	@ (800b6d8 <HAL_PCD_MspInit+0xa0>)
 800b698:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b69c:	60d3      	str	r3, [r2, #12]
 800b69e:	4b0e      	ldr	r3, [pc, #56]	@ (800b6d8 <HAL_PCD_MspInit+0xa0>)
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	4a0d      	ldr	r2, [pc, #52]	@ (800b6d8 <HAL_PCD_MspInit+0xa0>)
 800b6a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b6a8:	6093      	str	r3, [r2, #8]
      __HAL_USB_WAKEUP_EXTI_ENABLE_IT();
 800b6aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b6d8 <HAL_PCD_MspInit+0xa0>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a0a      	ldr	r2, [pc, #40]	@ (800b6d8 <HAL_PCD_MspInit+0xa0>)
 800b6b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b6b4:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(USBWakeUp_IRQn, 0, 0);
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	202a      	movs	r0, #42	@ 0x2a
 800b6bc:	f7f8 f8f3 	bl	80038a6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(USBWakeUp_IRQn);
 800b6c0:	202a      	movs	r0, #42	@ 0x2a
 800b6c2:	f7f8 f90c 	bl	80038de <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b6c6:	bf00      	nop
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	40005c00 	.word	0x40005c00
 800b6d4:	40021000 	.word	0x40021000
 800b6d8:	40010400 	.word	0x40010400

0800b6dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4610      	mov	r0, r2
 800b6f4:	f7fe fce2 	bl	800a0bc <USBD_LL_SetupStage>
}
 800b6f8:	bf00      	nop
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	460b      	mov	r3, r1
 800b70a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800b712:	78fa      	ldrb	r2, [r7, #3]
 800b714:	6879      	ldr	r1, [r7, #4]
 800b716:	4613      	mov	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4413      	add	r3, r2
 800b71c:	00db      	lsls	r3, r3, #3
 800b71e:	440b      	add	r3, r1
 800b720:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	78fb      	ldrb	r3, [r7, #3]
 800b728:	4619      	mov	r1, r3
 800b72a:	f7fe fd14 	bl	800a156 <USBD_LL_DataOutStage>
}
 800b72e:	bf00      	nop
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b082      	sub	sp, #8
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	460b      	mov	r3, r1
 800b740:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800b748:	78fa      	ldrb	r2, [r7, #3]
 800b74a:	6879      	ldr	r1, [r7, #4]
 800b74c:	4613      	mov	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	4413      	add	r3, r2
 800b752:	00db      	lsls	r3, r3, #3
 800b754:	440b      	add	r3, r1
 800b756:	333c      	adds	r3, #60	@ 0x3c
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	78fb      	ldrb	r3, [r7, #3]
 800b75c:	4619      	mov	r1, r3
 800b75e:	f7fe fd6b 	bl	800a238 <USBD_LL_DataInStage>
}
 800b762:	bf00      	nop
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b082      	sub	sp, #8
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b778:	4618      	mov	r0, r3
 800b77a:	f7fe fe7b 	bl	800a474 <USBD_LL_SOF>
}
 800b77e:	bf00      	nop
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b78e:	2301      	movs	r3, #1
 800b790:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	2b02      	cmp	r3, #2
 800b798:	d001      	beq.n	800b79e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b79a:	f7f6 fb3b 	bl	8001e14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b7a4:	7bfa      	ldrb	r2, [r7, #15]
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7fe fe2b 	bl	800a404 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fe fde4 	bl	800a382 <USBD_LL_Reset>
}
 800b7ba:	bf00      	nop
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
	...

0800b7c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7fe fe25 	bl	800a422 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d005      	beq.n	800b7ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7e0:	4b04      	ldr	r3, [pc, #16]	@ (800b7f4 <HAL_PCD_SuspendCallback+0x30>)
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	4a03      	ldr	r2, [pc, #12]	@ (800b7f4 <HAL_PCD_SuspendCallback+0x30>)
 800b7e6:	f043 0306 	orr.w	r3, r3, #6
 800b7ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	e000ed00 	.word	0xe000ed00

0800b7f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fe1f 	bl	800a44a <USBD_LL_Resume>
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b81c:	4a28      	ldr	r2, [pc, #160]	@ (800b8c0 <USBD_LL_Init+0xac>)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a26      	ldr	r2, [pc, #152]	@ (800b8c0 <USBD_LL_Init+0xac>)
 800b828:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b82c:	4b24      	ldr	r3, [pc, #144]	@ (800b8c0 <USBD_LL_Init+0xac>)
 800b82e:	4a25      	ldr	r2, [pc, #148]	@ (800b8c4 <USBD_LL_Init+0xb0>)
 800b830:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b832:	4b23      	ldr	r3, [pc, #140]	@ (800b8c0 <USBD_LL_Init+0xac>)
 800b834:	2208      	movs	r2, #8
 800b836:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b838:	4b21      	ldr	r3, [pc, #132]	@ (800b8c0 <USBD_LL_Init+0xac>)
 800b83a:	2202      	movs	r2, #2
 800b83c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = ENABLE;
 800b83e:	4b20      	ldr	r3, [pc, #128]	@ (800b8c0 <USBD_LL_Init+0xac>)
 800b840:	2201      	movs	r2, #1
 800b842:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b844:	4b1e      	ldr	r3, [pc, #120]	@ (800b8c0 <USBD_LL_Init+0xac>)
 800b846:	2200      	movs	r2, #0
 800b848:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b84a:	4b1d      	ldr	r3, [pc, #116]	@ (800b8c0 <USBD_LL_Init+0xac>)
 800b84c:	2200      	movs	r2, #0
 800b84e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b850:	481b      	ldr	r0, [pc, #108]	@ (800b8c0 <USBD_LL_Init+0xac>)
 800b852:	f7f8 fa5b 	bl	8003d0c <HAL_PCD_Init>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b85c:	f7f6 fada 	bl	8001e14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b866:	2318      	movs	r3, #24
 800b868:	2200      	movs	r2, #0
 800b86a:	2100      	movs	r1, #0
 800b86c:	f7f9 ff79 	bl	8005762 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b876:	2358      	movs	r3, #88	@ 0x58
 800b878:	2200      	movs	r2, #0
 800b87a:	2180      	movs	r1, #128	@ 0x80
 800b87c:	f7f9 ff71 	bl	8005762 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b886:	23c0      	movs	r3, #192	@ 0xc0
 800b888:	2200      	movs	r2, #0
 800b88a:	2181      	movs	r1, #129	@ 0x81
 800b88c:	f7f9 ff69 	bl	8005762 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b896:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b89a:	2200      	movs	r2, #0
 800b89c:	2101      	movs	r1, #1
 800b89e:	f7f9 ff60 	bl	8005762 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b8a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2182      	movs	r1, #130	@ 0x82
 800b8b0:	f7f9 ff57 	bl	8005762 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20000fac 	.word	0x20000fac
 800b8c4:	40005c00 	.word	0x40005c00

0800b8c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7f8 fb13 	bl	8003f0a <HAL_PCD_Start>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 f94e 	bl	800bb8c <USBD_Get_USB_Status>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	4608      	mov	r0, r1
 800b908:	4611      	mov	r1, r2
 800b90a:	461a      	mov	r2, r3
 800b90c:	4603      	mov	r3, r0
 800b90e:	70fb      	strb	r3, [r7, #3]
 800b910:	460b      	mov	r3, r1
 800b912:	70bb      	strb	r3, [r7, #2]
 800b914:	4613      	mov	r3, r2
 800b916:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b926:	78bb      	ldrb	r3, [r7, #2]
 800b928:	883a      	ldrh	r2, [r7, #0]
 800b92a:	78f9      	ldrb	r1, [r7, #3]
 800b92c:	f7f8 fc68 	bl	8004200 <HAL_PCD_EP_Open>
 800b930:	4603      	mov	r3, r0
 800b932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b934:	7bfb      	ldrb	r3, [r7, #15]
 800b936:	4618      	mov	r0, r3
 800b938:	f000 f928 	bl	800bb8c <USBD_Get_USB_Status>
 800b93c:	4603      	mov	r3, r0
 800b93e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b940:	7bbb      	ldrb	r3, [r7, #14]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	460b      	mov	r3, r1
 800b954:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b956:	2300      	movs	r3, #0
 800b958:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b964:	78fa      	ldrb	r2, [r7, #3]
 800b966:	4611      	mov	r1, r2
 800b968:	4618      	mov	r0, r3
 800b96a:	f7f8 fca6 	bl	80042ba <HAL_PCD_EP_Close>
 800b96e:	4603      	mov	r3, r0
 800b970:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b972:	7bfb      	ldrb	r3, [r7, #15]
 800b974:	4618      	mov	r0, r3
 800b976:	f000 f909 	bl	800bb8c <USBD_Get_USB_Status>
 800b97a:	4603      	mov	r3, r0
 800b97c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b97e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b9a2:	78fa      	ldrb	r2, [r7, #3]
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7f8 fd4e 	bl	8004448 <HAL_PCD_EP_SetStall>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 f8ea 	bl	800bb8c <USBD_Get_USB_Status>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3710      	adds	r7, #16
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b084      	sub	sp, #16
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b9e0:	78fa      	ldrb	r2, [r7, #3]
 800b9e2:	4611      	mov	r1, r2
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7f8 fd8f 	bl	8004508 <HAL_PCD_EP_ClrStall>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f000 f8cb 	bl	800bb8c <USBD_Get_USB_Status>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	da0c      	bge.n	800ba3a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba20:	78fb      	ldrb	r3, [r7, #3]
 800ba22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba26:	68f9      	ldr	r1, [r7, #12]
 800ba28:	1c5a      	adds	r2, r3, #1
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	00db      	lsls	r3, r3, #3
 800ba32:	440b      	add	r3, r1
 800ba34:	3302      	adds	r3, #2
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	e00b      	b.n	800ba52 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba3a:	78fb      	ldrb	r3, [r7, #3]
 800ba3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba40:	68f9      	ldr	r1, [r7, #12]
 800ba42:	4613      	mov	r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4413      	add	r3, r2
 800ba48:	00db      	lsls	r3, r3, #3
 800ba4a:	440b      	add	r3, r1
 800ba4c:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800ba50:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bc80      	pop	{r7}
 800ba5a:	4770      	bx	lr

0800ba5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba76:	78fa      	ldrb	r2, [r7, #3]
 800ba78:	4611      	mov	r1, r2
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7f8 fb9b 	bl	80041b6 <HAL_PCD_SetAddress>
 800ba80:	4603      	mov	r3, r0
 800ba82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
 800ba86:	4618      	mov	r0, r3
 800ba88:	f000 f880 	bl	800bb8c <USBD_Get_USB_Status>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b086      	sub	sp, #24
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	60f8      	str	r0, [r7, #12]
 800baa2:	607a      	str	r2, [r7, #4]
 800baa4:	461a      	mov	r2, r3
 800baa6:	460b      	mov	r3, r1
 800baa8:	72fb      	strb	r3, [r7, #11]
 800baaa:	4613      	mov	r3, r2
 800baac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800babc:	893b      	ldrh	r3, [r7, #8]
 800babe:	7af9      	ldrb	r1, [r7, #11]
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	f7f8 fc8a 	bl	80043da <HAL_PCD_EP_Transmit>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 f85d 	bl	800bb8c <USBD_Get_USB_Status>
 800bad2:	4603      	mov	r3, r0
 800bad4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bad6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	607a      	str	r2, [r7, #4]
 800baea:	461a      	mov	r2, r3
 800baec:	460b      	mov	r3, r1
 800baee:	72fb      	strb	r3, [r7, #11]
 800baf0:	4613      	mov	r3, r2
 800baf2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bb02:	893b      	ldrh	r3, [r7, #8]
 800bb04:	7af9      	ldrb	r1, [r7, #11]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	f7f8 fc1f 	bl	800434a <HAL_PCD_EP_Receive>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 f83a 	bl	800bb8c <USBD_Get_USB_Status>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb1c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b082      	sub	sp, #8
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bb38:	78fa      	ldrb	r2, [r7, #3]
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7f8 fc35 	bl	80043ac <HAL_PCD_EP_GetRxCount>
 800bb42:	4603      	mov	r3, r0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb54:	4b02      	ldr	r3, [pc, #8]	@ (800bb60 <USBD_static_malloc+0x14>)
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bc80      	pop	{r7}
 800bb5e:	4770      	bx	lr
 800bb60:	2000129c 	.word	0x2000129c

0800bb64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]

}
 800bb6c:	bf00      	nop
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bc80      	pop	{r7}
 800bb74:	4770      	bx	lr

0800bb76 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	460b      	mov	r3, r1
 800bb80:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bb82:	bf00      	nop
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bc80      	pop	{r7}
 800bb8a:	4770      	bx	lr

0800bb8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb9a:	79fb      	ldrb	r3, [r7, #7]
 800bb9c:	2b03      	cmp	r3, #3
 800bb9e:	d817      	bhi.n	800bbd0 <USBD_Get_USB_Status+0x44>
 800bba0:	a201      	add	r2, pc, #4	@ (adr r2, 800bba8 <USBD_Get_USB_Status+0x1c>)
 800bba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba6:	bf00      	nop
 800bba8:	0800bbb9 	.word	0x0800bbb9
 800bbac:	0800bbbf 	.word	0x0800bbbf
 800bbb0:	0800bbc5 	.word	0x0800bbc5
 800bbb4:	0800bbcb 	.word	0x0800bbcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73fb      	strb	r3, [r7, #15]
    break;
 800bbbc:	e00b      	b.n	800bbd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc2:	e008      	b.n	800bbd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc8:	e005      	b.n	800bbd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbca:	2302      	movs	r3, #2
 800bbcc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbce:	e002      	b.n	800bbd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd4:	bf00      	nop
  }
  return usb_status;
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3714      	adds	r7, #20
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bc80      	pop	{r7}
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop

0800bbe4 <calloc>:
 800bbe4:	4b02      	ldr	r3, [pc, #8]	@ (800bbf0 <calloc+0xc>)
 800bbe6:	460a      	mov	r2, r1
 800bbe8:	4601      	mov	r1, r0
 800bbea:	6818      	ldr	r0, [r3, #0]
 800bbec:	f000 b802 	b.w	800bbf4 <_calloc_r>
 800bbf0:	20000190 	.word	0x20000190

0800bbf4 <_calloc_r>:
 800bbf4:	b570      	push	{r4, r5, r6, lr}
 800bbf6:	fba1 5402 	umull	r5, r4, r1, r2
 800bbfa:	b93c      	cbnz	r4, 800bc0c <_calloc_r+0x18>
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	f000 f851 	bl	800bca4 <_malloc_r>
 800bc02:	4606      	mov	r6, r0
 800bc04:	b928      	cbnz	r0, 800bc12 <_calloc_r+0x1e>
 800bc06:	2600      	movs	r6, #0
 800bc08:	4630      	mov	r0, r6
 800bc0a:	bd70      	pop	{r4, r5, r6, pc}
 800bc0c:	220c      	movs	r2, #12
 800bc0e:	6002      	str	r2, [r0, #0]
 800bc10:	e7f9      	b.n	800bc06 <_calloc_r+0x12>
 800bc12:	462a      	mov	r2, r5
 800bc14:	4621      	mov	r1, r4
 800bc16:	f000 fa52 	bl	800c0be <memset>
 800bc1a:	e7f5      	b.n	800bc08 <_calloc_r+0x14>

0800bc1c <__itoa>:
 800bc1c:	1e93      	subs	r3, r2, #2
 800bc1e:	2b22      	cmp	r3, #34	@ 0x22
 800bc20:	b510      	push	{r4, lr}
 800bc22:	460c      	mov	r4, r1
 800bc24:	d904      	bls.n	800bc30 <__itoa+0x14>
 800bc26:	2300      	movs	r3, #0
 800bc28:	461c      	mov	r4, r3
 800bc2a:	700b      	strb	r3, [r1, #0]
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	bd10      	pop	{r4, pc}
 800bc30:	2a0a      	cmp	r2, #10
 800bc32:	d109      	bne.n	800bc48 <__itoa+0x2c>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	da07      	bge.n	800bc48 <__itoa+0x2c>
 800bc38:	232d      	movs	r3, #45	@ 0x2d
 800bc3a:	700b      	strb	r3, [r1, #0]
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	4240      	negs	r0, r0
 800bc40:	4421      	add	r1, r4
 800bc42:	f000 f8bb 	bl	800bdbc <__utoa>
 800bc46:	e7f1      	b.n	800bc2c <__itoa+0x10>
 800bc48:	2100      	movs	r1, #0
 800bc4a:	e7f9      	b.n	800bc40 <__itoa+0x24>

0800bc4c <itoa>:
 800bc4c:	f7ff bfe6 	b.w	800bc1c <__itoa>

0800bc50 <free>:
 800bc50:	4b02      	ldr	r3, [pc, #8]	@ (800bc5c <free+0xc>)
 800bc52:	4601      	mov	r1, r0
 800bc54:	6818      	ldr	r0, [r3, #0]
 800bc56:	f000 baf1 	b.w	800c23c <_free_r>
 800bc5a:	bf00      	nop
 800bc5c:	20000190 	.word	0x20000190

0800bc60 <sbrk_aligned>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	4e0f      	ldr	r6, [pc, #60]	@ (800bca0 <sbrk_aligned+0x40>)
 800bc64:	460c      	mov	r4, r1
 800bc66:	6831      	ldr	r1, [r6, #0]
 800bc68:	4605      	mov	r5, r0
 800bc6a:	b911      	cbnz	r1, 800bc72 <sbrk_aligned+0x12>
 800bc6c:	f000 fa88 	bl	800c180 <_sbrk_r>
 800bc70:	6030      	str	r0, [r6, #0]
 800bc72:	4621      	mov	r1, r4
 800bc74:	4628      	mov	r0, r5
 800bc76:	f000 fa83 	bl	800c180 <_sbrk_r>
 800bc7a:	1c43      	adds	r3, r0, #1
 800bc7c:	d103      	bne.n	800bc86 <sbrk_aligned+0x26>
 800bc7e:	f04f 34ff 	mov.w	r4, #4294967295
 800bc82:	4620      	mov	r0, r4
 800bc84:	bd70      	pop	{r4, r5, r6, pc}
 800bc86:	1cc4      	adds	r4, r0, #3
 800bc88:	f024 0403 	bic.w	r4, r4, #3
 800bc8c:	42a0      	cmp	r0, r4
 800bc8e:	d0f8      	beq.n	800bc82 <sbrk_aligned+0x22>
 800bc90:	1a21      	subs	r1, r4, r0
 800bc92:	4628      	mov	r0, r5
 800bc94:	f000 fa74 	bl	800c180 <_sbrk_r>
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d1f2      	bne.n	800bc82 <sbrk_aligned+0x22>
 800bc9c:	e7ef      	b.n	800bc7e <sbrk_aligned+0x1e>
 800bc9e:	bf00      	nop
 800bca0:	200014bc 	.word	0x200014bc

0800bca4 <_malloc_r>:
 800bca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca8:	1ccd      	adds	r5, r1, #3
 800bcaa:	f025 0503 	bic.w	r5, r5, #3
 800bcae:	3508      	adds	r5, #8
 800bcb0:	2d0c      	cmp	r5, #12
 800bcb2:	bf38      	it	cc
 800bcb4:	250c      	movcc	r5, #12
 800bcb6:	2d00      	cmp	r5, #0
 800bcb8:	4606      	mov	r6, r0
 800bcba:	db01      	blt.n	800bcc0 <_malloc_r+0x1c>
 800bcbc:	42a9      	cmp	r1, r5
 800bcbe:	d904      	bls.n	800bcca <_malloc_r+0x26>
 800bcc0:	230c      	movs	r3, #12
 800bcc2:	6033      	str	r3, [r6, #0]
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bda0 <_malloc_r+0xfc>
 800bcce:	f000 f869 	bl	800bda4 <__malloc_lock>
 800bcd2:	f8d8 3000 	ldr.w	r3, [r8]
 800bcd6:	461c      	mov	r4, r3
 800bcd8:	bb44      	cbnz	r4, 800bd2c <_malloc_r+0x88>
 800bcda:	4629      	mov	r1, r5
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f7ff ffbf 	bl	800bc60 <sbrk_aligned>
 800bce2:	1c43      	adds	r3, r0, #1
 800bce4:	4604      	mov	r4, r0
 800bce6:	d158      	bne.n	800bd9a <_malloc_r+0xf6>
 800bce8:	f8d8 4000 	ldr.w	r4, [r8]
 800bcec:	4627      	mov	r7, r4
 800bcee:	2f00      	cmp	r7, #0
 800bcf0:	d143      	bne.n	800bd7a <_malloc_r+0xd6>
 800bcf2:	2c00      	cmp	r4, #0
 800bcf4:	d04b      	beq.n	800bd8e <_malloc_r+0xea>
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	eb04 0903 	add.w	r9, r4, r3
 800bd00:	f000 fa3e 	bl	800c180 <_sbrk_r>
 800bd04:	4581      	cmp	r9, r0
 800bd06:	d142      	bne.n	800bd8e <_malloc_r+0xea>
 800bd08:	6821      	ldr	r1, [r4, #0]
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	1a6d      	subs	r5, r5, r1
 800bd0e:	4629      	mov	r1, r5
 800bd10:	f7ff ffa6 	bl	800bc60 <sbrk_aligned>
 800bd14:	3001      	adds	r0, #1
 800bd16:	d03a      	beq.n	800bd8e <_malloc_r+0xea>
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	442b      	add	r3, r5
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd22:	685a      	ldr	r2, [r3, #4]
 800bd24:	bb62      	cbnz	r2, 800bd80 <_malloc_r+0xdc>
 800bd26:	f8c8 7000 	str.w	r7, [r8]
 800bd2a:	e00f      	b.n	800bd4c <_malloc_r+0xa8>
 800bd2c:	6822      	ldr	r2, [r4, #0]
 800bd2e:	1b52      	subs	r2, r2, r5
 800bd30:	d420      	bmi.n	800bd74 <_malloc_r+0xd0>
 800bd32:	2a0b      	cmp	r2, #11
 800bd34:	d917      	bls.n	800bd66 <_malloc_r+0xc2>
 800bd36:	1961      	adds	r1, r4, r5
 800bd38:	42a3      	cmp	r3, r4
 800bd3a:	6025      	str	r5, [r4, #0]
 800bd3c:	bf18      	it	ne
 800bd3e:	6059      	strne	r1, [r3, #4]
 800bd40:	6863      	ldr	r3, [r4, #4]
 800bd42:	bf08      	it	eq
 800bd44:	f8c8 1000 	streq.w	r1, [r8]
 800bd48:	5162      	str	r2, [r4, r5]
 800bd4a:	604b      	str	r3, [r1, #4]
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f000 f82f 	bl	800bdb0 <__malloc_unlock>
 800bd52:	f104 000b 	add.w	r0, r4, #11
 800bd56:	1d23      	adds	r3, r4, #4
 800bd58:	f020 0007 	bic.w	r0, r0, #7
 800bd5c:	1ac2      	subs	r2, r0, r3
 800bd5e:	bf1c      	itt	ne
 800bd60:	1a1b      	subne	r3, r3, r0
 800bd62:	50a3      	strne	r3, [r4, r2]
 800bd64:	e7af      	b.n	800bcc6 <_malloc_r+0x22>
 800bd66:	6862      	ldr	r2, [r4, #4]
 800bd68:	42a3      	cmp	r3, r4
 800bd6a:	bf0c      	ite	eq
 800bd6c:	f8c8 2000 	streq.w	r2, [r8]
 800bd70:	605a      	strne	r2, [r3, #4]
 800bd72:	e7eb      	b.n	800bd4c <_malloc_r+0xa8>
 800bd74:	4623      	mov	r3, r4
 800bd76:	6864      	ldr	r4, [r4, #4]
 800bd78:	e7ae      	b.n	800bcd8 <_malloc_r+0x34>
 800bd7a:	463c      	mov	r4, r7
 800bd7c:	687f      	ldr	r7, [r7, #4]
 800bd7e:	e7b6      	b.n	800bcee <_malloc_r+0x4a>
 800bd80:	461a      	mov	r2, r3
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	42a3      	cmp	r3, r4
 800bd86:	d1fb      	bne.n	800bd80 <_malloc_r+0xdc>
 800bd88:	2300      	movs	r3, #0
 800bd8a:	6053      	str	r3, [r2, #4]
 800bd8c:	e7de      	b.n	800bd4c <_malloc_r+0xa8>
 800bd8e:	230c      	movs	r3, #12
 800bd90:	4630      	mov	r0, r6
 800bd92:	6033      	str	r3, [r6, #0]
 800bd94:	f000 f80c 	bl	800bdb0 <__malloc_unlock>
 800bd98:	e794      	b.n	800bcc4 <_malloc_r+0x20>
 800bd9a:	6005      	str	r5, [r0, #0]
 800bd9c:	e7d6      	b.n	800bd4c <_malloc_r+0xa8>
 800bd9e:	bf00      	nop
 800bda0:	200014c0 	.word	0x200014c0

0800bda4 <__malloc_lock>:
 800bda4:	4801      	ldr	r0, [pc, #4]	@ (800bdac <__malloc_lock+0x8>)
 800bda6:	f000 ba38 	b.w	800c21a <__retarget_lock_acquire_recursive>
 800bdaa:	bf00      	nop
 800bdac:	20001604 	.word	0x20001604

0800bdb0 <__malloc_unlock>:
 800bdb0:	4801      	ldr	r0, [pc, #4]	@ (800bdb8 <__malloc_unlock+0x8>)
 800bdb2:	f000 ba33 	b.w	800c21c <__retarget_lock_release_recursive>
 800bdb6:	bf00      	nop
 800bdb8:	20001604 	.word	0x20001604

0800bdbc <__utoa>:
 800bdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdbe:	b08b      	sub	sp, #44	@ 0x2c
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	466e      	mov	r6, sp
 800bdc6:	4c1d      	ldr	r4, [pc, #116]	@ (800be3c <__utoa+0x80>)
 800bdc8:	f104 0c20 	add.w	ip, r4, #32
 800bdcc:	4637      	mov	r7, r6
 800bdce:	6820      	ldr	r0, [r4, #0]
 800bdd0:	6861      	ldr	r1, [r4, #4]
 800bdd2:	3408      	adds	r4, #8
 800bdd4:	c703      	stmia	r7!, {r0, r1}
 800bdd6:	4564      	cmp	r4, ip
 800bdd8:	463e      	mov	r6, r7
 800bdda:	d1f7      	bne.n	800bdcc <__utoa+0x10>
 800bddc:	7921      	ldrb	r1, [r4, #4]
 800bdde:	6820      	ldr	r0, [r4, #0]
 800bde0:	7139      	strb	r1, [r7, #4]
 800bde2:	1e91      	subs	r1, r2, #2
 800bde4:	2922      	cmp	r1, #34	@ 0x22
 800bde6:	6038      	str	r0, [r7, #0]
 800bde8:	f04f 0100 	mov.w	r1, #0
 800bdec:	d904      	bls.n	800bdf8 <__utoa+0x3c>
 800bdee:	7019      	strb	r1, [r3, #0]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	b00b      	add	sp, #44	@ 0x2c
 800bdf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdf8:	1e58      	subs	r0, r3, #1
 800bdfa:	4684      	mov	ip, r0
 800bdfc:	fbb5 f7f2 	udiv	r7, r5, r2
 800be00:	fb02 5617 	mls	r6, r2, r7, r5
 800be04:	3628      	adds	r6, #40	@ 0x28
 800be06:	446e      	add	r6, sp
 800be08:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800be0c:	460c      	mov	r4, r1
 800be0e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800be12:	462e      	mov	r6, r5
 800be14:	42b2      	cmp	r2, r6
 800be16:	463d      	mov	r5, r7
 800be18:	f101 0101 	add.w	r1, r1, #1
 800be1c:	d9ee      	bls.n	800bdfc <__utoa+0x40>
 800be1e:	2200      	movs	r2, #0
 800be20:	545a      	strb	r2, [r3, r1]
 800be22:	1919      	adds	r1, r3, r4
 800be24:	1aa5      	subs	r5, r4, r2
 800be26:	42aa      	cmp	r2, r5
 800be28:	dae3      	bge.n	800bdf2 <__utoa+0x36>
 800be2a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800be2e:	780e      	ldrb	r6, [r1, #0]
 800be30:	3201      	adds	r2, #1
 800be32:	7006      	strb	r6, [r0, #0]
 800be34:	f801 5901 	strb.w	r5, [r1], #-1
 800be38:	e7f4      	b.n	800be24 <__utoa+0x68>
 800be3a:	bf00      	nop
 800be3c:	0800d0d6 	.word	0x0800d0d6

0800be40 <std>:
 800be40:	2300      	movs	r3, #0
 800be42:	b510      	push	{r4, lr}
 800be44:	4604      	mov	r4, r0
 800be46:	e9c0 3300 	strd	r3, r3, [r0]
 800be4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be4e:	6083      	str	r3, [r0, #8]
 800be50:	8181      	strh	r1, [r0, #12]
 800be52:	6643      	str	r3, [r0, #100]	@ 0x64
 800be54:	81c2      	strh	r2, [r0, #14]
 800be56:	6183      	str	r3, [r0, #24]
 800be58:	4619      	mov	r1, r3
 800be5a:	2208      	movs	r2, #8
 800be5c:	305c      	adds	r0, #92	@ 0x5c
 800be5e:	f000 f92e 	bl	800c0be <memset>
 800be62:	4b0d      	ldr	r3, [pc, #52]	@ (800be98 <std+0x58>)
 800be64:	6224      	str	r4, [r4, #32]
 800be66:	6263      	str	r3, [r4, #36]	@ 0x24
 800be68:	4b0c      	ldr	r3, [pc, #48]	@ (800be9c <std+0x5c>)
 800be6a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be6c:	4b0c      	ldr	r3, [pc, #48]	@ (800bea0 <std+0x60>)
 800be6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be70:	4b0c      	ldr	r3, [pc, #48]	@ (800bea4 <std+0x64>)
 800be72:	6323      	str	r3, [r4, #48]	@ 0x30
 800be74:	4b0c      	ldr	r3, [pc, #48]	@ (800bea8 <std+0x68>)
 800be76:	429c      	cmp	r4, r3
 800be78:	d006      	beq.n	800be88 <std+0x48>
 800be7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be7e:	4294      	cmp	r4, r2
 800be80:	d002      	beq.n	800be88 <std+0x48>
 800be82:	33d0      	adds	r3, #208	@ 0xd0
 800be84:	429c      	cmp	r4, r3
 800be86:	d105      	bne.n	800be94 <std+0x54>
 800be88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be90:	f000 b9c2 	b.w	800c218 <__retarget_lock_init_recursive>
 800be94:	bd10      	pop	{r4, pc}
 800be96:	bf00      	nop
 800be98:	0800c039 	.word	0x0800c039
 800be9c:	0800c05b 	.word	0x0800c05b
 800bea0:	0800c093 	.word	0x0800c093
 800bea4:	0800c0b7 	.word	0x0800c0b7
 800bea8:	200014c4 	.word	0x200014c4

0800beac <stdio_exit_handler>:
 800beac:	4a02      	ldr	r2, [pc, #8]	@ (800beb8 <stdio_exit_handler+0xc>)
 800beae:	4903      	ldr	r1, [pc, #12]	@ (800bebc <stdio_exit_handler+0x10>)
 800beb0:	4803      	ldr	r0, [pc, #12]	@ (800bec0 <stdio_exit_handler+0x14>)
 800beb2:	f000 b869 	b.w	800bf88 <_fwalk_sglue>
 800beb6:	bf00      	nop
 800beb8:	20000184 	.word	0x20000184
 800bebc:	0800cc21 	.word	0x0800cc21
 800bec0:	20000194 	.word	0x20000194

0800bec4 <cleanup_stdio>:
 800bec4:	6841      	ldr	r1, [r0, #4]
 800bec6:	4b0c      	ldr	r3, [pc, #48]	@ (800bef8 <cleanup_stdio+0x34>)
 800bec8:	b510      	push	{r4, lr}
 800beca:	4299      	cmp	r1, r3
 800becc:	4604      	mov	r4, r0
 800bece:	d001      	beq.n	800bed4 <cleanup_stdio+0x10>
 800bed0:	f000 fea6 	bl	800cc20 <_fflush_r>
 800bed4:	68a1      	ldr	r1, [r4, #8]
 800bed6:	4b09      	ldr	r3, [pc, #36]	@ (800befc <cleanup_stdio+0x38>)
 800bed8:	4299      	cmp	r1, r3
 800beda:	d002      	beq.n	800bee2 <cleanup_stdio+0x1e>
 800bedc:	4620      	mov	r0, r4
 800bede:	f000 fe9f 	bl	800cc20 <_fflush_r>
 800bee2:	68e1      	ldr	r1, [r4, #12]
 800bee4:	4b06      	ldr	r3, [pc, #24]	@ (800bf00 <cleanup_stdio+0x3c>)
 800bee6:	4299      	cmp	r1, r3
 800bee8:	d004      	beq.n	800bef4 <cleanup_stdio+0x30>
 800beea:	4620      	mov	r0, r4
 800beec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bef0:	f000 be96 	b.w	800cc20 <_fflush_r>
 800bef4:	bd10      	pop	{r4, pc}
 800bef6:	bf00      	nop
 800bef8:	200014c4 	.word	0x200014c4
 800befc:	2000152c 	.word	0x2000152c
 800bf00:	20001594 	.word	0x20001594

0800bf04 <global_stdio_init.part.0>:
 800bf04:	b510      	push	{r4, lr}
 800bf06:	4b0b      	ldr	r3, [pc, #44]	@ (800bf34 <global_stdio_init.part.0+0x30>)
 800bf08:	4c0b      	ldr	r4, [pc, #44]	@ (800bf38 <global_stdio_init.part.0+0x34>)
 800bf0a:	4a0c      	ldr	r2, [pc, #48]	@ (800bf3c <global_stdio_init.part.0+0x38>)
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	2104      	movs	r1, #4
 800bf12:	2200      	movs	r2, #0
 800bf14:	f7ff ff94 	bl	800be40 <std>
 800bf18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	2109      	movs	r1, #9
 800bf20:	f7ff ff8e 	bl	800be40 <std>
 800bf24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bf28:	2202      	movs	r2, #2
 800bf2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf2e:	2112      	movs	r1, #18
 800bf30:	f7ff bf86 	b.w	800be40 <std>
 800bf34:	200015fc 	.word	0x200015fc
 800bf38:	200014c4 	.word	0x200014c4
 800bf3c:	0800bead 	.word	0x0800bead

0800bf40 <__sfp_lock_acquire>:
 800bf40:	4801      	ldr	r0, [pc, #4]	@ (800bf48 <__sfp_lock_acquire+0x8>)
 800bf42:	f000 b96a 	b.w	800c21a <__retarget_lock_acquire_recursive>
 800bf46:	bf00      	nop
 800bf48:	20001605 	.word	0x20001605

0800bf4c <__sfp_lock_release>:
 800bf4c:	4801      	ldr	r0, [pc, #4]	@ (800bf54 <__sfp_lock_release+0x8>)
 800bf4e:	f000 b965 	b.w	800c21c <__retarget_lock_release_recursive>
 800bf52:	bf00      	nop
 800bf54:	20001605 	.word	0x20001605

0800bf58 <__sinit>:
 800bf58:	b510      	push	{r4, lr}
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	f7ff fff0 	bl	800bf40 <__sfp_lock_acquire>
 800bf60:	6a23      	ldr	r3, [r4, #32]
 800bf62:	b11b      	cbz	r3, 800bf6c <__sinit+0x14>
 800bf64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf68:	f7ff bff0 	b.w	800bf4c <__sfp_lock_release>
 800bf6c:	4b04      	ldr	r3, [pc, #16]	@ (800bf80 <__sinit+0x28>)
 800bf6e:	6223      	str	r3, [r4, #32]
 800bf70:	4b04      	ldr	r3, [pc, #16]	@ (800bf84 <__sinit+0x2c>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1f5      	bne.n	800bf64 <__sinit+0xc>
 800bf78:	f7ff ffc4 	bl	800bf04 <global_stdio_init.part.0>
 800bf7c:	e7f2      	b.n	800bf64 <__sinit+0xc>
 800bf7e:	bf00      	nop
 800bf80:	0800bec5 	.word	0x0800bec5
 800bf84:	200015fc 	.word	0x200015fc

0800bf88 <_fwalk_sglue>:
 800bf88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf8c:	4607      	mov	r7, r0
 800bf8e:	4688      	mov	r8, r1
 800bf90:	4614      	mov	r4, r2
 800bf92:	2600      	movs	r6, #0
 800bf94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf98:	f1b9 0901 	subs.w	r9, r9, #1
 800bf9c:	d505      	bpl.n	800bfaa <_fwalk_sglue+0x22>
 800bf9e:	6824      	ldr	r4, [r4, #0]
 800bfa0:	2c00      	cmp	r4, #0
 800bfa2:	d1f7      	bne.n	800bf94 <_fwalk_sglue+0xc>
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfaa:	89ab      	ldrh	r3, [r5, #12]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d907      	bls.n	800bfc0 <_fwalk_sglue+0x38>
 800bfb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	d003      	beq.n	800bfc0 <_fwalk_sglue+0x38>
 800bfb8:	4629      	mov	r1, r5
 800bfba:	4638      	mov	r0, r7
 800bfbc:	47c0      	blx	r8
 800bfbe:	4306      	orrs	r6, r0
 800bfc0:	3568      	adds	r5, #104	@ 0x68
 800bfc2:	e7e9      	b.n	800bf98 <_fwalk_sglue+0x10>

0800bfc4 <iprintf>:
 800bfc4:	b40f      	push	{r0, r1, r2, r3}
 800bfc6:	b507      	push	{r0, r1, r2, lr}
 800bfc8:	4906      	ldr	r1, [pc, #24]	@ (800bfe4 <iprintf+0x20>)
 800bfca:	ab04      	add	r3, sp, #16
 800bfcc:	6808      	ldr	r0, [r1, #0]
 800bfce:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfd2:	6881      	ldr	r1, [r0, #8]
 800bfd4:	9301      	str	r3, [sp, #4]
 800bfd6:	f000 faf9 	bl	800c5cc <_vfiprintf_r>
 800bfda:	b003      	add	sp, #12
 800bfdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfe0:	b004      	add	sp, #16
 800bfe2:	4770      	bx	lr
 800bfe4:	20000190 	.word	0x20000190

0800bfe8 <putchar>:
 800bfe8:	4b02      	ldr	r3, [pc, #8]	@ (800bff4 <putchar+0xc>)
 800bfea:	4601      	mov	r1, r0
 800bfec:	6818      	ldr	r0, [r3, #0]
 800bfee:	6882      	ldr	r2, [r0, #8]
 800bff0:	f000 be3e 	b.w	800cc70 <_putc_r>
 800bff4:	20000190 	.word	0x20000190

0800bff8 <siprintf>:
 800bff8:	b40e      	push	{r1, r2, r3}
 800bffa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bffe:	b500      	push	{lr}
 800c000:	b09c      	sub	sp, #112	@ 0x70
 800c002:	ab1d      	add	r3, sp, #116	@ 0x74
 800c004:	9002      	str	r0, [sp, #8]
 800c006:	9006      	str	r0, [sp, #24]
 800c008:	9107      	str	r1, [sp, #28]
 800c00a:	9104      	str	r1, [sp, #16]
 800c00c:	4808      	ldr	r0, [pc, #32]	@ (800c030 <siprintf+0x38>)
 800c00e:	4909      	ldr	r1, [pc, #36]	@ (800c034 <siprintf+0x3c>)
 800c010:	f853 2b04 	ldr.w	r2, [r3], #4
 800c014:	9105      	str	r1, [sp, #20]
 800c016:	6800      	ldr	r0, [r0, #0]
 800c018:	a902      	add	r1, sp, #8
 800c01a:	9301      	str	r3, [sp, #4]
 800c01c:	f000 f9b2 	bl	800c384 <_svfiprintf_r>
 800c020:	2200      	movs	r2, #0
 800c022:	9b02      	ldr	r3, [sp, #8]
 800c024:	701a      	strb	r2, [r3, #0]
 800c026:	b01c      	add	sp, #112	@ 0x70
 800c028:	f85d eb04 	ldr.w	lr, [sp], #4
 800c02c:	b003      	add	sp, #12
 800c02e:	4770      	bx	lr
 800c030:	20000190 	.word	0x20000190
 800c034:	ffff0208 	.word	0xffff0208

0800c038 <__sread>:
 800c038:	b510      	push	{r4, lr}
 800c03a:	460c      	mov	r4, r1
 800c03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c040:	f000 f88c 	bl	800c15c <_read_r>
 800c044:	2800      	cmp	r0, #0
 800c046:	bfab      	itete	ge
 800c048:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c04a:	89a3      	ldrhlt	r3, [r4, #12]
 800c04c:	181b      	addge	r3, r3, r0
 800c04e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c052:	bfac      	ite	ge
 800c054:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c056:	81a3      	strhlt	r3, [r4, #12]
 800c058:	bd10      	pop	{r4, pc}

0800c05a <__swrite>:
 800c05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05e:	461f      	mov	r7, r3
 800c060:	898b      	ldrh	r3, [r1, #12]
 800c062:	4605      	mov	r5, r0
 800c064:	05db      	lsls	r3, r3, #23
 800c066:	460c      	mov	r4, r1
 800c068:	4616      	mov	r6, r2
 800c06a:	d505      	bpl.n	800c078 <__swrite+0x1e>
 800c06c:	2302      	movs	r3, #2
 800c06e:	2200      	movs	r2, #0
 800c070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c074:	f000 f860 	bl	800c138 <_lseek_r>
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	4632      	mov	r2, r6
 800c07c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	4628      	mov	r0, r5
 800c084:	463b      	mov	r3, r7
 800c086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c08a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c08e:	f000 b887 	b.w	800c1a0 <_write_r>

0800c092 <__sseek>:
 800c092:	b510      	push	{r4, lr}
 800c094:	460c      	mov	r4, r1
 800c096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09a:	f000 f84d 	bl	800c138 <_lseek_r>
 800c09e:	1c43      	adds	r3, r0, #1
 800c0a0:	89a3      	ldrh	r3, [r4, #12]
 800c0a2:	bf15      	itete	ne
 800c0a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c0a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c0aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0ae:	81a3      	strheq	r3, [r4, #12]
 800c0b0:	bf18      	it	ne
 800c0b2:	81a3      	strhne	r3, [r4, #12]
 800c0b4:	bd10      	pop	{r4, pc}

0800c0b6 <__sclose>:
 800c0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ba:	f000 b82d 	b.w	800c118 <_close_r>

0800c0be <memset>:
 800c0be:	4603      	mov	r3, r0
 800c0c0:	4402      	add	r2, r0
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d100      	bne.n	800c0c8 <memset+0xa>
 800c0c6:	4770      	bx	lr
 800c0c8:	f803 1b01 	strb.w	r1, [r3], #1
 800c0cc:	e7f9      	b.n	800c0c2 <memset+0x4>

0800c0ce <strlcat>:
 800c0ce:	b570      	push	{r4, r5, r6, lr}
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	4608      	mov	r0, r1
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	1916      	adds	r6, r2, r4
 800c0d8:	42b1      	cmp	r1, r6
 800c0da:	460b      	mov	r3, r1
 800c0dc:	d107      	bne.n	800c0ee <strlcat+0x20>
 800c0de:	1b1c      	subs	r4, r3, r4
 800c0e0:	1b12      	subs	r2, r2, r4
 800c0e2:	1e56      	subs	r6, r2, #1
 800c0e4:	b942      	cbnz	r2, 800c0f8 <strlcat+0x2a>
 800c0e6:	f7f4 f831 	bl	800014c <strlen>
 800c0ea:	4420      	add	r0, r4
 800c0ec:	bd70      	pop	{r4, r5, r6, pc}
 800c0ee:	781d      	ldrb	r5, [r3, #0]
 800c0f0:	3101      	adds	r1, #1
 800c0f2:	2d00      	cmp	r5, #0
 800c0f4:	d1f0      	bne.n	800c0d8 <strlcat+0xa>
 800c0f6:	e7f2      	b.n	800c0de <strlcat+0x10>
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	462a      	mov	r2, r5
 800c0fc:	f815 1b01 	ldrb.w	r1, [r5], #1
 800c100:	b919      	cbnz	r1, 800c10a <strlcat+0x3c>
 800c102:	1a12      	subs	r2, r2, r0
 800c104:	7019      	strb	r1, [r3, #0]
 800c106:	1910      	adds	r0, r2, r4
 800c108:	e7f0      	b.n	800c0ec <strlcat+0x1e>
 800c10a:	2e00      	cmp	r6, #0
 800c10c:	d0f5      	beq.n	800c0fa <strlcat+0x2c>
 800c10e:	f803 1b01 	strb.w	r1, [r3], #1
 800c112:	3e01      	subs	r6, #1
 800c114:	e7f1      	b.n	800c0fa <strlcat+0x2c>
	...

0800c118 <_close_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	2300      	movs	r3, #0
 800c11c:	4d05      	ldr	r5, [pc, #20]	@ (800c134 <_close_r+0x1c>)
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	602b      	str	r3, [r5, #0]
 800c124:	f7f7 f9f3 	bl	800350e <_close>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_close_r+0x1a>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_close_r+0x1a>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	20001600 	.word	0x20001600

0800c138 <_lseek_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4604      	mov	r4, r0
 800c13c:	4608      	mov	r0, r1
 800c13e:	4611      	mov	r1, r2
 800c140:	2200      	movs	r2, #0
 800c142:	4d05      	ldr	r5, [pc, #20]	@ (800c158 <_lseek_r+0x20>)
 800c144:	602a      	str	r2, [r5, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	f7f7 fa05 	bl	8003556 <_lseek>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_lseek_r+0x1e>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_lseek_r+0x1e>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	20001600 	.word	0x20001600

0800c15c <_read_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4604      	mov	r4, r0
 800c160:	4608      	mov	r0, r1
 800c162:	4611      	mov	r1, r2
 800c164:	2200      	movs	r2, #0
 800c166:	4d05      	ldr	r5, [pc, #20]	@ (800c17c <_read_r+0x20>)
 800c168:	602a      	str	r2, [r5, #0]
 800c16a:	461a      	mov	r2, r3
 800c16c:	f7f7 f996 	bl	800349c <_read>
 800c170:	1c43      	adds	r3, r0, #1
 800c172:	d102      	bne.n	800c17a <_read_r+0x1e>
 800c174:	682b      	ldr	r3, [r5, #0]
 800c176:	b103      	cbz	r3, 800c17a <_read_r+0x1e>
 800c178:	6023      	str	r3, [r4, #0]
 800c17a:	bd38      	pop	{r3, r4, r5, pc}
 800c17c:	20001600 	.word	0x20001600

0800c180 <_sbrk_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	2300      	movs	r3, #0
 800c184:	4d05      	ldr	r5, [pc, #20]	@ (800c19c <_sbrk_r+0x1c>)
 800c186:	4604      	mov	r4, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	602b      	str	r3, [r5, #0]
 800c18c:	f7f7 f9f0 	bl	8003570 <_sbrk>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d102      	bne.n	800c19a <_sbrk_r+0x1a>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	b103      	cbz	r3, 800c19a <_sbrk_r+0x1a>
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	bd38      	pop	{r3, r4, r5, pc}
 800c19c:	20001600 	.word	0x20001600

0800c1a0 <_write_r>:
 800c1a0:	b538      	push	{r3, r4, r5, lr}
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	4611      	mov	r1, r2
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	4d05      	ldr	r5, [pc, #20]	@ (800c1c0 <_write_r+0x20>)
 800c1ac:	602a      	str	r2, [r5, #0]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f7f7 f991 	bl	80034d6 <_write>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d102      	bne.n	800c1be <_write_r+0x1e>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	b103      	cbz	r3, 800c1be <_write_r+0x1e>
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	20001600 	.word	0x20001600

0800c1c4 <__errno>:
 800c1c4:	4b01      	ldr	r3, [pc, #4]	@ (800c1cc <__errno+0x8>)
 800c1c6:	6818      	ldr	r0, [r3, #0]
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	20000190 	.word	0x20000190

0800c1d0 <__libc_init_array>:
 800c1d0:	b570      	push	{r4, r5, r6, lr}
 800c1d2:	2600      	movs	r6, #0
 800c1d4:	4d0c      	ldr	r5, [pc, #48]	@ (800c208 <__libc_init_array+0x38>)
 800c1d6:	4c0d      	ldr	r4, [pc, #52]	@ (800c20c <__libc_init_array+0x3c>)
 800c1d8:	1b64      	subs	r4, r4, r5
 800c1da:	10a4      	asrs	r4, r4, #2
 800c1dc:	42a6      	cmp	r6, r4
 800c1de:	d109      	bne.n	800c1f4 <__libc_init_array+0x24>
 800c1e0:	f000 fef0 	bl	800cfc4 <_init>
 800c1e4:	2600      	movs	r6, #0
 800c1e6:	4d0a      	ldr	r5, [pc, #40]	@ (800c210 <__libc_init_array+0x40>)
 800c1e8:	4c0a      	ldr	r4, [pc, #40]	@ (800c214 <__libc_init_array+0x44>)
 800c1ea:	1b64      	subs	r4, r4, r5
 800c1ec:	10a4      	asrs	r4, r4, #2
 800c1ee:	42a6      	cmp	r6, r4
 800c1f0:	d105      	bne.n	800c1fe <__libc_init_array+0x2e>
 800c1f2:	bd70      	pop	{r4, r5, r6, pc}
 800c1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1f8:	4798      	blx	r3
 800c1fa:	3601      	adds	r6, #1
 800c1fc:	e7ee      	b.n	800c1dc <__libc_init_array+0xc>
 800c1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800c202:	4798      	blx	r3
 800c204:	3601      	adds	r6, #1
 800c206:	e7f2      	b.n	800c1ee <__libc_init_array+0x1e>
 800c208:	0800d138 	.word	0x0800d138
 800c20c:	0800d138 	.word	0x0800d138
 800c210:	0800d138 	.word	0x0800d138
 800c214:	0800d13c 	.word	0x0800d13c

0800c218 <__retarget_lock_init_recursive>:
 800c218:	4770      	bx	lr

0800c21a <__retarget_lock_acquire_recursive>:
 800c21a:	4770      	bx	lr

0800c21c <__retarget_lock_release_recursive>:
 800c21c:	4770      	bx	lr

0800c21e <memcpy>:
 800c21e:	440a      	add	r2, r1
 800c220:	4291      	cmp	r1, r2
 800c222:	f100 33ff 	add.w	r3, r0, #4294967295
 800c226:	d100      	bne.n	800c22a <memcpy+0xc>
 800c228:	4770      	bx	lr
 800c22a:	b510      	push	{r4, lr}
 800c22c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c230:	4291      	cmp	r1, r2
 800c232:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c236:	d1f9      	bne.n	800c22c <memcpy+0xe>
 800c238:	bd10      	pop	{r4, pc}
	...

0800c23c <_free_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4605      	mov	r5, r0
 800c240:	2900      	cmp	r1, #0
 800c242:	d040      	beq.n	800c2c6 <_free_r+0x8a>
 800c244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c248:	1f0c      	subs	r4, r1, #4
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	bfb8      	it	lt
 800c24e:	18e4      	addlt	r4, r4, r3
 800c250:	f7ff fda8 	bl	800bda4 <__malloc_lock>
 800c254:	4a1c      	ldr	r2, [pc, #112]	@ (800c2c8 <_free_r+0x8c>)
 800c256:	6813      	ldr	r3, [r2, #0]
 800c258:	b933      	cbnz	r3, 800c268 <_free_r+0x2c>
 800c25a:	6063      	str	r3, [r4, #4]
 800c25c:	6014      	str	r4, [r2, #0]
 800c25e:	4628      	mov	r0, r5
 800c260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c264:	f7ff bda4 	b.w	800bdb0 <__malloc_unlock>
 800c268:	42a3      	cmp	r3, r4
 800c26a:	d908      	bls.n	800c27e <_free_r+0x42>
 800c26c:	6820      	ldr	r0, [r4, #0]
 800c26e:	1821      	adds	r1, r4, r0
 800c270:	428b      	cmp	r3, r1
 800c272:	bf01      	itttt	eq
 800c274:	6819      	ldreq	r1, [r3, #0]
 800c276:	685b      	ldreq	r3, [r3, #4]
 800c278:	1809      	addeq	r1, r1, r0
 800c27a:	6021      	streq	r1, [r4, #0]
 800c27c:	e7ed      	b.n	800c25a <_free_r+0x1e>
 800c27e:	461a      	mov	r2, r3
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	b10b      	cbz	r3, 800c288 <_free_r+0x4c>
 800c284:	42a3      	cmp	r3, r4
 800c286:	d9fa      	bls.n	800c27e <_free_r+0x42>
 800c288:	6811      	ldr	r1, [r2, #0]
 800c28a:	1850      	adds	r0, r2, r1
 800c28c:	42a0      	cmp	r0, r4
 800c28e:	d10b      	bne.n	800c2a8 <_free_r+0x6c>
 800c290:	6820      	ldr	r0, [r4, #0]
 800c292:	4401      	add	r1, r0
 800c294:	1850      	adds	r0, r2, r1
 800c296:	4283      	cmp	r3, r0
 800c298:	6011      	str	r1, [r2, #0]
 800c29a:	d1e0      	bne.n	800c25e <_free_r+0x22>
 800c29c:	6818      	ldr	r0, [r3, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	4408      	add	r0, r1
 800c2a2:	6010      	str	r0, [r2, #0]
 800c2a4:	6053      	str	r3, [r2, #4]
 800c2a6:	e7da      	b.n	800c25e <_free_r+0x22>
 800c2a8:	d902      	bls.n	800c2b0 <_free_r+0x74>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	602b      	str	r3, [r5, #0]
 800c2ae:	e7d6      	b.n	800c25e <_free_r+0x22>
 800c2b0:	6820      	ldr	r0, [r4, #0]
 800c2b2:	1821      	adds	r1, r4, r0
 800c2b4:	428b      	cmp	r3, r1
 800c2b6:	bf01      	itttt	eq
 800c2b8:	6819      	ldreq	r1, [r3, #0]
 800c2ba:	685b      	ldreq	r3, [r3, #4]
 800c2bc:	1809      	addeq	r1, r1, r0
 800c2be:	6021      	streq	r1, [r4, #0]
 800c2c0:	6063      	str	r3, [r4, #4]
 800c2c2:	6054      	str	r4, [r2, #4]
 800c2c4:	e7cb      	b.n	800c25e <_free_r+0x22>
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	200014c0 	.word	0x200014c0

0800c2cc <__ssputs_r>:
 800c2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d0:	461f      	mov	r7, r3
 800c2d2:	688e      	ldr	r6, [r1, #8]
 800c2d4:	4682      	mov	sl, r0
 800c2d6:	42be      	cmp	r6, r7
 800c2d8:	460c      	mov	r4, r1
 800c2da:	4690      	mov	r8, r2
 800c2dc:	680b      	ldr	r3, [r1, #0]
 800c2de:	d82d      	bhi.n	800c33c <__ssputs_r+0x70>
 800c2e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2e8:	d026      	beq.n	800c338 <__ssputs_r+0x6c>
 800c2ea:	6965      	ldr	r5, [r4, #20]
 800c2ec:	6909      	ldr	r1, [r1, #16]
 800c2ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2f2:	eba3 0901 	sub.w	r9, r3, r1
 800c2f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2fa:	1c7b      	adds	r3, r7, #1
 800c2fc:	444b      	add	r3, r9
 800c2fe:	106d      	asrs	r5, r5, #1
 800c300:	429d      	cmp	r5, r3
 800c302:	bf38      	it	cc
 800c304:	461d      	movcc	r5, r3
 800c306:	0553      	lsls	r3, r2, #21
 800c308:	d527      	bpl.n	800c35a <__ssputs_r+0x8e>
 800c30a:	4629      	mov	r1, r5
 800c30c:	f7ff fcca 	bl	800bca4 <_malloc_r>
 800c310:	4606      	mov	r6, r0
 800c312:	b360      	cbz	r0, 800c36e <__ssputs_r+0xa2>
 800c314:	464a      	mov	r2, r9
 800c316:	6921      	ldr	r1, [r4, #16]
 800c318:	f7ff ff81 	bl	800c21e <memcpy>
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c326:	81a3      	strh	r3, [r4, #12]
 800c328:	6126      	str	r6, [r4, #16]
 800c32a:	444e      	add	r6, r9
 800c32c:	6026      	str	r6, [r4, #0]
 800c32e:	463e      	mov	r6, r7
 800c330:	6165      	str	r5, [r4, #20]
 800c332:	eba5 0509 	sub.w	r5, r5, r9
 800c336:	60a5      	str	r5, [r4, #8]
 800c338:	42be      	cmp	r6, r7
 800c33a:	d900      	bls.n	800c33e <__ssputs_r+0x72>
 800c33c:	463e      	mov	r6, r7
 800c33e:	4632      	mov	r2, r6
 800c340:	4641      	mov	r1, r8
 800c342:	6820      	ldr	r0, [r4, #0]
 800c344:	f000 fd5c 	bl	800ce00 <memmove>
 800c348:	2000      	movs	r0, #0
 800c34a:	68a3      	ldr	r3, [r4, #8]
 800c34c:	1b9b      	subs	r3, r3, r6
 800c34e:	60a3      	str	r3, [r4, #8]
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	4433      	add	r3, r6
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35a:	462a      	mov	r2, r5
 800c35c:	f000 fd78 	bl	800ce50 <_realloc_r>
 800c360:	4606      	mov	r6, r0
 800c362:	2800      	cmp	r0, #0
 800c364:	d1e0      	bne.n	800c328 <__ssputs_r+0x5c>
 800c366:	4650      	mov	r0, sl
 800c368:	6921      	ldr	r1, [r4, #16]
 800c36a:	f7ff ff67 	bl	800c23c <_free_r>
 800c36e:	230c      	movs	r3, #12
 800c370:	f8ca 3000 	str.w	r3, [sl]
 800c374:	89a3      	ldrh	r3, [r4, #12]
 800c376:	f04f 30ff 	mov.w	r0, #4294967295
 800c37a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c37e:	81a3      	strh	r3, [r4, #12]
 800c380:	e7e9      	b.n	800c356 <__ssputs_r+0x8a>
	...

0800c384 <_svfiprintf_r>:
 800c384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c388:	4698      	mov	r8, r3
 800c38a:	898b      	ldrh	r3, [r1, #12]
 800c38c:	4607      	mov	r7, r0
 800c38e:	061b      	lsls	r3, r3, #24
 800c390:	460d      	mov	r5, r1
 800c392:	4614      	mov	r4, r2
 800c394:	b09d      	sub	sp, #116	@ 0x74
 800c396:	d510      	bpl.n	800c3ba <_svfiprintf_r+0x36>
 800c398:	690b      	ldr	r3, [r1, #16]
 800c39a:	b973      	cbnz	r3, 800c3ba <_svfiprintf_r+0x36>
 800c39c:	2140      	movs	r1, #64	@ 0x40
 800c39e:	f7ff fc81 	bl	800bca4 <_malloc_r>
 800c3a2:	6028      	str	r0, [r5, #0]
 800c3a4:	6128      	str	r0, [r5, #16]
 800c3a6:	b930      	cbnz	r0, 800c3b6 <_svfiprintf_r+0x32>
 800c3a8:	230c      	movs	r3, #12
 800c3aa:	603b      	str	r3, [r7, #0]
 800c3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b0:	b01d      	add	sp, #116	@ 0x74
 800c3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b6:	2340      	movs	r3, #64	@ 0x40
 800c3b8:	616b      	str	r3, [r5, #20]
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3be:	2320      	movs	r3, #32
 800c3c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3c4:	2330      	movs	r3, #48	@ 0x30
 800c3c6:	f04f 0901 	mov.w	r9, #1
 800c3ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c568 <_svfiprintf_r+0x1e4>
 800c3d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3d6:	4623      	mov	r3, r4
 800c3d8:	469a      	mov	sl, r3
 800c3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3de:	b10a      	cbz	r2, 800c3e4 <_svfiprintf_r+0x60>
 800c3e0:	2a25      	cmp	r2, #37	@ 0x25
 800c3e2:	d1f9      	bne.n	800c3d8 <_svfiprintf_r+0x54>
 800c3e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c3e8:	d00b      	beq.n	800c402 <_svfiprintf_r+0x7e>
 800c3ea:	465b      	mov	r3, fp
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4638      	mov	r0, r7
 800c3f2:	f7ff ff6b 	bl	800c2cc <__ssputs_r>
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	f000 80a7 	beq.w	800c54a <_svfiprintf_r+0x1c6>
 800c3fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3fe:	445a      	add	r2, fp
 800c400:	9209      	str	r2, [sp, #36]	@ 0x24
 800c402:	f89a 3000 	ldrb.w	r3, [sl]
 800c406:	2b00      	cmp	r3, #0
 800c408:	f000 809f 	beq.w	800c54a <_svfiprintf_r+0x1c6>
 800c40c:	2300      	movs	r3, #0
 800c40e:	f04f 32ff 	mov.w	r2, #4294967295
 800c412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c416:	f10a 0a01 	add.w	sl, sl, #1
 800c41a:	9304      	str	r3, [sp, #16]
 800c41c:	9307      	str	r3, [sp, #28]
 800c41e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c422:	931a      	str	r3, [sp, #104]	@ 0x68
 800c424:	4654      	mov	r4, sl
 800c426:	2205      	movs	r2, #5
 800c428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c42c:	484e      	ldr	r0, [pc, #312]	@ (800c568 <_svfiprintf_r+0x1e4>)
 800c42e:	f000 fd01 	bl	800ce34 <memchr>
 800c432:	9a04      	ldr	r2, [sp, #16]
 800c434:	b9d8      	cbnz	r0, 800c46e <_svfiprintf_r+0xea>
 800c436:	06d0      	lsls	r0, r2, #27
 800c438:	bf44      	itt	mi
 800c43a:	2320      	movmi	r3, #32
 800c43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c440:	0711      	lsls	r1, r2, #28
 800c442:	bf44      	itt	mi
 800c444:	232b      	movmi	r3, #43	@ 0x2b
 800c446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c44a:	f89a 3000 	ldrb.w	r3, [sl]
 800c44e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c450:	d015      	beq.n	800c47e <_svfiprintf_r+0xfa>
 800c452:	4654      	mov	r4, sl
 800c454:	2000      	movs	r0, #0
 800c456:	f04f 0c0a 	mov.w	ip, #10
 800c45a:	9a07      	ldr	r2, [sp, #28]
 800c45c:	4621      	mov	r1, r4
 800c45e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c462:	3b30      	subs	r3, #48	@ 0x30
 800c464:	2b09      	cmp	r3, #9
 800c466:	d94b      	bls.n	800c500 <_svfiprintf_r+0x17c>
 800c468:	b1b0      	cbz	r0, 800c498 <_svfiprintf_r+0x114>
 800c46a:	9207      	str	r2, [sp, #28]
 800c46c:	e014      	b.n	800c498 <_svfiprintf_r+0x114>
 800c46e:	eba0 0308 	sub.w	r3, r0, r8
 800c472:	fa09 f303 	lsl.w	r3, r9, r3
 800c476:	4313      	orrs	r3, r2
 800c478:	46a2      	mov	sl, r4
 800c47a:	9304      	str	r3, [sp, #16]
 800c47c:	e7d2      	b.n	800c424 <_svfiprintf_r+0xa0>
 800c47e:	9b03      	ldr	r3, [sp, #12]
 800c480:	1d19      	adds	r1, r3, #4
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	9103      	str	r1, [sp, #12]
 800c486:	2b00      	cmp	r3, #0
 800c488:	bfbb      	ittet	lt
 800c48a:	425b      	neglt	r3, r3
 800c48c:	f042 0202 	orrlt.w	r2, r2, #2
 800c490:	9307      	strge	r3, [sp, #28]
 800c492:	9307      	strlt	r3, [sp, #28]
 800c494:	bfb8      	it	lt
 800c496:	9204      	strlt	r2, [sp, #16]
 800c498:	7823      	ldrb	r3, [r4, #0]
 800c49a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c49c:	d10a      	bne.n	800c4b4 <_svfiprintf_r+0x130>
 800c49e:	7863      	ldrb	r3, [r4, #1]
 800c4a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4a2:	d132      	bne.n	800c50a <_svfiprintf_r+0x186>
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	3402      	adds	r4, #2
 800c4a8:	1d1a      	adds	r2, r3, #4
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	9203      	str	r2, [sp, #12]
 800c4ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4b2:	9305      	str	r3, [sp, #20]
 800c4b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c56c <_svfiprintf_r+0x1e8>
 800c4b8:	2203      	movs	r2, #3
 800c4ba:	4650      	mov	r0, sl
 800c4bc:	7821      	ldrb	r1, [r4, #0]
 800c4be:	f000 fcb9 	bl	800ce34 <memchr>
 800c4c2:	b138      	cbz	r0, 800c4d4 <_svfiprintf_r+0x150>
 800c4c4:	2240      	movs	r2, #64	@ 0x40
 800c4c6:	9b04      	ldr	r3, [sp, #16]
 800c4c8:	eba0 000a 	sub.w	r0, r0, sl
 800c4cc:	4082      	lsls	r2, r0
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	3401      	adds	r4, #1
 800c4d2:	9304      	str	r3, [sp, #16]
 800c4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d8:	2206      	movs	r2, #6
 800c4da:	4825      	ldr	r0, [pc, #148]	@ (800c570 <_svfiprintf_r+0x1ec>)
 800c4dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4e0:	f000 fca8 	bl	800ce34 <memchr>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d036      	beq.n	800c556 <_svfiprintf_r+0x1d2>
 800c4e8:	4b22      	ldr	r3, [pc, #136]	@ (800c574 <_svfiprintf_r+0x1f0>)
 800c4ea:	bb1b      	cbnz	r3, 800c534 <_svfiprintf_r+0x1b0>
 800c4ec:	9b03      	ldr	r3, [sp, #12]
 800c4ee:	3307      	adds	r3, #7
 800c4f0:	f023 0307 	bic.w	r3, r3, #7
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	9303      	str	r3, [sp, #12]
 800c4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4fa:	4433      	add	r3, r6
 800c4fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4fe:	e76a      	b.n	800c3d6 <_svfiprintf_r+0x52>
 800c500:	460c      	mov	r4, r1
 800c502:	2001      	movs	r0, #1
 800c504:	fb0c 3202 	mla	r2, ip, r2, r3
 800c508:	e7a8      	b.n	800c45c <_svfiprintf_r+0xd8>
 800c50a:	2300      	movs	r3, #0
 800c50c:	f04f 0c0a 	mov.w	ip, #10
 800c510:	4619      	mov	r1, r3
 800c512:	3401      	adds	r4, #1
 800c514:	9305      	str	r3, [sp, #20]
 800c516:	4620      	mov	r0, r4
 800c518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c51c:	3a30      	subs	r2, #48	@ 0x30
 800c51e:	2a09      	cmp	r2, #9
 800c520:	d903      	bls.n	800c52a <_svfiprintf_r+0x1a6>
 800c522:	2b00      	cmp	r3, #0
 800c524:	d0c6      	beq.n	800c4b4 <_svfiprintf_r+0x130>
 800c526:	9105      	str	r1, [sp, #20]
 800c528:	e7c4      	b.n	800c4b4 <_svfiprintf_r+0x130>
 800c52a:	4604      	mov	r4, r0
 800c52c:	2301      	movs	r3, #1
 800c52e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c532:	e7f0      	b.n	800c516 <_svfiprintf_r+0x192>
 800c534:	ab03      	add	r3, sp, #12
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	462a      	mov	r2, r5
 800c53a:	4638      	mov	r0, r7
 800c53c:	4b0e      	ldr	r3, [pc, #56]	@ (800c578 <_svfiprintf_r+0x1f4>)
 800c53e:	a904      	add	r1, sp, #16
 800c540:	f3af 8000 	nop.w
 800c544:	1c42      	adds	r2, r0, #1
 800c546:	4606      	mov	r6, r0
 800c548:	d1d6      	bne.n	800c4f8 <_svfiprintf_r+0x174>
 800c54a:	89ab      	ldrh	r3, [r5, #12]
 800c54c:	065b      	lsls	r3, r3, #25
 800c54e:	f53f af2d 	bmi.w	800c3ac <_svfiprintf_r+0x28>
 800c552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c554:	e72c      	b.n	800c3b0 <_svfiprintf_r+0x2c>
 800c556:	ab03      	add	r3, sp, #12
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	462a      	mov	r2, r5
 800c55c:	4638      	mov	r0, r7
 800c55e:	4b06      	ldr	r3, [pc, #24]	@ (800c578 <_svfiprintf_r+0x1f4>)
 800c560:	a904      	add	r1, sp, #16
 800c562:	f000 f9bd 	bl	800c8e0 <_printf_i>
 800c566:	e7ed      	b.n	800c544 <_svfiprintf_r+0x1c0>
 800c568:	0800d0fb 	.word	0x0800d0fb
 800c56c:	0800d101 	.word	0x0800d101
 800c570:	0800d105 	.word	0x0800d105
 800c574:	00000000 	.word	0x00000000
 800c578:	0800c2cd 	.word	0x0800c2cd

0800c57c <__sfputc_r>:
 800c57c:	6893      	ldr	r3, [r2, #8]
 800c57e:	b410      	push	{r4}
 800c580:	3b01      	subs	r3, #1
 800c582:	2b00      	cmp	r3, #0
 800c584:	6093      	str	r3, [r2, #8]
 800c586:	da07      	bge.n	800c598 <__sfputc_r+0x1c>
 800c588:	6994      	ldr	r4, [r2, #24]
 800c58a:	42a3      	cmp	r3, r4
 800c58c:	db01      	blt.n	800c592 <__sfputc_r+0x16>
 800c58e:	290a      	cmp	r1, #10
 800c590:	d102      	bne.n	800c598 <__sfputc_r+0x1c>
 800c592:	bc10      	pop	{r4}
 800c594:	f000 bba0 	b.w	800ccd8 <__swbuf_r>
 800c598:	6813      	ldr	r3, [r2, #0]
 800c59a:	1c58      	adds	r0, r3, #1
 800c59c:	6010      	str	r0, [r2, #0]
 800c59e:	7019      	strb	r1, [r3, #0]
 800c5a0:	4608      	mov	r0, r1
 800c5a2:	bc10      	pop	{r4}
 800c5a4:	4770      	bx	lr

0800c5a6 <__sfputs_r>:
 800c5a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a8:	4606      	mov	r6, r0
 800c5aa:	460f      	mov	r7, r1
 800c5ac:	4614      	mov	r4, r2
 800c5ae:	18d5      	adds	r5, r2, r3
 800c5b0:	42ac      	cmp	r4, r5
 800c5b2:	d101      	bne.n	800c5b8 <__sfputs_r+0x12>
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	e007      	b.n	800c5c8 <__sfputs_r+0x22>
 800c5b8:	463a      	mov	r2, r7
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c0:	f7ff ffdc 	bl	800c57c <__sfputc_r>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d1f3      	bne.n	800c5b0 <__sfputs_r+0xa>
 800c5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5cc <_vfiprintf_r>:
 800c5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d0:	460d      	mov	r5, r1
 800c5d2:	4614      	mov	r4, r2
 800c5d4:	4698      	mov	r8, r3
 800c5d6:	4606      	mov	r6, r0
 800c5d8:	b09d      	sub	sp, #116	@ 0x74
 800c5da:	b118      	cbz	r0, 800c5e4 <_vfiprintf_r+0x18>
 800c5dc:	6a03      	ldr	r3, [r0, #32]
 800c5de:	b90b      	cbnz	r3, 800c5e4 <_vfiprintf_r+0x18>
 800c5e0:	f7ff fcba 	bl	800bf58 <__sinit>
 800c5e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5e6:	07d9      	lsls	r1, r3, #31
 800c5e8:	d405      	bmi.n	800c5f6 <_vfiprintf_r+0x2a>
 800c5ea:	89ab      	ldrh	r3, [r5, #12]
 800c5ec:	059a      	lsls	r2, r3, #22
 800c5ee:	d402      	bmi.n	800c5f6 <_vfiprintf_r+0x2a>
 800c5f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5f2:	f7ff fe12 	bl	800c21a <__retarget_lock_acquire_recursive>
 800c5f6:	89ab      	ldrh	r3, [r5, #12]
 800c5f8:	071b      	lsls	r3, r3, #28
 800c5fa:	d501      	bpl.n	800c600 <_vfiprintf_r+0x34>
 800c5fc:	692b      	ldr	r3, [r5, #16]
 800c5fe:	b99b      	cbnz	r3, 800c628 <_vfiprintf_r+0x5c>
 800c600:	4629      	mov	r1, r5
 800c602:	4630      	mov	r0, r6
 800c604:	f000 fba6 	bl	800cd54 <__swsetup_r>
 800c608:	b170      	cbz	r0, 800c628 <_vfiprintf_r+0x5c>
 800c60a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c60c:	07dc      	lsls	r4, r3, #31
 800c60e:	d504      	bpl.n	800c61a <_vfiprintf_r+0x4e>
 800c610:	f04f 30ff 	mov.w	r0, #4294967295
 800c614:	b01d      	add	sp, #116	@ 0x74
 800c616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61a:	89ab      	ldrh	r3, [r5, #12]
 800c61c:	0598      	lsls	r0, r3, #22
 800c61e:	d4f7      	bmi.n	800c610 <_vfiprintf_r+0x44>
 800c620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c622:	f7ff fdfb 	bl	800c21c <__retarget_lock_release_recursive>
 800c626:	e7f3      	b.n	800c610 <_vfiprintf_r+0x44>
 800c628:	2300      	movs	r3, #0
 800c62a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c62c:	2320      	movs	r3, #32
 800c62e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c632:	2330      	movs	r3, #48	@ 0x30
 800c634:	f04f 0901 	mov.w	r9, #1
 800c638:	f8cd 800c 	str.w	r8, [sp, #12]
 800c63c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c7e8 <_vfiprintf_r+0x21c>
 800c640:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c644:	4623      	mov	r3, r4
 800c646:	469a      	mov	sl, r3
 800c648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c64c:	b10a      	cbz	r2, 800c652 <_vfiprintf_r+0x86>
 800c64e:	2a25      	cmp	r2, #37	@ 0x25
 800c650:	d1f9      	bne.n	800c646 <_vfiprintf_r+0x7a>
 800c652:	ebba 0b04 	subs.w	fp, sl, r4
 800c656:	d00b      	beq.n	800c670 <_vfiprintf_r+0xa4>
 800c658:	465b      	mov	r3, fp
 800c65a:	4622      	mov	r2, r4
 800c65c:	4629      	mov	r1, r5
 800c65e:	4630      	mov	r0, r6
 800c660:	f7ff ffa1 	bl	800c5a6 <__sfputs_r>
 800c664:	3001      	adds	r0, #1
 800c666:	f000 80a7 	beq.w	800c7b8 <_vfiprintf_r+0x1ec>
 800c66a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c66c:	445a      	add	r2, fp
 800c66e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c670:	f89a 3000 	ldrb.w	r3, [sl]
 800c674:	2b00      	cmp	r3, #0
 800c676:	f000 809f 	beq.w	800c7b8 <_vfiprintf_r+0x1ec>
 800c67a:	2300      	movs	r3, #0
 800c67c:	f04f 32ff 	mov.w	r2, #4294967295
 800c680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c684:	f10a 0a01 	add.w	sl, sl, #1
 800c688:	9304      	str	r3, [sp, #16]
 800c68a:	9307      	str	r3, [sp, #28]
 800c68c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c690:	931a      	str	r3, [sp, #104]	@ 0x68
 800c692:	4654      	mov	r4, sl
 800c694:	2205      	movs	r2, #5
 800c696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c69a:	4853      	ldr	r0, [pc, #332]	@ (800c7e8 <_vfiprintf_r+0x21c>)
 800c69c:	f000 fbca 	bl	800ce34 <memchr>
 800c6a0:	9a04      	ldr	r2, [sp, #16]
 800c6a2:	b9d8      	cbnz	r0, 800c6dc <_vfiprintf_r+0x110>
 800c6a4:	06d1      	lsls	r1, r2, #27
 800c6a6:	bf44      	itt	mi
 800c6a8:	2320      	movmi	r3, #32
 800c6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6ae:	0713      	lsls	r3, r2, #28
 800c6b0:	bf44      	itt	mi
 800c6b2:	232b      	movmi	r3, #43	@ 0x2b
 800c6b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6be:	d015      	beq.n	800c6ec <_vfiprintf_r+0x120>
 800c6c0:	4654      	mov	r4, sl
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	f04f 0c0a 	mov.w	ip, #10
 800c6c8:	9a07      	ldr	r2, [sp, #28]
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6d0:	3b30      	subs	r3, #48	@ 0x30
 800c6d2:	2b09      	cmp	r3, #9
 800c6d4:	d94b      	bls.n	800c76e <_vfiprintf_r+0x1a2>
 800c6d6:	b1b0      	cbz	r0, 800c706 <_vfiprintf_r+0x13a>
 800c6d8:	9207      	str	r2, [sp, #28]
 800c6da:	e014      	b.n	800c706 <_vfiprintf_r+0x13a>
 800c6dc:	eba0 0308 	sub.w	r3, r0, r8
 800c6e0:	fa09 f303 	lsl.w	r3, r9, r3
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	46a2      	mov	sl, r4
 800c6e8:	9304      	str	r3, [sp, #16]
 800c6ea:	e7d2      	b.n	800c692 <_vfiprintf_r+0xc6>
 800c6ec:	9b03      	ldr	r3, [sp, #12]
 800c6ee:	1d19      	adds	r1, r3, #4
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	9103      	str	r1, [sp, #12]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	bfbb      	ittet	lt
 800c6f8:	425b      	neglt	r3, r3
 800c6fa:	f042 0202 	orrlt.w	r2, r2, #2
 800c6fe:	9307      	strge	r3, [sp, #28]
 800c700:	9307      	strlt	r3, [sp, #28]
 800c702:	bfb8      	it	lt
 800c704:	9204      	strlt	r2, [sp, #16]
 800c706:	7823      	ldrb	r3, [r4, #0]
 800c708:	2b2e      	cmp	r3, #46	@ 0x2e
 800c70a:	d10a      	bne.n	800c722 <_vfiprintf_r+0x156>
 800c70c:	7863      	ldrb	r3, [r4, #1]
 800c70e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c710:	d132      	bne.n	800c778 <_vfiprintf_r+0x1ac>
 800c712:	9b03      	ldr	r3, [sp, #12]
 800c714:	3402      	adds	r4, #2
 800c716:	1d1a      	adds	r2, r3, #4
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	9203      	str	r2, [sp, #12]
 800c71c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c720:	9305      	str	r3, [sp, #20]
 800c722:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c7ec <_vfiprintf_r+0x220>
 800c726:	2203      	movs	r2, #3
 800c728:	4650      	mov	r0, sl
 800c72a:	7821      	ldrb	r1, [r4, #0]
 800c72c:	f000 fb82 	bl	800ce34 <memchr>
 800c730:	b138      	cbz	r0, 800c742 <_vfiprintf_r+0x176>
 800c732:	2240      	movs	r2, #64	@ 0x40
 800c734:	9b04      	ldr	r3, [sp, #16]
 800c736:	eba0 000a 	sub.w	r0, r0, sl
 800c73a:	4082      	lsls	r2, r0
 800c73c:	4313      	orrs	r3, r2
 800c73e:	3401      	adds	r4, #1
 800c740:	9304      	str	r3, [sp, #16]
 800c742:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c746:	2206      	movs	r2, #6
 800c748:	4829      	ldr	r0, [pc, #164]	@ (800c7f0 <_vfiprintf_r+0x224>)
 800c74a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c74e:	f000 fb71 	bl	800ce34 <memchr>
 800c752:	2800      	cmp	r0, #0
 800c754:	d03f      	beq.n	800c7d6 <_vfiprintf_r+0x20a>
 800c756:	4b27      	ldr	r3, [pc, #156]	@ (800c7f4 <_vfiprintf_r+0x228>)
 800c758:	bb1b      	cbnz	r3, 800c7a2 <_vfiprintf_r+0x1d6>
 800c75a:	9b03      	ldr	r3, [sp, #12]
 800c75c:	3307      	adds	r3, #7
 800c75e:	f023 0307 	bic.w	r3, r3, #7
 800c762:	3308      	adds	r3, #8
 800c764:	9303      	str	r3, [sp, #12]
 800c766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c768:	443b      	add	r3, r7
 800c76a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c76c:	e76a      	b.n	800c644 <_vfiprintf_r+0x78>
 800c76e:	460c      	mov	r4, r1
 800c770:	2001      	movs	r0, #1
 800c772:	fb0c 3202 	mla	r2, ip, r2, r3
 800c776:	e7a8      	b.n	800c6ca <_vfiprintf_r+0xfe>
 800c778:	2300      	movs	r3, #0
 800c77a:	f04f 0c0a 	mov.w	ip, #10
 800c77e:	4619      	mov	r1, r3
 800c780:	3401      	adds	r4, #1
 800c782:	9305      	str	r3, [sp, #20]
 800c784:	4620      	mov	r0, r4
 800c786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c78a:	3a30      	subs	r2, #48	@ 0x30
 800c78c:	2a09      	cmp	r2, #9
 800c78e:	d903      	bls.n	800c798 <_vfiprintf_r+0x1cc>
 800c790:	2b00      	cmp	r3, #0
 800c792:	d0c6      	beq.n	800c722 <_vfiprintf_r+0x156>
 800c794:	9105      	str	r1, [sp, #20]
 800c796:	e7c4      	b.n	800c722 <_vfiprintf_r+0x156>
 800c798:	4604      	mov	r4, r0
 800c79a:	2301      	movs	r3, #1
 800c79c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7a0:	e7f0      	b.n	800c784 <_vfiprintf_r+0x1b8>
 800c7a2:	ab03      	add	r3, sp, #12
 800c7a4:	9300      	str	r3, [sp, #0]
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	4b13      	ldr	r3, [pc, #76]	@ (800c7f8 <_vfiprintf_r+0x22c>)
 800c7ac:	a904      	add	r1, sp, #16
 800c7ae:	f3af 8000 	nop.w
 800c7b2:	4607      	mov	r7, r0
 800c7b4:	1c78      	adds	r0, r7, #1
 800c7b6:	d1d6      	bne.n	800c766 <_vfiprintf_r+0x19a>
 800c7b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7ba:	07d9      	lsls	r1, r3, #31
 800c7bc:	d405      	bmi.n	800c7ca <_vfiprintf_r+0x1fe>
 800c7be:	89ab      	ldrh	r3, [r5, #12]
 800c7c0:	059a      	lsls	r2, r3, #22
 800c7c2:	d402      	bmi.n	800c7ca <_vfiprintf_r+0x1fe>
 800c7c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7c6:	f7ff fd29 	bl	800c21c <__retarget_lock_release_recursive>
 800c7ca:	89ab      	ldrh	r3, [r5, #12]
 800c7cc:	065b      	lsls	r3, r3, #25
 800c7ce:	f53f af1f 	bmi.w	800c610 <_vfiprintf_r+0x44>
 800c7d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7d4:	e71e      	b.n	800c614 <_vfiprintf_r+0x48>
 800c7d6:	ab03      	add	r3, sp, #12
 800c7d8:	9300      	str	r3, [sp, #0]
 800c7da:	462a      	mov	r2, r5
 800c7dc:	4630      	mov	r0, r6
 800c7de:	4b06      	ldr	r3, [pc, #24]	@ (800c7f8 <_vfiprintf_r+0x22c>)
 800c7e0:	a904      	add	r1, sp, #16
 800c7e2:	f000 f87d 	bl	800c8e0 <_printf_i>
 800c7e6:	e7e4      	b.n	800c7b2 <_vfiprintf_r+0x1e6>
 800c7e8:	0800d0fb 	.word	0x0800d0fb
 800c7ec:	0800d101 	.word	0x0800d101
 800c7f0:	0800d105 	.word	0x0800d105
 800c7f4:	00000000 	.word	0x00000000
 800c7f8:	0800c5a7 	.word	0x0800c5a7

0800c7fc <_printf_common>:
 800c7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c800:	4616      	mov	r6, r2
 800c802:	4698      	mov	r8, r3
 800c804:	688a      	ldr	r2, [r1, #8]
 800c806:	690b      	ldr	r3, [r1, #16]
 800c808:	4607      	mov	r7, r0
 800c80a:	4293      	cmp	r3, r2
 800c80c:	bfb8      	it	lt
 800c80e:	4613      	movlt	r3, r2
 800c810:	6033      	str	r3, [r6, #0]
 800c812:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c816:	460c      	mov	r4, r1
 800c818:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c81c:	b10a      	cbz	r2, 800c822 <_printf_common+0x26>
 800c81e:	3301      	adds	r3, #1
 800c820:	6033      	str	r3, [r6, #0]
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	0699      	lsls	r1, r3, #26
 800c826:	bf42      	ittt	mi
 800c828:	6833      	ldrmi	r3, [r6, #0]
 800c82a:	3302      	addmi	r3, #2
 800c82c:	6033      	strmi	r3, [r6, #0]
 800c82e:	6825      	ldr	r5, [r4, #0]
 800c830:	f015 0506 	ands.w	r5, r5, #6
 800c834:	d106      	bne.n	800c844 <_printf_common+0x48>
 800c836:	f104 0a19 	add.w	sl, r4, #25
 800c83a:	68e3      	ldr	r3, [r4, #12]
 800c83c:	6832      	ldr	r2, [r6, #0]
 800c83e:	1a9b      	subs	r3, r3, r2
 800c840:	42ab      	cmp	r3, r5
 800c842:	dc2b      	bgt.n	800c89c <_printf_common+0xa0>
 800c844:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c848:	6822      	ldr	r2, [r4, #0]
 800c84a:	3b00      	subs	r3, #0
 800c84c:	bf18      	it	ne
 800c84e:	2301      	movne	r3, #1
 800c850:	0692      	lsls	r2, r2, #26
 800c852:	d430      	bmi.n	800c8b6 <_printf_common+0xba>
 800c854:	4641      	mov	r1, r8
 800c856:	4638      	mov	r0, r7
 800c858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c85c:	47c8      	blx	r9
 800c85e:	3001      	adds	r0, #1
 800c860:	d023      	beq.n	800c8aa <_printf_common+0xae>
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	6922      	ldr	r2, [r4, #16]
 800c866:	f003 0306 	and.w	r3, r3, #6
 800c86a:	2b04      	cmp	r3, #4
 800c86c:	bf14      	ite	ne
 800c86e:	2500      	movne	r5, #0
 800c870:	6833      	ldreq	r3, [r6, #0]
 800c872:	f04f 0600 	mov.w	r6, #0
 800c876:	bf08      	it	eq
 800c878:	68e5      	ldreq	r5, [r4, #12]
 800c87a:	f104 041a 	add.w	r4, r4, #26
 800c87e:	bf08      	it	eq
 800c880:	1aed      	subeq	r5, r5, r3
 800c882:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c886:	bf08      	it	eq
 800c888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c88c:	4293      	cmp	r3, r2
 800c88e:	bfc4      	itt	gt
 800c890:	1a9b      	subgt	r3, r3, r2
 800c892:	18ed      	addgt	r5, r5, r3
 800c894:	42b5      	cmp	r5, r6
 800c896:	d11a      	bne.n	800c8ce <_printf_common+0xd2>
 800c898:	2000      	movs	r0, #0
 800c89a:	e008      	b.n	800c8ae <_printf_common+0xb2>
 800c89c:	2301      	movs	r3, #1
 800c89e:	4652      	mov	r2, sl
 800c8a0:	4641      	mov	r1, r8
 800c8a2:	4638      	mov	r0, r7
 800c8a4:	47c8      	blx	r9
 800c8a6:	3001      	adds	r0, #1
 800c8a8:	d103      	bne.n	800c8b2 <_printf_common+0xb6>
 800c8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b2:	3501      	adds	r5, #1
 800c8b4:	e7c1      	b.n	800c83a <_printf_common+0x3e>
 800c8b6:	2030      	movs	r0, #48	@ 0x30
 800c8b8:	18e1      	adds	r1, r4, r3
 800c8ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c8be:	1c5a      	adds	r2, r3, #1
 800c8c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c8c4:	4422      	add	r2, r4
 800c8c6:	3302      	adds	r3, #2
 800c8c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c8cc:	e7c2      	b.n	800c854 <_printf_common+0x58>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	4622      	mov	r2, r4
 800c8d2:	4641      	mov	r1, r8
 800c8d4:	4638      	mov	r0, r7
 800c8d6:	47c8      	blx	r9
 800c8d8:	3001      	adds	r0, #1
 800c8da:	d0e6      	beq.n	800c8aa <_printf_common+0xae>
 800c8dc:	3601      	adds	r6, #1
 800c8de:	e7d9      	b.n	800c894 <_printf_common+0x98>

0800c8e0 <_printf_i>:
 800c8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8e4:	7e0f      	ldrb	r7, [r1, #24]
 800c8e6:	4691      	mov	r9, r2
 800c8e8:	2f78      	cmp	r7, #120	@ 0x78
 800c8ea:	4680      	mov	r8, r0
 800c8ec:	460c      	mov	r4, r1
 800c8ee:	469a      	mov	sl, r3
 800c8f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c8f6:	d807      	bhi.n	800c908 <_printf_i+0x28>
 800c8f8:	2f62      	cmp	r7, #98	@ 0x62
 800c8fa:	d80a      	bhi.n	800c912 <_printf_i+0x32>
 800c8fc:	2f00      	cmp	r7, #0
 800c8fe:	f000 80d3 	beq.w	800caa8 <_printf_i+0x1c8>
 800c902:	2f58      	cmp	r7, #88	@ 0x58
 800c904:	f000 80ba 	beq.w	800ca7c <_printf_i+0x19c>
 800c908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c90c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c910:	e03a      	b.n	800c988 <_printf_i+0xa8>
 800c912:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c916:	2b15      	cmp	r3, #21
 800c918:	d8f6      	bhi.n	800c908 <_printf_i+0x28>
 800c91a:	a101      	add	r1, pc, #4	@ (adr r1, 800c920 <_printf_i+0x40>)
 800c91c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c920:	0800c979 	.word	0x0800c979
 800c924:	0800c98d 	.word	0x0800c98d
 800c928:	0800c909 	.word	0x0800c909
 800c92c:	0800c909 	.word	0x0800c909
 800c930:	0800c909 	.word	0x0800c909
 800c934:	0800c909 	.word	0x0800c909
 800c938:	0800c98d 	.word	0x0800c98d
 800c93c:	0800c909 	.word	0x0800c909
 800c940:	0800c909 	.word	0x0800c909
 800c944:	0800c909 	.word	0x0800c909
 800c948:	0800c909 	.word	0x0800c909
 800c94c:	0800ca8f 	.word	0x0800ca8f
 800c950:	0800c9b7 	.word	0x0800c9b7
 800c954:	0800ca49 	.word	0x0800ca49
 800c958:	0800c909 	.word	0x0800c909
 800c95c:	0800c909 	.word	0x0800c909
 800c960:	0800cab1 	.word	0x0800cab1
 800c964:	0800c909 	.word	0x0800c909
 800c968:	0800c9b7 	.word	0x0800c9b7
 800c96c:	0800c909 	.word	0x0800c909
 800c970:	0800c909 	.word	0x0800c909
 800c974:	0800ca51 	.word	0x0800ca51
 800c978:	6833      	ldr	r3, [r6, #0]
 800c97a:	1d1a      	adds	r2, r3, #4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	6032      	str	r2, [r6, #0]
 800c980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c984:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c988:	2301      	movs	r3, #1
 800c98a:	e09e      	b.n	800caca <_printf_i+0x1ea>
 800c98c:	6833      	ldr	r3, [r6, #0]
 800c98e:	6820      	ldr	r0, [r4, #0]
 800c990:	1d19      	adds	r1, r3, #4
 800c992:	6031      	str	r1, [r6, #0]
 800c994:	0606      	lsls	r6, r0, #24
 800c996:	d501      	bpl.n	800c99c <_printf_i+0xbc>
 800c998:	681d      	ldr	r5, [r3, #0]
 800c99a:	e003      	b.n	800c9a4 <_printf_i+0xc4>
 800c99c:	0645      	lsls	r5, r0, #25
 800c99e:	d5fb      	bpl.n	800c998 <_printf_i+0xb8>
 800c9a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c9a4:	2d00      	cmp	r5, #0
 800c9a6:	da03      	bge.n	800c9b0 <_printf_i+0xd0>
 800c9a8:	232d      	movs	r3, #45	@ 0x2d
 800c9aa:	426d      	negs	r5, r5
 800c9ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9b0:	230a      	movs	r3, #10
 800c9b2:	4859      	ldr	r0, [pc, #356]	@ (800cb18 <_printf_i+0x238>)
 800c9b4:	e011      	b.n	800c9da <_printf_i+0xfa>
 800c9b6:	6821      	ldr	r1, [r4, #0]
 800c9b8:	6833      	ldr	r3, [r6, #0]
 800c9ba:	0608      	lsls	r0, r1, #24
 800c9bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800c9c0:	d402      	bmi.n	800c9c8 <_printf_i+0xe8>
 800c9c2:	0649      	lsls	r1, r1, #25
 800c9c4:	bf48      	it	mi
 800c9c6:	b2ad      	uxthmi	r5, r5
 800c9c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c9ca:	6033      	str	r3, [r6, #0]
 800c9cc:	bf14      	ite	ne
 800c9ce:	230a      	movne	r3, #10
 800c9d0:	2308      	moveq	r3, #8
 800c9d2:	4851      	ldr	r0, [pc, #324]	@ (800cb18 <_printf_i+0x238>)
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c9da:	6866      	ldr	r6, [r4, #4]
 800c9dc:	2e00      	cmp	r6, #0
 800c9de:	bfa8      	it	ge
 800c9e0:	6821      	ldrge	r1, [r4, #0]
 800c9e2:	60a6      	str	r6, [r4, #8]
 800c9e4:	bfa4      	itt	ge
 800c9e6:	f021 0104 	bicge.w	r1, r1, #4
 800c9ea:	6021      	strge	r1, [r4, #0]
 800c9ec:	b90d      	cbnz	r5, 800c9f2 <_printf_i+0x112>
 800c9ee:	2e00      	cmp	r6, #0
 800c9f0:	d04b      	beq.n	800ca8a <_printf_i+0x1aa>
 800c9f2:	4616      	mov	r6, r2
 800c9f4:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9f8:	fb03 5711 	mls	r7, r3, r1, r5
 800c9fc:	5dc7      	ldrb	r7, [r0, r7]
 800c9fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca02:	462f      	mov	r7, r5
 800ca04:	42bb      	cmp	r3, r7
 800ca06:	460d      	mov	r5, r1
 800ca08:	d9f4      	bls.n	800c9f4 <_printf_i+0x114>
 800ca0a:	2b08      	cmp	r3, #8
 800ca0c:	d10b      	bne.n	800ca26 <_printf_i+0x146>
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	07df      	lsls	r7, r3, #31
 800ca12:	d508      	bpl.n	800ca26 <_printf_i+0x146>
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	6861      	ldr	r1, [r4, #4]
 800ca18:	4299      	cmp	r1, r3
 800ca1a:	bfde      	ittt	le
 800ca1c:	2330      	movle	r3, #48	@ 0x30
 800ca1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca22:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca26:	1b92      	subs	r2, r2, r6
 800ca28:	6122      	str	r2, [r4, #16]
 800ca2a:	464b      	mov	r3, r9
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	4640      	mov	r0, r8
 800ca30:	f8cd a000 	str.w	sl, [sp]
 800ca34:	aa03      	add	r2, sp, #12
 800ca36:	f7ff fee1 	bl	800c7fc <_printf_common>
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	d14a      	bne.n	800cad4 <_printf_i+0x1f4>
 800ca3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca42:	b004      	add	sp, #16
 800ca44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca48:	6823      	ldr	r3, [r4, #0]
 800ca4a:	f043 0320 	orr.w	r3, r3, #32
 800ca4e:	6023      	str	r3, [r4, #0]
 800ca50:	2778      	movs	r7, #120	@ 0x78
 800ca52:	4832      	ldr	r0, [pc, #200]	@ (800cb1c <_printf_i+0x23c>)
 800ca54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	6831      	ldr	r1, [r6, #0]
 800ca5c:	061f      	lsls	r7, r3, #24
 800ca5e:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca62:	d402      	bmi.n	800ca6a <_printf_i+0x18a>
 800ca64:	065f      	lsls	r7, r3, #25
 800ca66:	bf48      	it	mi
 800ca68:	b2ad      	uxthmi	r5, r5
 800ca6a:	6031      	str	r1, [r6, #0]
 800ca6c:	07d9      	lsls	r1, r3, #31
 800ca6e:	bf44      	itt	mi
 800ca70:	f043 0320 	orrmi.w	r3, r3, #32
 800ca74:	6023      	strmi	r3, [r4, #0]
 800ca76:	b11d      	cbz	r5, 800ca80 <_printf_i+0x1a0>
 800ca78:	2310      	movs	r3, #16
 800ca7a:	e7ab      	b.n	800c9d4 <_printf_i+0xf4>
 800ca7c:	4826      	ldr	r0, [pc, #152]	@ (800cb18 <_printf_i+0x238>)
 800ca7e:	e7e9      	b.n	800ca54 <_printf_i+0x174>
 800ca80:	6823      	ldr	r3, [r4, #0]
 800ca82:	f023 0320 	bic.w	r3, r3, #32
 800ca86:	6023      	str	r3, [r4, #0]
 800ca88:	e7f6      	b.n	800ca78 <_printf_i+0x198>
 800ca8a:	4616      	mov	r6, r2
 800ca8c:	e7bd      	b.n	800ca0a <_printf_i+0x12a>
 800ca8e:	6833      	ldr	r3, [r6, #0]
 800ca90:	6825      	ldr	r5, [r4, #0]
 800ca92:	1d18      	adds	r0, r3, #4
 800ca94:	6961      	ldr	r1, [r4, #20]
 800ca96:	6030      	str	r0, [r6, #0]
 800ca98:	062e      	lsls	r6, r5, #24
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	d501      	bpl.n	800caa2 <_printf_i+0x1c2>
 800ca9e:	6019      	str	r1, [r3, #0]
 800caa0:	e002      	b.n	800caa8 <_printf_i+0x1c8>
 800caa2:	0668      	lsls	r0, r5, #25
 800caa4:	d5fb      	bpl.n	800ca9e <_printf_i+0x1be>
 800caa6:	8019      	strh	r1, [r3, #0]
 800caa8:	2300      	movs	r3, #0
 800caaa:	4616      	mov	r6, r2
 800caac:	6123      	str	r3, [r4, #16]
 800caae:	e7bc      	b.n	800ca2a <_printf_i+0x14a>
 800cab0:	6833      	ldr	r3, [r6, #0]
 800cab2:	2100      	movs	r1, #0
 800cab4:	1d1a      	adds	r2, r3, #4
 800cab6:	6032      	str	r2, [r6, #0]
 800cab8:	681e      	ldr	r6, [r3, #0]
 800caba:	6862      	ldr	r2, [r4, #4]
 800cabc:	4630      	mov	r0, r6
 800cabe:	f000 f9b9 	bl	800ce34 <memchr>
 800cac2:	b108      	cbz	r0, 800cac8 <_printf_i+0x1e8>
 800cac4:	1b80      	subs	r0, r0, r6
 800cac6:	6060      	str	r0, [r4, #4]
 800cac8:	6863      	ldr	r3, [r4, #4]
 800caca:	6123      	str	r3, [r4, #16]
 800cacc:	2300      	movs	r3, #0
 800cace:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cad2:	e7aa      	b.n	800ca2a <_printf_i+0x14a>
 800cad4:	4632      	mov	r2, r6
 800cad6:	4649      	mov	r1, r9
 800cad8:	4640      	mov	r0, r8
 800cada:	6923      	ldr	r3, [r4, #16]
 800cadc:	47d0      	blx	sl
 800cade:	3001      	adds	r0, #1
 800cae0:	d0ad      	beq.n	800ca3e <_printf_i+0x15e>
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	079b      	lsls	r3, r3, #30
 800cae6:	d413      	bmi.n	800cb10 <_printf_i+0x230>
 800cae8:	68e0      	ldr	r0, [r4, #12]
 800caea:	9b03      	ldr	r3, [sp, #12]
 800caec:	4298      	cmp	r0, r3
 800caee:	bfb8      	it	lt
 800caf0:	4618      	movlt	r0, r3
 800caf2:	e7a6      	b.n	800ca42 <_printf_i+0x162>
 800caf4:	2301      	movs	r3, #1
 800caf6:	4632      	mov	r2, r6
 800caf8:	4649      	mov	r1, r9
 800cafa:	4640      	mov	r0, r8
 800cafc:	47d0      	blx	sl
 800cafe:	3001      	adds	r0, #1
 800cb00:	d09d      	beq.n	800ca3e <_printf_i+0x15e>
 800cb02:	3501      	adds	r5, #1
 800cb04:	68e3      	ldr	r3, [r4, #12]
 800cb06:	9903      	ldr	r1, [sp, #12]
 800cb08:	1a5b      	subs	r3, r3, r1
 800cb0a:	42ab      	cmp	r3, r5
 800cb0c:	dcf2      	bgt.n	800caf4 <_printf_i+0x214>
 800cb0e:	e7eb      	b.n	800cae8 <_printf_i+0x208>
 800cb10:	2500      	movs	r5, #0
 800cb12:	f104 0619 	add.w	r6, r4, #25
 800cb16:	e7f5      	b.n	800cb04 <_printf_i+0x224>
 800cb18:	0800d10c 	.word	0x0800d10c
 800cb1c:	0800d11d 	.word	0x0800d11d

0800cb20 <__sflush_r>:
 800cb20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb26:	0716      	lsls	r6, r2, #28
 800cb28:	4605      	mov	r5, r0
 800cb2a:	460c      	mov	r4, r1
 800cb2c:	d454      	bmi.n	800cbd8 <__sflush_r+0xb8>
 800cb2e:	684b      	ldr	r3, [r1, #4]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	dc02      	bgt.n	800cb3a <__sflush_r+0x1a>
 800cb34:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	dd48      	ble.n	800cbcc <__sflush_r+0xac>
 800cb3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb3c:	2e00      	cmp	r6, #0
 800cb3e:	d045      	beq.n	800cbcc <__sflush_r+0xac>
 800cb40:	2300      	movs	r3, #0
 800cb42:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb46:	682f      	ldr	r7, [r5, #0]
 800cb48:	6a21      	ldr	r1, [r4, #32]
 800cb4a:	602b      	str	r3, [r5, #0]
 800cb4c:	d030      	beq.n	800cbb0 <__sflush_r+0x90>
 800cb4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	0759      	lsls	r1, r3, #29
 800cb54:	d505      	bpl.n	800cb62 <__sflush_r+0x42>
 800cb56:	6863      	ldr	r3, [r4, #4]
 800cb58:	1ad2      	subs	r2, r2, r3
 800cb5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb5c:	b10b      	cbz	r3, 800cb62 <__sflush_r+0x42>
 800cb5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb60:	1ad2      	subs	r2, r2, r3
 800cb62:	2300      	movs	r3, #0
 800cb64:	4628      	mov	r0, r5
 800cb66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb68:	6a21      	ldr	r1, [r4, #32]
 800cb6a:	47b0      	blx	r6
 800cb6c:	1c43      	adds	r3, r0, #1
 800cb6e:	89a3      	ldrh	r3, [r4, #12]
 800cb70:	d106      	bne.n	800cb80 <__sflush_r+0x60>
 800cb72:	6829      	ldr	r1, [r5, #0]
 800cb74:	291d      	cmp	r1, #29
 800cb76:	d82b      	bhi.n	800cbd0 <__sflush_r+0xb0>
 800cb78:	4a28      	ldr	r2, [pc, #160]	@ (800cc1c <__sflush_r+0xfc>)
 800cb7a:	410a      	asrs	r2, r1
 800cb7c:	07d6      	lsls	r6, r2, #31
 800cb7e:	d427      	bmi.n	800cbd0 <__sflush_r+0xb0>
 800cb80:	2200      	movs	r2, #0
 800cb82:	6062      	str	r2, [r4, #4]
 800cb84:	6922      	ldr	r2, [r4, #16]
 800cb86:	04d9      	lsls	r1, r3, #19
 800cb88:	6022      	str	r2, [r4, #0]
 800cb8a:	d504      	bpl.n	800cb96 <__sflush_r+0x76>
 800cb8c:	1c42      	adds	r2, r0, #1
 800cb8e:	d101      	bne.n	800cb94 <__sflush_r+0x74>
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	b903      	cbnz	r3, 800cb96 <__sflush_r+0x76>
 800cb94:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb98:	602f      	str	r7, [r5, #0]
 800cb9a:	b1b9      	cbz	r1, 800cbcc <__sflush_r+0xac>
 800cb9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cba0:	4299      	cmp	r1, r3
 800cba2:	d002      	beq.n	800cbaa <__sflush_r+0x8a>
 800cba4:	4628      	mov	r0, r5
 800cba6:	f7ff fb49 	bl	800c23c <_free_r>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbae:	e00d      	b.n	800cbcc <__sflush_r+0xac>
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	47b0      	blx	r6
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	1c50      	adds	r0, r2, #1
 800cbba:	d1c9      	bne.n	800cb50 <__sflush_r+0x30>
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d0c6      	beq.n	800cb50 <__sflush_r+0x30>
 800cbc2:	2b1d      	cmp	r3, #29
 800cbc4:	d001      	beq.n	800cbca <__sflush_r+0xaa>
 800cbc6:	2b16      	cmp	r3, #22
 800cbc8:	d11d      	bne.n	800cc06 <__sflush_r+0xe6>
 800cbca:	602f      	str	r7, [r5, #0]
 800cbcc:	2000      	movs	r0, #0
 800cbce:	e021      	b.n	800cc14 <__sflush_r+0xf4>
 800cbd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbd4:	b21b      	sxth	r3, r3
 800cbd6:	e01a      	b.n	800cc0e <__sflush_r+0xee>
 800cbd8:	690f      	ldr	r7, [r1, #16]
 800cbda:	2f00      	cmp	r7, #0
 800cbdc:	d0f6      	beq.n	800cbcc <__sflush_r+0xac>
 800cbde:	0793      	lsls	r3, r2, #30
 800cbe0:	bf18      	it	ne
 800cbe2:	2300      	movne	r3, #0
 800cbe4:	680e      	ldr	r6, [r1, #0]
 800cbe6:	bf08      	it	eq
 800cbe8:	694b      	ldreq	r3, [r1, #20]
 800cbea:	1bf6      	subs	r6, r6, r7
 800cbec:	600f      	str	r7, [r1, #0]
 800cbee:	608b      	str	r3, [r1, #8]
 800cbf0:	2e00      	cmp	r6, #0
 800cbf2:	ddeb      	ble.n	800cbcc <__sflush_r+0xac>
 800cbf4:	4633      	mov	r3, r6
 800cbf6:	463a      	mov	r2, r7
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	6a21      	ldr	r1, [r4, #32]
 800cbfc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cc00:	47e0      	blx	ip
 800cc02:	2800      	cmp	r0, #0
 800cc04:	dc07      	bgt.n	800cc16 <__sflush_r+0xf6>
 800cc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc12:	81a3      	strh	r3, [r4, #12]
 800cc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc16:	4407      	add	r7, r0
 800cc18:	1a36      	subs	r6, r6, r0
 800cc1a:	e7e9      	b.n	800cbf0 <__sflush_r+0xd0>
 800cc1c:	dfbffffe 	.word	0xdfbffffe

0800cc20 <_fflush_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	690b      	ldr	r3, [r1, #16]
 800cc24:	4605      	mov	r5, r0
 800cc26:	460c      	mov	r4, r1
 800cc28:	b913      	cbnz	r3, 800cc30 <_fflush_r+0x10>
 800cc2a:	2500      	movs	r5, #0
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	bd38      	pop	{r3, r4, r5, pc}
 800cc30:	b118      	cbz	r0, 800cc3a <_fflush_r+0x1a>
 800cc32:	6a03      	ldr	r3, [r0, #32]
 800cc34:	b90b      	cbnz	r3, 800cc3a <_fflush_r+0x1a>
 800cc36:	f7ff f98f 	bl	800bf58 <__sinit>
 800cc3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d0f3      	beq.n	800cc2a <_fflush_r+0xa>
 800cc42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc44:	07d0      	lsls	r0, r2, #31
 800cc46:	d404      	bmi.n	800cc52 <_fflush_r+0x32>
 800cc48:	0599      	lsls	r1, r3, #22
 800cc4a:	d402      	bmi.n	800cc52 <_fflush_r+0x32>
 800cc4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc4e:	f7ff fae4 	bl	800c21a <__retarget_lock_acquire_recursive>
 800cc52:	4628      	mov	r0, r5
 800cc54:	4621      	mov	r1, r4
 800cc56:	f7ff ff63 	bl	800cb20 <__sflush_r>
 800cc5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc5c:	4605      	mov	r5, r0
 800cc5e:	07da      	lsls	r2, r3, #31
 800cc60:	d4e4      	bmi.n	800cc2c <_fflush_r+0xc>
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	059b      	lsls	r3, r3, #22
 800cc66:	d4e1      	bmi.n	800cc2c <_fflush_r+0xc>
 800cc68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc6a:	f7ff fad7 	bl	800c21c <__retarget_lock_release_recursive>
 800cc6e:	e7dd      	b.n	800cc2c <_fflush_r+0xc>

0800cc70 <_putc_r>:
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	460d      	mov	r5, r1
 800cc74:	4614      	mov	r4, r2
 800cc76:	4606      	mov	r6, r0
 800cc78:	b118      	cbz	r0, 800cc82 <_putc_r+0x12>
 800cc7a:	6a03      	ldr	r3, [r0, #32]
 800cc7c:	b90b      	cbnz	r3, 800cc82 <_putc_r+0x12>
 800cc7e:	f7ff f96b 	bl	800bf58 <__sinit>
 800cc82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc84:	07d8      	lsls	r0, r3, #31
 800cc86:	d405      	bmi.n	800cc94 <_putc_r+0x24>
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	0599      	lsls	r1, r3, #22
 800cc8c:	d402      	bmi.n	800cc94 <_putc_r+0x24>
 800cc8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc90:	f7ff fac3 	bl	800c21a <__retarget_lock_acquire_recursive>
 800cc94:	68a3      	ldr	r3, [r4, #8]
 800cc96:	3b01      	subs	r3, #1
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	60a3      	str	r3, [r4, #8]
 800cc9c:	da05      	bge.n	800ccaa <_putc_r+0x3a>
 800cc9e:	69a2      	ldr	r2, [r4, #24]
 800cca0:	4293      	cmp	r3, r2
 800cca2:	db12      	blt.n	800ccca <_putc_r+0x5a>
 800cca4:	b2eb      	uxtb	r3, r5
 800cca6:	2b0a      	cmp	r3, #10
 800cca8:	d00f      	beq.n	800ccca <_putc_r+0x5a>
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	1c5a      	adds	r2, r3, #1
 800ccae:	6022      	str	r2, [r4, #0]
 800ccb0:	701d      	strb	r5, [r3, #0]
 800ccb2:	b2ed      	uxtb	r5, r5
 800ccb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccb6:	07da      	lsls	r2, r3, #31
 800ccb8:	d405      	bmi.n	800ccc6 <_putc_r+0x56>
 800ccba:	89a3      	ldrh	r3, [r4, #12]
 800ccbc:	059b      	lsls	r3, r3, #22
 800ccbe:	d402      	bmi.n	800ccc6 <_putc_r+0x56>
 800ccc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccc2:	f7ff faab 	bl	800c21c <__retarget_lock_release_recursive>
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	bd70      	pop	{r4, r5, r6, pc}
 800ccca:	4629      	mov	r1, r5
 800cccc:	4622      	mov	r2, r4
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f000 f802 	bl	800ccd8 <__swbuf_r>
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	e7ed      	b.n	800ccb4 <_putc_r+0x44>

0800ccd8 <__swbuf_r>:
 800ccd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccda:	460e      	mov	r6, r1
 800ccdc:	4614      	mov	r4, r2
 800ccde:	4605      	mov	r5, r0
 800cce0:	b118      	cbz	r0, 800ccea <__swbuf_r+0x12>
 800cce2:	6a03      	ldr	r3, [r0, #32]
 800cce4:	b90b      	cbnz	r3, 800ccea <__swbuf_r+0x12>
 800cce6:	f7ff f937 	bl	800bf58 <__sinit>
 800ccea:	69a3      	ldr	r3, [r4, #24]
 800ccec:	60a3      	str	r3, [r4, #8]
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	071a      	lsls	r2, r3, #28
 800ccf2:	d501      	bpl.n	800ccf8 <__swbuf_r+0x20>
 800ccf4:	6923      	ldr	r3, [r4, #16]
 800ccf6:	b943      	cbnz	r3, 800cd0a <__swbuf_r+0x32>
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	f000 f82a 	bl	800cd54 <__swsetup_r>
 800cd00:	b118      	cbz	r0, 800cd0a <__swbuf_r+0x32>
 800cd02:	f04f 37ff 	mov.w	r7, #4294967295
 800cd06:	4638      	mov	r0, r7
 800cd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	6922      	ldr	r2, [r4, #16]
 800cd0e:	b2f6      	uxtb	r6, r6
 800cd10:	1a98      	subs	r0, r3, r2
 800cd12:	6963      	ldr	r3, [r4, #20]
 800cd14:	4637      	mov	r7, r6
 800cd16:	4283      	cmp	r3, r0
 800cd18:	dc05      	bgt.n	800cd26 <__swbuf_r+0x4e>
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f7ff ff7f 	bl	800cc20 <_fflush_r>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d1ed      	bne.n	800cd02 <__swbuf_r+0x2a>
 800cd26:	68a3      	ldr	r3, [r4, #8]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	60a3      	str	r3, [r4, #8]
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	1c5a      	adds	r2, r3, #1
 800cd30:	6022      	str	r2, [r4, #0]
 800cd32:	701e      	strb	r6, [r3, #0]
 800cd34:	6962      	ldr	r2, [r4, #20]
 800cd36:	1c43      	adds	r3, r0, #1
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d004      	beq.n	800cd46 <__swbuf_r+0x6e>
 800cd3c:	89a3      	ldrh	r3, [r4, #12]
 800cd3e:	07db      	lsls	r3, r3, #31
 800cd40:	d5e1      	bpl.n	800cd06 <__swbuf_r+0x2e>
 800cd42:	2e0a      	cmp	r6, #10
 800cd44:	d1df      	bne.n	800cd06 <__swbuf_r+0x2e>
 800cd46:	4621      	mov	r1, r4
 800cd48:	4628      	mov	r0, r5
 800cd4a:	f7ff ff69 	bl	800cc20 <_fflush_r>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d0d9      	beq.n	800cd06 <__swbuf_r+0x2e>
 800cd52:	e7d6      	b.n	800cd02 <__swbuf_r+0x2a>

0800cd54 <__swsetup_r>:
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	4b29      	ldr	r3, [pc, #164]	@ (800cdfc <__swsetup_r+0xa8>)
 800cd58:	4605      	mov	r5, r0
 800cd5a:	6818      	ldr	r0, [r3, #0]
 800cd5c:	460c      	mov	r4, r1
 800cd5e:	b118      	cbz	r0, 800cd68 <__swsetup_r+0x14>
 800cd60:	6a03      	ldr	r3, [r0, #32]
 800cd62:	b90b      	cbnz	r3, 800cd68 <__swsetup_r+0x14>
 800cd64:	f7ff f8f8 	bl	800bf58 <__sinit>
 800cd68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd6c:	0719      	lsls	r1, r3, #28
 800cd6e:	d422      	bmi.n	800cdb6 <__swsetup_r+0x62>
 800cd70:	06da      	lsls	r2, r3, #27
 800cd72:	d407      	bmi.n	800cd84 <__swsetup_r+0x30>
 800cd74:	2209      	movs	r2, #9
 800cd76:	602a      	str	r2, [r5, #0]
 800cd78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd80:	81a3      	strh	r3, [r4, #12]
 800cd82:	e033      	b.n	800cdec <__swsetup_r+0x98>
 800cd84:	0758      	lsls	r0, r3, #29
 800cd86:	d512      	bpl.n	800cdae <__swsetup_r+0x5a>
 800cd88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd8a:	b141      	cbz	r1, 800cd9e <__swsetup_r+0x4a>
 800cd8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd90:	4299      	cmp	r1, r3
 800cd92:	d002      	beq.n	800cd9a <__swsetup_r+0x46>
 800cd94:	4628      	mov	r0, r5
 800cd96:	f7ff fa51 	bl	800c23c <_free_r>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd9e:	89a3      	ldrh	r3, [r4, #12]
 800cda0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cda4:	81a3      	strh	r3, [r4, #12]
 800cda6:	2300      	movs	r3, #0
 800cda8:	6063      	str	r3, [r4, #4]
 800cdaa:	6923      	ldr	r3, [r4, #16]
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	f043 0308 	orr.w	r3, r3, #8
 800cdb4:	81a3      	strh	r3, [r4, #12]
 800cdb6:	6923      	ldr	r3, [r4, #16]
 800cdb8:	b94b      	cbnz	r3, 800cdce <__swsetup_r+0x7a>
 800cdba:	89a3      	ldrh	r3, [r4, #12]
 800cdbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cdc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdc4:	d003      	beq.n	800cdce <__swsetup_r+0x7a>
 800cdc6:	4621      	mov	r1, r4
 800cdc8:	4628      	mov	r0, r5
 800cdca:	f000 f894 	bl	800cef6 <__smakebuf_r>
 800cdce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdd2:	f013 0201 	ands.w	r2, r3, #1
 800cdd6:	d00a      	beq.n	800cdee <__swsetup_r+0x9a>
 800cdd8:	2200      	movs	r2, #0
 800cdda:	60a2      	str	r2, [r4, #8]
 800cddc:	6962      	ldr	r2, [r4, #20]
 800cdde:	4252      	negs	r2, r2
 800cde0:	61a2      	str	r2, [r4, #24]
 800cde2:	6922      	ldr	r2, [r4, #16]
 800cde4:	b942      	cbnz	r2, 800cdf8 <__swsetup_r+0xa4>
 800cde6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cdea:	d1c5      	bne.n	800cd78 <__swsetup_r+0x24>
 800cdec:	bd38      	pop	{r3, r4, r5, pc}
 800cdee:	0799      	lsls	r1, r3, #30
 800cdf0:	bf58      	it	pl
 800cdf2:	6962      	ldrpl	r2, [r4, #20]
 800cdf4:	60a2      	str	r2, [r4, #8]
 800cdf6:	e7f4      	b.n	800cde2 <__swsetup_r+0x8e>
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	e7f7      	b.n	800cdec <__swsetup_r+0x98>
 800cdfc:	20000190 	.word	0x20000190

0800ce00 <memmove>:
 800ce00:	4288      	cmp	r0, r1
 800ce02:	b510      	push	{r4, lr}
 800ce04:	eb01 0402 	add.w	r4, r1, r2
 800ce08:	d902      	bls.n	800ce10 <memmove+0x10>
 800ce0a:	4284      	cmp	r4, r0
 800ce0c:	4623      	mov	r3, r4
 800ce0e:	d807      	bhi.n	800ce20 <memmove+0x20>
 800ce10:	1e43      	subs	r3, r0, #1
 800ce12:	42a1      	cmp	r1, r4
 800ce14:	d008      	beq.n	800ce28 <memmove+0x28>
 800ce16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce1e:	e7f8      	b.n	800ce12 <memmove+0x12>
 800ce20:	4601      	mov	r1, r0
 800ce22:	4402      	add	r2, r0
 800ce24:	428a      	cmp	r2, r1
 800ce26:	d100      	bne.n	800ce2a <memmove+0x2a>
 800ce28:	bd10      	pop	{r4, pc}
 800ce2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce32:	e7f7      	b.n	800ce24 <memmove+0x24>

0800ce34 <memchr>:
 800ce34:	4603      	mov	r3, r0
 800ce36:	b510      	push	{r4, lr}
 800ce38:	b2c9      	uxtb	r1, r1
 800ce3a:	4402      	add	r2, r0
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	4618      	mov	r0, r3
 800ce40:	d101      	bne.n	800ce46 <memchr+0x12>
 800ce42:	2000      	movs	r0, #0
 800ce44:	e003      	b.n	800ce4e <memchr+0x1a>
 800ce46:	7804      	ldrb	r4, [r0, #0]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	428c      	cmp	r4, r1
 800ce4c:	d1f6      	bne.n	800ce3c <memchr+0x8>
 800ce4e:	bd10      	pop	{r4, pc}

0800ce50 <_realloc_r>:
 800ce50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce54:	4680      	mov	r8, r0
 800ce56:	4615      	mov	r5, r2
 800ce58:	460c      	mov	r4, r1
 800ce5a:	b921      	cbnz	r1, 800ce66 <_realloc_r+0x16>
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce62:	f7fe bf1f 	b.w	800bca4 <_malloc_r>
 800ce66:	b92a      	cbnz	r2, 800ce74 <_realloc_r+0x24>
 800ce68:	f7ff f9e8 	bl	800c23c <_free_r>
 800ce6c:	2400      	movs	r4, #0
 800ce6e:	4620      	mov	r0, r4
 800ce70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce74:	f000 f89e 	bl	800cfb4 <_malloc_usable_size_r>
 800ce78:	4285      	cmp	r5, r0
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	d802      	bhi.n	800ce84 <_realloc_r+0x34>
 800ce7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ce82:	d8f4      	bhi.n	800ce6e <_realloc_r+0x1e>
 800ce84:	4629      	mov	r1, r5
 800ce86:	4640      	mov	r0, r8
 800ce88:	f7fe ff0c 	bl	800bca4 <_malloc_r>
 800ce8c:	4607      	mov	r7, r0
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d0ec      	beq.n	800ce6c <_realloc_r+0x1c>
 800ce92:	42b5      	cmp	r5, r6
 800ce94:	462a      	mov	r2, r5
 800ce96:	4621      	mov	r1, r4
 800ce98:	bf28      	it	cs
 800ce9a:	4632      	movcs	r2, r6
 800ce9c:	f7ff f9bf 	bl	800c21e <memcpy>
 800cea0:	4621      	mov	r1, r4
 800cea2:	4640      	mov	r0, r8
 800cea4:	f7ff f9ca 	bl	800c23c <_free_r>
 800cea8:	463c      	mov	r4, r7
 800ceaa:	e7e0      	b.n	800ce6e <_realloc_r+0x1e>

0800ceac <__swhatbuf_r>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	460c      	mov	r4, r1
 800ceb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb4:	4615      	mov	r5, r2
 800ceb6:	2900      	cmp	r1, #0
 800ceb8:	461e      	mov	r6, r3
 800ceba:	b096      	sub	sp, #88	@ 0x58
 800cebc:	da0c      	bge.n	800ced8 <__swhatbuf_r+0x2c>
 800cebe:	89a3      	ldrh	r3, [r4, #12]
 800cec0:	2100      	movs	r1, #0
 800cec2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cec6:	bf14      	ite	ne
 800cec8:	2340      	movne	r3, #64	@ 0x40
 800ceca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cece:	2000      	movs	r0, #0
 800ced0:	6031      	str	r1, [r6, #0]
 800ced2:	602b      	str	r3, [r5, #0]
 800ced4:	b016      	add	sp, #88	@ 0x58
 800ced6:	bd70      	pop	{r4, r5, r6, pc}
 800ced8:	466a      	mov	r2, sp
 800ceda:	f000 f849 	bl	800cf70 <_fstat_r>
 800cede:	2800      	cmp	r0, #0
 800cee0:	dbed      	blt.n	800cebe <__swhatbuf_r+0x12>
 800cee2:	9901      	ldr	r1, [sp, #4]
 800cee4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cee8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ceec:	4259      	negs	r1, r3
 800ceee:	4159      	adcs	r1, r3
 800cef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cef4:	e7eb      	b.n	800cece <__swhatbuf_r+0x22>

0800cef6 <__smakebuf_r>:
 800cef6:	898b      	ldrh	r3, [r1, #12]
 800cef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cefa:	079d      	lsls	r5, r3, #30
 800cefc:	4606      	mov	r6, r0
 800cefe:	460c      	mov	r4, r1
 800cf00:	d507      	bpl.n	800cf12 <__smakebuf_r+0x1c>
 800cf02:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cf06:	6023      	str	r3, [r4, #0]
 800cf08:	6123      	str	r3, [r4, #16]
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	6163      	str	r3, [r4, #20]
 800cf0e:	b003      	add	sp, #12
 800cf10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf12:	466a      	mov	r2, sp
 800cf14:	ab01      	add	r3, sp, #4
 800cf16:	f7ff ffc9 	bl	800ceac <__swhatbuf_r>
 800cf1a:	9f00      	ldr	r7, [sp, #0]
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	4639      	mov	r1, r7
 800cf20:	4630      	mov	r0, r6
 800cf22:	f7fe febf 	bl	800bca4 <_malloc_r>
 800cf26:	b948      	cbnz	r0, 800cf3c <__smakebuf_r+0x46>
 800cf28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf2c:	059a      	lsls	r2, r3, #22
 800cf2e:	d4ee      	bmi.n	800cf0e <__smakebuf_r+0x18>
 800cf30:	f023 0303 	bic.w	r3, r3, #3
 800cf34:	f043 0302 	orr.w	r3, r3, #2
 800cf38:	81a3      	strh	r3, [r4, #12]
 800cf3a:	e7e2      	b.n	800cf02 <__smakebuf_r+0xc>
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf46:	81a3      	strh	r3, [r4, #12]
 800cf48:	9b01      	ldr	r3, [sp, #4]
 800cf4a:	6020      	str	r0, [r4, #0]
 800cf4c:	b15b      	cbz	r3, 800cf66 <__smakebuf_r+0x70>
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf54:	f000 f81e 	bl	800cf94 <_isatty_r>
 800cf58:	b128      	cbz	r0, 800cf66 <__smakebuf_r+0x70>
 800cf5a:	89a3      	ldrh	r3, [r4, #12]
 800cf5c:	f023 0303 	bic.w	r3, r3, #3
 800cf60:	f043 0301 	orr.w	r3, r3, #1
 800cf64:	81a3      	strh	r3, [r4, #12]
 800cf66:	89a3      	ldrh	r3, [r4, #12]
 800cf68:	431d      	orrs	r5, r3
 800cf6a:	81a5      	strh	r5, [r4, #12]
 800cf6c:	e7cf      	b.n	800cf0e <__smakebuf_r+0x18>
	...

0800cf70 <_fstat_r>:
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	2300      	movs	r3, #0
 800cf74:	4d06      	ldr	r5, [pc, #24]	@ (800cf90 <_fstat_r+0x20>)
 800cf76:	4604      	mov	r4, r0
 800cf78:	4608      	mov	r0, r1
 800cf7a:	4611      	mov	r1, r2
 800cf7c:	602b      	str	r3, [r5, #0]
 800cf7e:	f7f6 fad1 	bl	8003524 <_fstat>
 800cf82:	1c43      	adds	r3, r0, #1
 800cf84:	d102      	bne.n	800cf8c <_fstat_r+0x1c>
 800cf86:	682b      	ldr	r3, [r5, #0]
 800cf88:	b103      	cbz	r3, 800cf8c <_fstat_r+0x1c>
 800cf8a:	6023      	str	r3, [r4, #0]
 800cf8c:	bd38      	pop	{r3, r4, r5, pc}
 800cf8e:	bf00      	nop
 800cf90:	20001600 	.word	0x20001600

0800cf94 <_isatty_r>:
 800cf94:	b538      	push	{r3, r4, r5, lr}
 800cf96:	2300      	movs	r3, #0
 800cf98:	4d05      	ldr	r5, [pc, #20]	@ (800cfb0 <_isatty_r+0x1c>)
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	602b      	str	r3, [r5, #0]
 800cfa0:	f7f6 facf 	bl	8003542 <_isatty>
 800cfa4:	1c43      	adds	r3, r0, #1
 800cfa6:	d102      	bne.n	800cfae <_isatty_r+0x1a>
 800cfa8:	682b      	ldr	r3, [r5, #0]
 800cfaa:	b103      	cbz	r3, 800cfae <_isatty_r+0x1a>
 800cfac:	6023      	str	r3, [r4, #0]
 800cfae:	bd38      	pop	{r3, r4, r5, pc}
 800cfb0:	20001600 	.word	0x20001600

0800cfb4 <_malloc_usable_size_r>:
 800cfb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfb8:	1f18      	subs	r0, r3, #4
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	bfbc      	itt	lt
 800cfbe:	580b      	ldrlt	r3, [r1, r0]
 800cfc0:	18c0      	addlt	r0, r0, r3
 800cfc2:	4770      	bx	lr

0800cfc4 <_init>:
 800cfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc6:	bf00      	nop
 800cfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfca:	bc08      	pop	{r3}
 800cfcc:	469e      	mov	lr, r3
 800cfce:	4770      	bx	lr

0800cfd0 <_fini>:
 800cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd2:	bf00      	nop
 800cfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfd6:	bc08      	pop	{r3}
 800cfd8:	469e      	mov	lr, r3
 800cfda:	4770      	bx	lr
